<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lu Jingxiang&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-10T10:19:00.306Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Lu Jingxiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>苍穹外卖——前端套餐管理</title>
    <link href="http://example.com/2024/06/10/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E2%80%94%E2%80%94%E5%89%8D%E7%AB%AF%E5%A5%97%E9%A4%90%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2024/06/10/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E2%80%94%E2%80%94%E5%89%8D%E7%AB%AF%E5%A5%97%E9%A4%90%E7%AE%A1%E7%90%86/</id>
    <published>2024-06-10T10:18:01.000Z</published>
    <updated>2024-06-10T10:19:00.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="套餐管理"><a href="#套餐管理" class="headerlink" title="套餐管理"></a>套餐管理</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul><li>套餐分页查询</li><li>启售停售套餐</li><li>删除套餐</li><li>新增套餐</li></ul><h2 id="1-套餐分页查询"><a href="#1-套餐分页查询" class="headerlink" title="1. 套餐分页查询"></a>1. 套餐分页查询</h2><h3 id="1-1-需求分析和接口设计"><a href="#1-1-需求分析和接口设计" class="headerlink" title="1.1 需求分析和接口设计"></a>1.1 需求分析和接口设计</h3><p>根据产品原型来了解需求，套餐分页查询的产品原型如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818571.png" alt="image-20231019100236805"></p><p>业务规则：</p><ul><li>根据页码展示套餐信息(套餐名称、套餐图片、套餐分类、价格、售卖状态、最后操作时间等)</li><li>每页展示10条数据</li><li>分页查询时可以根据需要，输入套餐名、套餐分类、售卖状态 进行查询</li></ul><p>要展示套餐分页数据，就需要前后端进行数据交互，对应的接口有两个：</p><ul><li>分类查询接口（用于套餐分类下拉框中分类数据展示）</li><li>套餐分页查询接口</li></ul><p>（1）分类查询接口</p><p> <strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;category&#x2F;list</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>type</td><td>否</td><td>2</td><td>分类类型：1为菜品分类，2为套餐分类</td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object []</td><td>非必须</td><td></td><td></td><td>item 类型: object</td></tr><tr><td>├─ createTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ createUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ id</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ name</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ sort</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ status</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ type</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ updateTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ updateUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><p>（2）套餐分页查询接口</p><p> <strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;setmeal&#x2F;page</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>categoryId</td><td>否</td><td></td><td>分类id</td></tr><tr><td>name</td><td>否</td><td></td><td>套餐名称</td></tr><tr><td>page</td><td>是</td><td></td><td>页码</td></tr><tr><td>pageSize</td><td>是</td><td></td><td>每页记录数</td></tr><tr><td>status</td><td>否</td><td></td><td>套餐起售状态</td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>null</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>data</td><td>object</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ total</td><td>number</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ records</td><td>object []</td><td>非必须</td><td></td><td></td><td>item 类型: object</td></tr><tr><td>├─ id</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ categoryId</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ name</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ price</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ status</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ description</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ image</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ updateTime</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ categoryName</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="1-2-代码开发"><a href="#1-2-代码开发" class="headerlink" title="1.2 代码开发"></a>1.2 代码开发</h3><p>要开发前端代码，首先需要找到对应的组件。从路由文件 router.ts 中找到套餐管理页面（组件）。</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818572.png" alt="image-20231020143129575"></p><p>可以看到，套餐管理页面（组件）的位置为：src&#x2F;views&#x2F;setmeal&#x2F;index.vue。我们只需要在此文件中开发套餐分页查询相关的前端代码即可，整个开发过程大概可以分为以下几个关键步骤：</p><ol><li>根据产品原型，制作页面头部效果（输入框、下拉框、查询按钮等）</li><li>动态填充套餐分类下拉框中的分类数据</li><li>为查询按钮绑定单击事件，发送Ajax请求，查询套餐分页数据，实现前后端交互</li><li>提供 vue 的初始化方法，在页面加载后就查询分页数据</li><li>使用ElementUI提供的表格组件展示分页数据</li><li>使用ElementUI提供的分页条组件实现翻页效果</li></ol><p>注意：开发过程中，并不是所有的代码都实现了再测试，而是开发一部分，就需要测试一下，看效果，如果有问题再调整。没有问题，再继续开发、测试。所以，这是一个逐渐完善的过程。下面我们就按照上面的几个关键步骤来开发，每开发完一个关键步骤，就需要测试一下，来验证我们的代码是否正确。</p><h4 id="2-2-1-制作页面头部效果"><a href="#2-2-1-制作页面头部效果" class="headerlink" title="2.2.1 制作页面头部效果"></a>2.2.1 制作页面头部效果</h4><p>根据产品原型，制作页面头部效果（输入框、查询按钮等）。产品原型中的头部效果如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818573.png" alt="image-20231020153003427"></p><p>注意：输入框和按钮都是使用 ElementUI 提供的组件，对于前端的组件只需要参考 ElementUI 提供的文档，进行修改即可。实现代码如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818574.png" alt="image-20231020153413719"></p><p>注意：当前套餐分类下拉框中的数据是直接在页面固定写死的，后续需要改为从后端动态获取。</p><h4 id="2-2-2-动态填充套餐分类下拉框数据"><a href="#2-2-2-动态填充套餐分类下拉框数据" class="headerlink" title="2.2.2 动态填充套餐分类下拉框数据"></a>2.2.2 动态填充套餐分类下拉框数据</h4><p>现在需要将套餐分类下拉框中的数据改为动态获取，即前端需要发送Ajax请求，调用后端的分类查询接口，然后将后端返回的套餐分类数据动态展示在下拉框中。因为本次前后端交互是需要查询分类数据，所以按照项目规范，发送Ajax请求的代码需要定义到 src&#x2F;api&#x2F;category.ts 文件中。其实在此文件中已经定义了此方法，如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818575.png" alt="image-20231020153956869"></p><p>所以，此处只需要将此方法(getCategoryByType)导入当前组件，然后在 created 方法中调用此方法，获取套餐分类数据，动态填充套餐分类下拉框即可。具体代码如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818576.png" alt="image-20231020154449782"></p><p>注意：因为此处我们要查询的是套餐分类，所以传递的参数type值为2。</p><p>前面我们已经初步实现了页面头部制作，并且可以填充下拉框中的数据了。但是命名上并不是特别规范，所以我们需要进行一个调整，具体修改后端的代码如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818577.png" alt="image-20231020154747092"></p><p>两个下拉框的测试效果如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818578.png" alt="image-20231020154909513"></p><h4 id="2-2-3-动态获取套餐分页数据"><a href="#2-2-3-动态获取套餐分页数据" class="headerlink" title="2.2.3 动态获取套餐分页数据"></a>2.2.3 动态获取套餐分页数据</h4><p>前面我们已经完成了页面头部效果开发，接下来就需要开发前后端数据交互的动态效果。</p><p>第一步：为查询按钮绑定单击事件</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818579.png" alt="image-20231020155054149"></p><p>第二步：在methods中定义 pageQuery 方法，先验证当前方法能否正常执行</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818580.png" alt="image-20231020155113565"></p><p>注意：按照开发规范，真正发送Ajax请求的代码需要封装到 api目录下的ts文件中（src&#x2F;api&#x2F;setMeal.ts）</p><p>第三步：在src&#x2F;api&#x2F;setMeal.ts 中定义 getSetmealPage 方法，实现发送Ajax请求获取分页数据</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818581.png" alt="image-20231020155235487"></p><p>注意：发送 Ajax 请求的URL地址需要和前面我们设计的分页查询接口对应</p><p>第四步：在套餐管理组件中导入 setMeal.ts 中定义的方法，并在data() 方法中定义分页相关的模型数据</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818582.png" alt="image-20231020155347403"></p><p>注意：需要将属性和上面的输入框、下拉框进行双向绑定。</p><p>第五步：在pageQuery 方法中调用 getSetmealPage方法，实现前后端数据交互</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818583.png" alt="image-20231020155526957"></p><h4 id="2-2-4-自动发送Ajax请求"><a href="#2-2-4-自动发送Ajax请求" class="headerlink" title="2.2.4 自动发送Ajax请求"></a>2.2.4 自动发送Ajax请求</h4><p>前面的代码我们已经实现了前后端数据交互，但是有一个问题，就是只有在点击查询按钮时才会发生Ajax请求，实现分页数据查询。我们通常需要的是在当前页面（组件）加载后，就需要发送Ajax请求，查询第一页的数据。要实现这个效果，我们可以通过vue的生命周期方法，即created方法来做到，代码如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818584.png" alt="image-20231020155637956"></p><h4 id="2-2-5-使用表格展示分页数据"><a href="#2-2-5-使用表格展示分页数据" class="headerlink" title="2.2.5 使用表格展示分页数据"></a>2.2.5 使用表格展示分页数据</h4><p>前面我们已经实现了前后端数据交互，现在就需要将后端返回的数据通过表格展示出来，我们可以使用ElementUI提供的表格组件，具体使用方法可以参照官方提供的示例 <a href="https://element.eleme.io/#/zh-CN/component/table">https://element.eleme.io/#/zh-CN/component/table</a></p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818585.png" alt="image-20231020155734122"></p><h4 id="2-2-6-使用分页条实现翻页效果"><a href="#2-2-6-使用分页条实现翻页效果" class="headerlink" title="2.2.6 使用分页条实现翻页效果"></a>2.2.6 使用分页条实现翻页效果</h4><p>使用 ElementUI 提供的分页条组件，并绑定事件处理函数，具体使用方法可以参照官方提供的示例 <a href="https://element.eleme.io/#/zh-CN/component/pagination">https://element.eleme.io/#/zh-CN/component/pagination</a></p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818586.png" alt="image-20231020155812305"></p><h3 id="1-3-功能测试"><a href="#1-3-功能测试" class="headerlink" title="1.3 功能测试"></a>1.3 功能测试</h3><p>可以通过下面两种方式来测试：</p><ul><li>直接进行前后端联调，查看页面效果</li><li>通过浏览器F12查看数据交互过程</li></ul><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818587.png" alt="image-20231020155938508"></p><h2 id="2-启售停售套餐"><a href="#2-启售停售套餐" class="headerlink" title="2. 启售停售套餐"></a>2. 启售停售套餐</h2><h3 id="2-1-需求分析和接口设计"><a href="#2-1-需求分析和接口设计" class="headerlink" title="2.1 需求分析和接口设计"></a>2.1 需求分析和接口设计</h3><p>根据产品原型来进行需求分析：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818588.png" alt="image-20231023094228836"></p><p>可以对状态为“启售” 的套餐进行“停售”操作</p><p>可以对状态为“停售”的套餐进行“启售”操作</p><p>状态为“停售”的套餐不展示在用户端小程序中，所以用户不能购买停售的套餐</p><p>接口设计如下：</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;setmeal&#x2F;status&#x2F;{status}</p><p><strong>Method：</strong> POST</p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>application&#x2F;json</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>路径参数</strong></p><table><thead><tr><th>参数名称</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>status</td><td>1</td><td>套餐状态，1表示起售，0表示停售</td></tr></tbody></table><p><strong>Query</strong></p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>是</td><td>101</td><td>套餐id</td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="2-2-代码开发"><a href="#2-2-代码开发" class="headerlink" title="2.2 代码开发"></a>2.2 代码开发</h3><p>第一步：为启售停售按钮绑定单击事件</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818589.png" alt="image-20231023095123819"></p><p>第二步：编写对应的处理函数handleStartOrStop</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818590.png" alt="image-20231023095249208"></p><p>到此可以先测试一下，检查当前方法能否成功执行，页面效果如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818591.png" alt="image-20231023095322300"></p><p>第三步：在 setMeal.ts 中封装套餐起售停售方法，发送Ajax请求</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818592.png" alt="image-20231023095630819"></p><p>注意：发送请求的方式和相关参数，必须和前面的接口设计保持一致</p><p>第四步：在套餐管理组件中引入上面定义的enableOrDisableSetmeal方法，并完善 handleStartOrStop 方法</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818593.png" alt="image-20231023095730185"></p><p>注意：</p><ul><li>在进行套餐启售停售操作时，建议先弹出确认框，用户点击确定按钮后再进行前后端交互</li><li>在传递套餐状态参数status时，需要进行简单的处理，即：如果当前套餐状态值为1，则传递过去的参数为0；如果当前套餐状态值为0，则传递过去的参数为1</li></ul><h3 id="2-3-功能测试"><a href="#2-3-功能测试" class="headerlink" title="2.3 功能测试"></a>2.3 功能测试</h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818594.png" alt="image-20231023100008708"></p><h2 id="3-删除套餐"><a href="#3-删除套餐" class="headerlink" title="3. 删除套餐"></a>3. 删除套餐</h2><h3 id="3-1-需求分析和接口设计"><a href="#3-1-需求分析和接口设计" class="headerlink" title="3.1 需求分析和接口设计"></a>3.1 需求分析和接口设计</h3><p>根据产品原型来进行需求分析，产品原型如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818595.png" alt="image-20231023142125944"></p><ul><li>点击 删除 按钮，删除指定的一个套餐</li><li>勾选需要删除的套餐，点击 批量删除 按钮，删除选中的一个或多个套餐</li><li>状态为 “启售” 的套餐不能删除，需要给出操作提示</li></ul><p>可以看到，删除套餐功能在操作时有两种方式。一种是点击【删除】按钮，可以删除对应的一个套餐；一种是勾选需要删除的套餐，然后点击【批量删除】按钮，可以删除勾选的多个套餐。我们在设计接口时可以兼容这两种不同的操作方式，也就是只需要一个接口即可。</p><p>接口设计如下：</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;setmeal</p><p><strong>Method：</strong> DELETE</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>ids</td><td>是</td><td>1,2,3</td><td>ids</td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="3-2-代码开发"><a href="#3-2-代码开发" class="headerlink" title="3.2 代码开发"></a>3.2 代码开发</h3><p>要开发删除套餐前端代码，首先需要了解删除套餐业务功能的操作步骤：</p><ol><li>在套餐管理列表页面，点击 【删除】按钮，或者勾选套餐然后点击【批量删除】按钮，弹出确认对话框</li><li>点击确认对话框中的【确定】按钮，则执行删除操作。如果套餐状态为“启售”，则不能删除，弹出信息提示</li><li>点击确认对话框中的【取消】按钮，则关闭对话框，不执行删除操作</li></ol><p>接下来我们就可以按照上面的操作步骤来具体开发前端的代码。</p><p>第一步：在 setMeal.ts 中封装删除套餐方法，发送Ajax请求，用于实现前后端交互</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818596.png" alt="image-20231023163921668"></p><p>注意：</p><ul><li>发送请求的方式和相关参数，必须和前面的接口设计保持一致</li><li>使用此方法时，别忘了在组件中通过import导入</li></ul><p>第二步：为【批量删除】按钮绑定单击事件，并在methods中编写对应的处理函数</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818597.png" alt="image-20231023164110268"></p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818598.png" alt="image-20231023164255891"></p><p>到目前为止我们点击【批量删除】按钮，是可以执行handleDelete方法的。接下来我们需要解决一个问题，就是当前选中了哪些套餐呢？我们需要能够动态获取到，因为我们需要将这些套餐的id作为参数传递到后端。</p><p>第三步：参考 ElementUI 的官方文档，为表格组件添加 <strong>selection-change</strong> 事件和对应的处理函数，通过此事件我们就可以动态获取到当前勾选的套餐有哪些</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818599.png" alt="image-20231023165937804"></p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818600.png" alt="image-20231023170202159"></p><p>注： <strong>selection-change</strong> 事件为 当选择项发生变化时触发的事件</p><p>第四步：完善 handleDelete 方法，获取当前被选中的行，并进行参数准备</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818601.png" alt="image-20231023170312864"></p><p>注意：单个删除 和 批量删除，都是调用 handleDelete 方法，所以此方法还需要进一步调整</p><p>第五步：为【删除】按钮绑定单击事件，处理函数还是 handleDelete</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818602.png" alt="image-20231023170440585"></p><p>注意：</p><ul><li>在 handleDelete 方法中通过第一个参数来区分是单个删除还是批量删除</li><li>S表示单个删除，B表示批量删除</li></ul><p>第六步：调整 handleDelete 方法，使其兼容单个删除和批量删除</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818603.png" alt="image-20231023170612705"></p><p>第七步：完善 handleDelete 方法，进行相应提示</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818604.png" alt="image-20231023170710212"></p><p>注：</p><ul><li>批量删除时，如果没有选中套餐，给出提示</li><li>删除之前需要弹出确认框，让用户确认</li></ul><h3 id="3-3-功能测试"><a href="#3-3-功能测试" class="headerlink" title="3.3 功能测试"></a>3.3 功能测试</h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818605.png" alt="image-20231023170832442"></p><h2 id="4-新增套餐"><a href="#4-新增套餐" class="headerlink" title="4. 新增套餐"></a>4. 新增套餐</h2><h3 id="4-1-需求分析和接口设计"><a href="#4-1-需求分析和接口设计" class="headerlink" title="4.1 需求分析和接口设计"></a>4.1 需求分析和接口设计</h3><p>根据产品原型来进行需求分析，产品原型如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818606.png" alt="image-20231025113638867"></p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818607.png" alt="image-20231025113707572"></p><p>新增套餐时需要录入套餐名称、所属分类、套餐价格、套餐包含的菜品、套餐图片、描述等信息。其中套餐包含的菜品需要在弹出的添加菜品窗口中勾选。在弹出的添加菜品窗口中需要按照分类来展示菜品。</p><p>新增套餐功能涉及到4个接口，分别是：</p><ul><li>根据类型查询分类 接口</li><li>根据分类查询菜品 接口</li><li>文件上传 接口</li><li>新增套餐 接口</li></ul><p>(1) 根据类型查询分类 接口</p><p> <strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;category&#x2F;list</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>type</td><td>否</td><td>2</td><td>分类类型：1为菜品分类，2为套餐分类</td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object []</td><td>非必须</td><td></td><td></td><td>item 类型: object</td></tr><tr><td>├─ createTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ createUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ id</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ name</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ sort</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ status</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ type</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ updateTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ updateUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><p>(2) 根据分类查询菜品 接口</p><p> <strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;dish&#x2F;list</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>categoryId</td><td>是</td><td>101</td><td>分类id</td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object []</td><td>非必须</td><td></td><td></td><td>item 类型: object</td></tr><tr><td>├─ categoryId</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ createTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ createUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ description</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ id</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ image</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ name</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ price</td><td>number</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ status</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ updateTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ updateUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><p>(3) 文件上传 接口</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;common&#x2F;upload</p><p><strong>Method：</strong> POST</p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>multipart&#x2F;form-data</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>Body</strong></p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>file</td><td>file</td><td>是</td><td></td><td>文件</td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>string</td><td>必须</td><td></td><td>文件上传路径</td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><p>(4) 新增套餐 接口</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;setmeal</p><p><strong>Method：</strong> POST</p><p><strong>接口描述：</strong></p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>application&#x2F;json</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>Body</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>categoryId</td><td>integer</td><td>必须</td><td></td><td>分类id</td><td>format: int64</td></tr><tr><td>description</td><td>string</td><td>非必须</td><td></td><td>套餐描述</td><td></td></tr><tr><td>id</td><td>integer</td><td>非必须</td><td></td><td>套餐id</td><td>format: int64</td></tr><tr><td>image</td><td>string</td><td>必须</td><td></td><td>套餐图片</td><td></td></tr><tr><td>name</td><td>string</td><td>必须</td><td></td><td>套餐名称</td><td></td></tr><tr><td>price</td><td>number</td><td>必须</td><td></td><td>套餐价格</td><td></td></tr><tr><td>setmealDishes</td><td>object []</td><td>必须</td><td></td><td>套餐包含的菜品</td><td>item 类型: object</td></tr><tr><td>├─ copies</td><td>integer</td><td>必须</td><td></td><td>份数</td><td>format: int32</td></tr><tr><td>├─ dishId</td><td>integer</td><td>必须</td><td></td><td>菜品id</td><td>format: int64</td></tr><tr><td>├─ id</td><td>integer</td><td>非必须</td><td></td><td>套餐和菜品关系id</td><td>format: int64</td></tr><tr><td>├─ name</td><td>string</td><td>必须</td><td></td><td>菜品名称</td><td></td></tr><tr><td>├─ price</td><td>number</td><td>必须</td><td></td><td>菜品价格</td><td></td></tr><tr><td>├─ setmealId</td><td>integer</td><td>必须</td><td></td><td>套餐id</td><td>format: int64</td></tr><tr><td>status</td><td>integer</td><td>必须</td><td></td><td>套餐状态：1位起售 0为停售</td><td>format: int32</td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="4-2-代码解读"><a href="#4-2-代码解读" class="headerlink" title="4.2 代码解读"></a>4.2 代码解读</h3><p>新增套餐操作步骤：</p><p>①点击 “新建套餐”按钮，跳转到新增页面</p><p>②在新增套餐页面录入套餐相关信息</p><p>③点击“保存”按钮完成新增操作</p><p>首先需要找到新增套餐页面，可以通过操作过程来找：</p><p>第一步：在套餐管理列表页面中找到【新建套餐】按钮，查看按钮绑定的事件和对应的处理函数</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818608.png" alt="image-20231026101005983"></p><p>第二步：在methods中找到handleAdd函数，查看跳转的路由路径</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818609.png" alt="image-20231026101037315"></p><p>第三步：在路由文件中找到此路径对应的视图组件，可以看到是src&#x2F;views&#x2F;setmeal&#x2F;addSetmeal.vue</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101818610.png" alt="image-20231026101135442"></p><p>第四步：解读src&#x2F;views&#x2F;setmeal&#x2F;addSetmeal.vue这个文件即可</p><h3 id="4-3-功能测试"><a href="#4-3-功能测试" class="headerlink" title="4.3 功能测试"></a>4.3 功能测试</h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;套餐管理&quot;&gt;&lt;a href=&quot;#套餐管理&quot; class=&quot;headerlink&quot; title=&quot;套餐管理&quot;&gt;&lt;/a&gt;套餐管理&lt;/h1&gt;&lt;h2 id=&quot;课程内容&quot;&gt;&lt;a href=&quot;#课程内容&quot; class=&quot;headerlink&quot; title=&quot;课程内容&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖——前端环境搭建</title>
    <link href="http://example.com/2024/06/10/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E2%80%94%E2%80%94%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2024/06/10/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E2%80%94%E2%80%94%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2024-06-10T10:16:41.000Z</published>
    <updated>2024-06-10T10:17:31.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端环境搭建、员工管理"><a href="#前端环境搭建、员工管理" class="headerlink" title="前端环境搭建、员工管理"></a>前端环境搭建、员工管理</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul><li><p>前端环境搭建</p></li><li><p>员工分页查询</p></li><li><p>启用禁用员工账号</p></li><li><p>新增员工</p></li><li><p>修改员工</p></li></ul><h2 id="1-前端环境搭建"><a href="#1-前端环境搭建" class="headerlink" title="1. 前端环境搭建"></a>1. 前端环境搭建</h2><h3 id="1-1-技术选型"><a href="#1-1-技术选型" class="headerlink" title="1.1 技术选型"></a>1.1 技术选型</h3><p>本项目使用到的前端技术如下：</p><ul><li>node.js</li><li>vue</li><li>ElementUI</li><li>axios</li><li>vuex</li><li>vue-router</li><li>typescript</li></ul><h3 id="1-2-熟悉前端代码结构"><a href="#1-2-熟悉前端代码结构" class="headerlink" title="1.2 熟悉前端代码结构"></a>1.2 熟悉前端代码结构</h3><p>直接导入课程资料中提供的苍穹外卖项目前端初始工程，此工程中已经开发了部分功能，后续我们在此基础上开发新功能即可。</p><p>导入后的效果如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817349.png" alt="image-20231009112322302"></p><p>主要代码在src目录中，src目录结构如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817350.png" alt="image-20231009112436925"></p><p>下面重点介绍一下src中的重点文件和目录：</p><ul><li>api：存放封装了Ajax请求文件的目录</li><li>components：公共组件存放目录</li><li>views：存放视图组件的目录</li><li>App.vue：项目的主组件，页面的入口文件</li><li>main.ts：整个项目的入口文件</li><li>router.ts：路由文件</li></ul><p>注意：我们上面导入的初始工程中并没有前端项目运行所依赖的JS包，需要在终端通过 npm install 命令进行安装。安装完成后，可以看到生成了node_modules目录，目录中就是安装的JS包，效果如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817351.png" alt="image-20231009154944721"></p><p>接下来，我们通过初始工程中已经完成的登录功能来跟踪程序的执行过程，熟悉前端项目的代码结构。</p><p>首先需要启动前端项目，命令为：npm run serve，然后访问前端项目，效果如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817352.png" alt="image-20231010103544159"></p><p>注意：需要同时启动后端 java 服务，才能进行前后端交互。</p><p>具体操作的步骤如下：</p><p>① 获得登录页面路由地址</p><p>​登录页面完整的访问地址为 <a href="http://localhost:8888/#/login%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%B7%AF%E7%94%B1%E5%9C%B0%E5%9D%80%E4%B8%BA">http://localhost:8888/#/login，其中登录页面的路由地址为</a> &#x2F;login，我们需要通过此路由地址找到对应的登录视图组件</p><p>② 从main.ts中找到路由文件</p><p>​main.ts是整个前端项目的入口文件，在此文件中会创建Vue实例，在创建Vue实例时需要传入路由对象，所以从此文件中可以找到对应的路由文件位置。如下所示：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817353.png" alt="image-20231011101828271"></p><p>③ 从路由文件中找到登录视图组件</p><p>​在路由文件中会配置整个项目所有的路由映射规则，我们只需要找到 &#x2F;login 这个路径对应的实体组件即可。如下所示：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817354.png" alt="image-20231011102024084"></p><p>④ 从登录视图组件中找到登录方法</p><p>​从上面的路由文件可以确定登录视图组件就是src&#x2F;views&#x2F;login&#x2F;index.vue，此时就可以打开这个文件，然后仔细阅读代码，找到登录方法，如下所示：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817355.png" alt="image-20231011102341145"></p><p>⑤ 跟踪登录方法的执行过程</p><p>​找到登录方法后，就需要跟踪代码的执行过程，主要就是观察前后端的交互过程。例如前端如何发送的Ajax请求，后端返回的数据格式等等</p><h2 id="2-员工分页查询"><a href="#2-员工分页查询" class="headerlink" title="2. 员工分页查询"></a>2. 员工分页查询</h2><h3 id="2-1-需求分析和接口设计"><a href="#2-1-需求分析和接口设计" class="headerlink" title="2.1 需求分析和接口设计"></a>2.1 需求分析和接口设计</h3><p>根据产品原型来了解需求，员工分页查询的产品原型如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817356.png" alt="image-20231011104301458"></p><p>业务规则：</p><ul><li>根据页码展示员工信息(员工姓名、账号、手机号、账号状态、最后操作时间等)</li><li>每页展示10条数据</li><li>分页查询时可以根据需要，输入员工姓名进行查询</li></ul><p>要展示员工分页数据，就需要前后端进行数据交互，对应的接口如下：</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;employee&#x2F;page</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>否</td><td>张三</td><td>员工姓名</td></tr><tr><td>page</td><td>是</td><td>1</td><td>页码</td></tr><tr><td>pageSize</td><td>是</td><td>10</td><td>每页记录数</td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>null</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>data</td><td>object</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ total</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ records</td><td>object []</td><td>必须</td><td></td><td></td><td>item 类型: object</td></tr><tr><td>├─ id</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ username</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ name</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ password</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ phone</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ sex</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ idNumber</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ status</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ createTime</td><td>string,null</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ updateTime</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ createUser</td><td>number,null</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ updateUser</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="2-2-代码开发"><a href="#2-2-代码开发" class="headerlink" title="2.2 代码开发"></a>2.2 代码开发</h3><p>要开发前端代码，首先需要找到对应的组件。从路由文件 router.ts 中找到员工管理页面（组件）。</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817357.png" alt="image-20231012100658784"></p><p>可以看到，员工管理页面（组件）的位置为：src&#x2F;views&#x2F;employee&#x2F;index.vue。我们只需要在此文件中开发员工分页查询相关的前端代码即可，整个开发过程大概可以分为以下几个关键步骤：</p><ol><li>根据产品原型，制作页面头部效果（输入框、查询按钮等）</li><li>为查询按钮绑定单击事件，发送Ajax请求，查询员工分页数据，实现前后端交互</li><li>提供 vue 的初始化方法，在页面加载后就查询分页数据</li><li>使用ElementUI提供的表格组件展示分页数据</li><li>使用ElementUI提供的分页条组件实现翻页效果</li></ol><p>注意：开发过程中，并不是所有的代码都实现了再测试，而是开发一部分，就需要测试一下，看效果，如果有问题再调整。没有问题，再继续开发、测试。所以，这是一个逐渐完善的过程。下面我们就按照上面的几个关键步骤来开发，每开发完一个关键步骤，就需要测试一下，来验证我们的代码是否正确。</p><h4 id="2-2-1-制作页面头部效果"><a href="#2-2-1-制作页面头部效果" class="headerlink" title="2.2.1 制作页面头部效果"></a>2.2.1 制作页面头部效果</h4><p>根据产品原型，制作页面头部效果（输入框、查询按钮等）。产品原型中的头部效果如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817358.png" alt="image-20231012104130496"></p><p>注意：输入框和按钮都是使用 ElementUI 提供的组件，对于前端的组件只需要参考 ElementUI 提供的文档，进行修改即可。实现代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tableBar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 5px&quot;</span>&gt;</span></span><br><span class="line">        员工姓名: </span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入员工姓名&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 15%&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20px&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float: right&quot;</span>&gt;</span>+添加员工<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开发完上面代码后，就可以测试一下，页面效果如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817359.png" alt="image-20231012114155894"></p><h4 id="2-2-2-实现前后端数据交互"><a href="#2-2-2-实现前后端数据交互" class="headerlink" title="2.2.2 实现前后端数据交互"></a>2.2.2 实现前后端数据交互</h4><p>前面我们已经完成了页面头部效果开发，接下来就需要开发前后端数据交互的动态效果。</p><p>第一步：为查询按钮绑定单击事件</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817360.png" alt="image-20231016094210211"></p><p>第二步：在methods中定义 pageQuery 方法，先验证当前方法能否正常执行</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817361.png" alt="image-20231016094354605"></p><p>注意：按照开发规范，真正发送Ajax请求的代码需要封装到 api目录下的ts文件中（src&#x2F;api&#x2F;employee.ts）</p><p>第三步：在src&#x2F;api&#x2F;employee.ts 中定义 getEmployeeList 方法，实现发送Ajax请求获取分页数据</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817362.png" alt="image-20231016094612536"></p><p>注意：发送 Ajax 请求的URL地址需要和前面我们设计的分页查询接口对应</p><p>第四步：在员工管理组件中导入 employee.ts 中定义的方法，并在data() 方法中定义分页相关的模型数据</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817363.png" alt="image-20231016094930398"></p><p>注意：需要将name属性和上面的员工姓名输入框进行双向绑定，如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817364.png" alt="image-20231016095018274"></p><p>第五步：在pageQuery 方法中调用 getEmployeeList 方法</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817365.png" alt="image-20231016095152184"></p><h4 id="2-2-3-自动发送Ajax请求"><a href="#2-2-3-自动发送Ajax请求" class="headerlink" title="2.2.3 自动发送Ajax请求"></a>2.2.3 自动发送Ajax请求</h4><p>前面的代码我们已经实现了前后端数据交互，但是有一个问题，就是只有在点击查询按钮时才会发生Ajax请求，实现分页数据查询。我们通常需要的是在当前页面（组件）加载后，就需要发送Ajax请求，查询第一页的数据。要实现这个效果，我们可以通过vue的生命周期方法，即created方法来做到，代码如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817366.png" alt="image-20231016095540340"></p><h4 id="2-2-4-使用表格展示分页数据"><a href="#2-2-4-使用表格展示分页数据" class="headerlink" title="2.2.4 使用表格展示分页数据"></a>2.2.4 使用表格展示分页数据</h4><p>前面我们已经实现了前后端数据交互，现在就需要将后端返回的数据通过表格展示出来，我们可以使用ElementUI提供的表格组件，具体使用方法可以参照官方提供的示例 <a href="https://element.eleme.io/#/zh-CN/component/table">https://element.eleme.io/#/zh-CN/component/table</a></p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817367.png" alt="image-20231016100031134"></p><h4 id="2-2-5-使用分页条实现翻页效果"><a href="#2-2-5-使用分页条实现翻页效果" class="headerlink" title="2.2.5 使用分页条实现翻页效果"></a>2.2.5 使用分页条实现翻页效果</h4><p>使用 ElementUI 提供的分页条组件，并绑定事件处理函数，具体使用方法可以参照官方提供的示例 <a href="https://element.eleme.io/#/zh-CN/component/pagination">https://element.eleme.io/#/zh-CN/component/pagination</a></p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817368.png" alt="image-20231016100300675"></p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817369.png" alt="image-20231016100327628"></p><h3 id="2-3-功能测试"><a href="#2-3-功能测试" class="headerlink" title="2.3 功能测试"></a>2.3 功能测试</h3><p>可以通过下面两种方式来测试：</p><ul><li>直接进行前后端联调，查看页面效果</li><li>通过浏览器F12查看数据交互过程</li></ul><h2 id="3-启用禁用员工账号"><a href="#3-启用禁用员工账号" class="headerlink" title="3. 启用禁用员工账号"></a>3. 启用禁用员工账号</h2><h3 id="3-1-需求分析和接口设计"><a href="#3-1-需求分析和接口设计" class="headerlink" title="3.1 需求分析和接口设计"></a>3.1 需求分析和接口设计</h3><p>根据产品原型来进行需求分析：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817370.png" alt="image-20231016103554407"></p><p>可以对状态为“启用” 的员工账号进行“禁用”操作</p><p>可以对状态为“禁用”的员工账号进行“启用”操作</p><p>状态为“禁用”的员工账号不能登录系统</p><p>接口设计如下：</p><p> <strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;employee&#x2F;status&#x2F;{status}</p><p><strong>Method：</strong> POST</p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>application&#x2F;json</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>路径参数</strong></p><table><thead><tr><th>参数名称</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>status</td><td>1</td><td>状态，1为启用 0为禁用</td></tr></tbody></table><p><strong>Query</strong></p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>是</td><td></td><td>员工id</td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="3-2-代码开发"><a href="#3-2-代码开发" class="headerlink" title="3.2 代码开发"></a>3.2 代码开发</h3><p>第一步：为启用、禁用按钮绑定单击事件</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817371.png" alt="image-20231016154949134"></p><p>第二步：编写对应的处理函数handleStartOrStop</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817372.png" alt="image-20231016155041179"></p><p>到此可以先测试一下，检查当前方法能否成功执行，页面效果如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817373.png" alt="image-20231016155124396"></p><p>第三步：在 employee.ts 中封装启用禁用员工账号方法，发送Ajax请求</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817374.png" alt="image-20231016155246041"></p><p>注意：发送请求的方式和相关参数，必须和前面的接口设计保持一致</p><p>第四步：在员工管理组件中引入上面定义的enableOrDisableEmployee方法，并完善 handleStartOrStop 方法</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817375.png" alt="image-20231016155426898"></p><p>第五步：代码优化，如果是管理员账号则不允许更改账号状态</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817376.png" alt="image-20231016155558430"></p><h3 id="3-3-功能测试"><a href="#3-3-功能测试" class="headerlink" title="3.3 功能测试"></a>3.3 功能测试</h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817377.png" alt="image-20231016152210849"></p><h2 id="4-新增员工"><a href="#4-新增员工" class="headerlink" title="4. 新增员工"></a>4. 新增员工</h2><h3 id="4-1-需求分析和接口设计"><a href="#4-1-需求分析和接口设计" class="headerlink" title="4.1 需求分析和接口设计"></a>4.1 需求分析和接口设计</h3><p>根据产品原型来进行需求分析，产品原型如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817378.png" alt="image-20231017105355195"></p><p>新增员工时需要录入 账号、员工姓名、手机号、性别、身份证号等信息。其中账号因为是登录凭证，所以必须是唯一的。手机号要求必须是合法的11位手机号码，身份证号为合法的18位身份证号码。</p><p>当新员工入职后，可以通过当前的新增员工功能来为新员工开通账号，新员工通过开通的账号来登录商家管理端系统。</p><p>接口设计如下：</p><p> <strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;employee</p><p><strong>Method：</strong> POST</p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>application&#x2F;json</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>Body</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>id</td><td>integer</td><td>非必须</td><td></td><td>员工id</td><td>format: int64</td></tr><tr><td>idNumber</td><td>string</td><td>必须</td><td></td><td>身份证</td><td></td></tr><tr><td>name</td><td>string</td><td>必须</td><td></td><td>姓名</td><td></td></tr><tr><td>phone</td><td>string</td><td>必须</td><td></td><td>手机号</td><td></td></tr><tr><td>sex</td><td>string</td><td>必须</td><td></td><td>性别</td><td></td></tr><tr><td>username</td><td>string</td><td>必须</td><td></td><td>用户名</td><td></td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="4-2-代码开发"><a href="#4-2-代码开发" class="headerlink" title="4.2 代码开发"></a>4.2 代码开发</h3><p>要开发新增员工前端代码，首先需要了解添加员工业务功能的操作步骤：</p><ol><li>在员工管理列表页面，点击 “添加员工”按钮，跳转到新增页面</li><li>在新增员工页面录入员工相关信息</li><li>点击“保存”按钮完成新增操作</li></ol><p>接下来我们就可以按照上面的操作步骤来具体开发前端的代码。</p><p>第一步：为“添加员工”按钮绑定单击事件</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817379.png" alt="image-20231017162453327"></p><p>第二步：编写 handleAddEmp 方法，进行路由跳转</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817380.png" alt="image-20231017162515941"></p><p>注意：在路由文件中已经配置了如下路由规则</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817381.png" alt="image-20231017162553386"></p><p>第三步：根据产品原型，开发页面元素</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817382.png" alt="image-20231017162651760"></p><p>第四步：定义模型数据和表单校验规则</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817383.png" alt="image-20231017162927506"></p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817384.png" alt="image-20231017162808963"></p><p>第五步：在 employee.ts 中封装新增员工方法，发送Ajax请求，实现前后端交互</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817385.png" alt="image-20231017163005227"></p><p>注意：</p><ul><li>发送请求的方式和相关参数，必须和前面的接口设计保持一致</li><li>使用此方法时，别忘了在组件中通过import导入</li></ul><p>第六步：在 methods 中定义提交表单的方法 submitForm</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817386.png" alt="image-20231017163116948"></p><h3 id="4-3-功能测试"><a href="#4-3-功能测试" class="headerlink" title="4.3 功能测试"></a>4.3 功能测试</h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p><h2 id="5-修改员工"><a href="#5-修改员工" class="headerlink" title="5. 修改员工"></a>5. 修改员工</h2><h3 id="5-1-需求分析和接口设计"><a href="#5-1-需求分析和接口设计" class="headerlink" title="5.1 需求分析和接口设计"></a>5.1 需求分析和接口设计</h3><p>根据产品原型来进行需求分析，产品原型如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817378.png" alt="image-20231017105355195"></p><p>修改员工时需要回显 账号、员工姓名、手机号、性别、身份证号等信息。其中账号因为是登录凭证，所以必须是唯一的。手机号要求必须是合法的11位手机号码，身份证号为合法的18位身份证号码。根据需要对数据进行修改即可。</p><p>修改员工功能涉及到2个接口，分别是根据id查询员工信息和根据id修改员工信息。具体接口设计如下：</p><p>（1）根据id查询员工 接口</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;employee&#x2F;{id}</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>路径参数</strong></p><table><thead><tr><th>参数名称</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>100</td><td>员工id</td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ createTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ createUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ id</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ idNumber</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ name</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ password</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ phone</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ sex</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ status</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ updateTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ updateUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ username</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><p>（2）根据id修改员工信息 接口</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> &#x2F;admin&#x2F;employee</p><p><strong>Method：</strong> PUT</p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>application&#x2F;json</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>Body</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>id</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>idNumber</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>name</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>phone</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>sex</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>username</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr></tbody></table><p><strong>返回数据</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="5-2-代码开发"><a href="#5-2-代码开发" class="headerlink" title="5.2 代码开发"></a>5.2 代码开发</h3><p>要开发修改员工前端代码，首先需要了解修改员工业务功能的操作步骤：</p><ol><li>在员工管理列表页面点击 “修改”按钮，跳转到修改页面</li><li>在修改员工页面录入员工相关信息</li><li>点击“保存”按钮完成修改操作</li></ol><p>注意：</p><ul><li>由于添加员工和修改员工的表单项非常类似，所以添加和修改操作可以共用同一个页面（addEmployee.vue）</li><li>修改员工涉及到原始数据回显，所以页面跳转时需要传递员工id作为参数</li></ul><p>接下来我们就可以按照上面的操作步骤来具体开发前端的代码。</p><p>第一步：在员工管理页面中，为“修改”按钮绑定单击事件，用于跳转到修改页面</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817387.png" alt="image-20231018153123546"></p><p>第二步：在methods中编写 handleUpdateEmp 方法，实现路由跳转</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817388.png" alt="image-20231018153201351"></p><p>注意：使用路由对象的push方法在进行路由跳转时，可以通过地址栏传递参数，具体语法为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>: 路由路径, <span class="attr">query</span>:&#123;参数名:参数值&#125;&#125;)</span><br></pre></td></tr></table></figure><p>第三步：在 addEmployee.vue 组件中定义模型数据optType，用于区分本次操作是新增还是修改</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817389.png" alt="image-20231018153639687"></p><p>注意：区分当前操作是新增员工还是修改员工，只需要尝试获取路由参数id。如果能获取到则当前操作为修改，否则为新增。具体获取路由参数的语法为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">query</span>.参数名</span><br></pre></td></tr></table></figure><p>第四步：如果是修改操作，需要根据id查询员工原始信息用于页面回显，需要在 employee.ts 中创建queryEmployeeById方法</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817390.png" alt="image-20231018154041788"></p><p>注意：</p><ul><li>发送请求的方式和相关参数，必须和前面的接口设计保持一致</li><li>使用此方法时，别忘了在组件中通过import导入</li></ul><p>第五步：在 addEmployee.vue 组件的 created 方法中查询员工原始信息用于页面数据回显 </p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817391.png" alt="image-20231018154225861"></p><p>到目前位置已经实现了员工信息的回显，可以进行简单的测试，如果回显没有问题再继续开发后面的代码</p><p>第六步：如果是修改操作，“保存并继续添加员工” 按钮则不需要显示，通过 v-if 指令进行判断</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817392.png" alt="image-20231018154415419"></p><p>第七步：在 employee.ts 中创建方法，用于修改员工，发送Ajax请求</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817393.png" alt="image-20231018154443989"></p><p>注意：</p><ul><li>发送请求的方式和相关参数，必须和前面的接口设计保持一致</li><li>使用此方法时，别忘了在组件中通过import导入</li></ul><p>第八步：修改 addEmployee.vue 组件中的 submitForm 方法，需要根据当前操作类型执行新增或者修改操作</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101817394.png" alt="image-20231018154601719"></p><h3 id="5-3-功能测试"><a href="#5-3-功能测试" class="headerlink" title="5.3 功能测试"></a>5.3 功能测试</h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端环境搭建、员工管理&quot;&gt;&lt;a href=&quot;#前端环境搭建、员工管理&quot; class=&quot;headerlink&quot; title=&quot;前端环境搭建、员工管理&quot;&gt;&lt;/a&gt;前端环境搭建、员工管理&lt;/h1&gt;&lt;h2 id=&quot;课程内容&quot;&gt;&lt;a href=&quot;#课程内容&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>苍穹外卖——vue进阶</title>
    <link href="http://example.com/2024/06/10/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E2%80%94%E2%80%94vue%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2024/06/10/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E2%80%94%E2%80%94vue%E8%BF%9B%E9%98%B6/</id>
    <published>2024-06-10T10:14:18.000Z</published>
    <updated>2024-06-10T10:21:50.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue基础回顾-进阶"><a href="#vue基础回顾-进阶" class="headerlink" title="vue基础回顾+进阶"></a>vue基础回顾+进阶</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul><li>VUE 基础回顾</li><li>路由 Vue-Router</li><li>状态管理 vuex</li><li>TypeScript</li></ul><h2 id="1-VUE-基础回顾"><a href="#1-VUE-基础回顾" class="headerlink" title="1. VUE 基础回顾"></a>1. VUE 基础回顾</h2><h3 id="1-1-基于脚手架创建前端工程"><a href="#1-1-基于脚手架创建前端工程" class="headerlink" title="1.1 基于脚手架创建前端工程"></a>1.1 基于脚手架创建前端工程</h3><h4 id="1-1-1-环境要求"><a href="#1-1-1-环境要求" class="headerlink" title="1.1.1 环境要求"></a>1.1.1 环境要求</h4><p>要想基于脚手架创建前端工程，需要具备如下环境要求：</p><ul><li>​<strong>node.js</strong> 前端项目的运行环境</li><li>​<strong>npm</strong>          JavaScript的包管理工具</li><li>​<strong>Vue CLI</strong>    基于Vue进行快速开发的完整系统，实现交互式的项目脚手架</li></ul><p>安装完node.js后，可以通过命令行来查看版本号，如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812690.png" alt="image-20230925094426687"></p><p>安装 Vue CLI，命令如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812692.png" alt="image-20230925094630147"></p><h4 id="1-1-2-操作过程"><a href="#1-1-2-操作过程" class="headerlink" title="1.1.2 操作过程"></a>1.1.2 操作过程</h4><p>使用 Vue CLI 创建前端工程的方式：</p><ul><li>​方式一：vue create 项目名称</li><li>​方式二：vue ui</li></ul><p>重点介绍使用 vue ui 命令创建前端工程的过程：</p><p>第一步：在命令行输入命令 vue ui,在浏览器ui界面中选择前端工程存放的位置</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812693.png" alt="image-20230925100950987"></p><p>第二步：点击“在此创建新项目”按钮，跳转到创建新项目设置页面</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812694.png" alt="image-20230925101106692"></p><p>第三步：填写项目名称、选择包管理器为npm，点击“下一步”按钮</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812695.png" alt="image-20230925101202363"></p><p>第四步：选择 Default(Vue 2)，点击”创建项目”按钮，完成项目的创建</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812696.png" alt="image-20230925101317873"></p><h4 id="1-1-3-工程结构"><a href="#1-1-3-工程结构" class="headerlink" title="1.1.3 工程结构"></a>1.1.3 工程结构</h4><p>工程目录结构：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812697.png" alt="image-20230925103418213"></p><p>重点文件或目录介绍：</p><ul><li>node_modules：当前项目依赖的js包</li><li>assets：静态资源存放目录</li><li>components：公共组件存放目录</li><li>App.vue：项目的主组件，页面的入口文件</li><li>main.js：整个项目的入口文件</li><li>package.json：项目的配置信息、依赖包管理</li><li>vue.config.js：vue-cli配置文件</li></ul><h4 id="1-1-4-启动前端服务"><a href="#1-1-4-启动前端服务" class="headerlink" title="1.1.4 启动前端服务"></a>1.1.4 启动前端服务</h4><p>使用VS Code打开创建的前端工程，启动前端工程：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812698.png" alt="image-20230925103813210"></p><p>访问前端工程：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812699.png" alt="image-20230925103913672"></p><p>注：要停止前端服务，可以在命令行终端使用 ctrl + C </p><p>前端项目启动后，服务端口默认为8080，很容易和后端tomcat端口号冲突。如何修改前端服务的端口号？</p><p>可以在vue.config.js中配置前端服务端口号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">7070</span>  <span class="comment">//指定前端服务端口号</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-2-vue基本使用方式"><a href="#1-2-vue基本使用方式" class="headerlink" title="1.2 vue基本使用方式"></a>1.2 vue基本使用方式</h3><p>本章节从如下几个方面进行vue回顾：</p><ul><li>vue 组件</li><li>文本插值</li><li>属性绑定</li><li>事件绑定</li><li>双向绑定</li><li>条件渲染</li><li>axios</li></ul><h4 id="1-2-1-vue-组件"><a href="#1-2-1-vue-组件" class="headerlink" title="1.2.1 vue 组件"></a>1.2.1 vue 组件</h4><p>Vue 的组件文件以 .vue 结尾，每个组件由三部分组成：</p><ul><li>结构 template</li><li>样式 style</li><li>逻辑 script</li></ul><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812700.png" alt="image-20230925111404674"></p><h4 id="1-2-2-文本插值"><a href="#1-2-2-文本插值" class="headerlink" title="1.2.2 文本插值"></a>1.2.2 文本插值</h4><p>作用：用来绑定 data 方法返回的对象属性</p><p>用法：</p><p>示例：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812701.png" alt="image-20230925111739838"></p><h4 id="1-2-3-属性绑定"><a href="#1-2-3-属性绑定" class="headerlink" title="1.2.3 属性绑定"></a>1.2.3 属性绑定</h4><p>作用：为标签的属性绑定 data 方法中返回的属性</p><p>用法：v-bind:xxx，简写为 :xxx</p><p>示例：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812702.png" alt="image-20230925112435816"></p><h4 id="1-2-4-事件绑定"><a href="#1-2-4-事件绑定" class="headerlink" title="1.2.4 事件绑定"></a>1.2.4 事件绑定</h4><p>作用：为元素绑定对应的事件</p><p>用法：v-on:xxx，简写为 @xxx</p><p>示例：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812703.png" alt="image-20230925112514956"></p><h4 id="1-2-5-双向绑定"><a href="#1-2-5-双向绑定" class="headerlink" title="1.2.5 双向绑定"></a>1.2.5 双向绑定</h4><p>作用：表单输入项和 data 方法中的属性进行绑定，任意一方改变都会同步给另一方</p><p>用法：v-model</p><p>示例：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812704.png" alt="image-20230925112600375"></p><h4 id="1-2-6-条件渲染"><a href="#1-2-6-条件渲染" class="headerlink" title="1.2.6 条件渲染"></a>1.2.6 条件渲染</h4><p>作用：根据表达式的值来动态渲染页面元素</p><p>用法：v-if、v-else、v-else-if</p><p>示例：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812705.png" alt="image-20230925112635467"></p><h4 id="1-2-7-axios"><a href="#1-2-7-axios" class="headerlink" title="1.2.7 axios"></a>1.2.7 axios</h4><p><a href="https://www.axios-http.cn/">Axios</a> 是一个基于 promise 的 网络请求库，作用于浏览器和 node.js 中。使用Axios可以在前端项目中发送各种方式的HTTP请求。</p><p>安装命令：npm install axios</p><p>导入：import axios from ‘axios’</p><p>axios 的 API 列表：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812706.png" alt="image-20230925112806943"></p><p>参数说明：</p><ul><li>url：请求路径</li><li>data：请求体数据，最常见的是JSON格式数据</li><li>config：配置对象，可以设置查询参数、请求头信息</li></ul><p>注：在使用axios时，经常会遇到跨域问题。为了解决跨域问题，可以在 vue.config.js 文件中配置代理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">7070</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>axios的post请求示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/admin/employee/login&#x27;</span>,&#123;</span><br><span class="line">      <span class="attr">username</span>:<span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>axios的get请求示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/admin/shop/status&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">          <span class="attr">token</span>: ‘xxx.<span class="property">yyy</span>.<span class="property">zzz</span>’</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>axios提供的统一使用方式示例一（可以发送各种方式的请求）：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812707.png" alt="image-20230925113501390"></p><p>axios提供的统一使用方式示例二（可以发送各种方式的请求）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/api/admin/employee/login&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">token</span>)</span><br><span class="line">      <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/api/admin/shop/status&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;<span class="attr">id</span>: <span class="number">100</span>&#125;,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">          <span class="attr">token</span>: res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">token</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="2-路由-Vue-Router"><a href="#2-路由-Vue-Router" class="headerlink" title="2. 路由 Vue-Router"></a>2. 路由 Vue-Router</h2><h3 id="2-1-Vue-Router-介绍"><a href="#2-1-Vue-Router-介绍" class="headerlink" title="2.1 Vue-Router 介绍"></a>2.1 Vue-Router 介绍</h3><p>vue 属于单页面应用，所谓路由，就是根据浏览器路径不同，用不同的视图组件替换这个页面内容。</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812708.png" alt="image-20230925142650279"></p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812709.png" alt="image-20230925142705351"></p><p>如上图所示：不同的访问路径，对应不同的页面展示。</p><p>在vue应用中使用路由功能，需要安装Vue-Router：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812710.png" alt="image-20230925142957238"></p><p>注：创建完带有路由功能的前端项目后，在工程中会生成一个路由文件，如下所示：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812711.png" alt="image-20230925144015768"></p><p>关于路由的配置，主要就是在这个路由文件中完成的。</p><p>为了能够使用路由功能，在前端项目的入口文件main.js中，创建Vue实例时需要指定路由对象：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812712.png" alt="image-20230925144400285"></p><h3 id="2-2-路由配置"><a href="#2-2-路由配置" class="headerlink" title="2.2 路由配置"></a>2.2 路由配置</h3><p>首先了解一下路由组成：</p><ul><li>VueRouter：路由器，根据路由请求在路由视图中动态渲染对应的视图组件</li><li><router-link>：路由链接组件，浏览器会解析成<a></li><li><router-view>：路由视图组件，用来展示与路由路径匹配的视图组件</li></ul><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812713.png" alt="image-20230925143537869"></p><p>具体配置方式：</p><ol><li>在路由文件中配置路由路径和视图的对应关系：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//维护路由表，某个路由路径对应哪个视图组件</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/404View.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ol start="2"><li>在视图组件中配置 router-link标签，用于生成超链接</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/test&quot;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br></pre></td></tr></table></figure><ol start="3"><li>在视图组件汇总配置router-view标签</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图组件展示的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>要实现路由跳转，可以通过标签式和编程式两种：</p><ul><li>标签式：<router-link to="/about">About</router-link></li><li>编程式：this.$router.push(‘&#x2F;about’)</li></ul><p><strong>问题思考：</strong>如果用户访问的路由地址不存在，该如何处理？</p><p>可以通过配置一个404视图组件，当访问的路由地址不存在时，则重定向到此视图组件，具体配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/404View.vue&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span> <span class="comment">//重定向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-嵌套路由"><a href="#2-3-嵌套路由" class="headerlink" title="2.3 嵌套路由"></a>2.3 嵌套路由</h3><p>嵌套路由：组件内要切换内容，就需要用到嵌套路由（子路由），效果如下：</p><p>在App.vue视图组件中有<router-view>标签，其他视图组件可以展示在此</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812714.png" alt="image-20230925153930006"></p><p>ContainerView.vue组件可以展示在App.vue视图组件的<router-view>位置</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812715.png" alt="image-20230925153854881"></p><p>ContainerView.vue组件进行了区域划分（分为上、左、右），在右边编写了<router-view>标签，点击左侧菜单时，可以将对应的子视图组件展示在此</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812716.png" alt="image-20230925154346635"></p><p>实现步骤：</p><p>第一步：安装并导入 <a href="https://element.eleme.io/">elementui</a>，实现页面布局（Container 布局容器）—ContainerView.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-header</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.el-header</span>, <span class="selector-class">.el-footer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#B3C0D1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#D3DCE6</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.el-main</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#E9EEF3</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &gt; <span class="selector-class">.el-container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.el-container</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) <span class="selector-class">.el-aside</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.el-container</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">260px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.el-container</span><span class="selector-pseudo">:nth-child</span>(<span class="number">7</span>) <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：提供子视图组件，用于效果展示  —P1View.vue、P2View.vue、P3View.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    这是P1 View</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.el-header</span>, <span class="selector-class">.el-footer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#B3C0D1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#D3DCE6</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.el-main</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#E9EEF3</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &gt; <span class="selector-class">.el-container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.el-container</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) <span class="selector-class">.el-aside</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.el-container</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">260px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.el-container</span><span class="selector-pseudo">:nth-child</span>(<span class="number">7</span>) <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三步：在 src&#x2F;router&#x2F;index.js 中配置路由映射规则（嵌套路由配置）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/c&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/container/ContainerView.vue&#x27;</span>),</span><br><span class="line">  <span class="comment">//嵌套路由（子路由），对应的组件会展示在当前组件内部</span></span><br><span class="line">  <span class="attr">children</span>: [<span class="comment">//通过children属性指定子路由相关信息（path、component）</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/c/p1&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/container/P1View.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/c/p2&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/container/P2View.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/c/p3&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/container/P3View.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步：在ContainerView.vue 布局容器视图中添加<router-view>，实现子视图组件展示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第五步：在ContainerView.vue 布局容器视图中添加<router-link>，实现路由请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/c/p1&quot;</span>&gt;</span>P1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/c/p2&quot;</span>&gt;</span>P2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/c/p3&quot;</span>&gt;</span>P3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：子路由变化，切换的是【ContainerView 组件】中 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 部分的内容</p><p>问题思考：</p><p>1.对于前面的案例，如果用户访问的路由是 &#x2F;c，会有什么效果呢？</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812717.png" alt="image-20230925160657497"></p><p>2.如何实现在访问 &#x2F;c 时，默认就展示某个子视图组件呢？</p><p>配置重定向，当访问&#x2F;c时，直接重定向到&#x2F;c&#x2F;p1即可，如下配置：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812718.png" alt="image-20230925160730746"></p><h2 id="3-状态管理-vuex"><a href="#3-状态管理-vuex" class="headerlink" title="3. 状态管理 vuex"></a>3. 状态管理 vuex</h2><h3 id="3-1-vuex-介绍"><a href="#3-1-vuex-介绍" class="headerlink" title="3.1 vuex 介绍"></a>3.1 vuex 介绍</h3><ul><li>vuex 是一个专为 Vue.js 应用程序开发的状态管理库</li><li>vuex 可以在多个组件之间共享数据，并且共享的数据是响应式的，即数据的变更能及时渲染到模板</li><li>vuex 采用集中式存储管理所有组件的状态</li></ul><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的**状态 (state)**。Vuex 和单纯的全局对象有以下两点不同：</p><ol><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li></ol><p>安装vuex：npm install vuex@next –save</p><p>vuex中的几个核心概念：</p><ul><li>state：状态对象，集中定义各个组件共享的数据</li><li>mutations：类似于一个事件，用于修改共享数据，要求必须是同步函数</li><li>actions：类似于mutation，可以包含异步操作，通过调用mutation来改变共享数据</li></ul><h3 id="3-2-使用方式"><a href="#3-2-使用方式" class="headerlink" title="3.2 使用方式"></a>3.2 使用方式</h3><p>本章节通过一个案例来学习vuex的使用方式，具体操作步骤如下：</p><p>第一步：创建带有vuex功能的前端项目</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812719.png" alt="image-20230926094537147"></p><p>注：在创建的前端工程中，可以发现自动创建了vuex相关的文件(src&#x2F;store&#x2F;index.js)，并且在main.js中创建Vue实例时，需要将store对象传入，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  store,<span class="comment">//使用vuex功能</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第二步：在src&#x2F;store&#x2F;index.js文件中集中定义和管理共享数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//集中管理多个组件共享的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="comment">//集中定义共享数据</span></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;未登录游客&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//通过当前属性中定义的函数修改共享数据，必须都是同步操作</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//通过actions调用mutation，在actions中可以进行异步操作</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第三步：在视图组件中展示共享数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎你，&#123;&#123;$store.state.name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：$store.state为固定写法，用于访问共享数据</p><p>第四步：在mutations中定义函数，用于修改共享数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过当前属性中定义的函数修改共享数据，必须都是同步操作</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">setName</span>(<span class="params">state,newName</span>) &#123;</span><br><span class="line">    state.<span class="property">name</span> = newName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>第五步：在视图组件中调用 mutations 中定义的函数</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812720.png" alt="image-20230926102311897"></p><p>注：mutations中定义的函数不能直接调用，必须通过状态对象的 commit 方法来调用</p><p>第六步：如果在修改共享数据的过程中有异步操作，则需要将异步操作的代码编写在actions的函数中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过actions调用mutation，在actions中可以进行异步操作</span></span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="title function_">setNameByAxios</span>(<span class="params">context</span>)&#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123; <span class="comment">//异步请求</span></span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/api/admin/employee/login&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//异步请求后，需要修改共享数据</span></span><br><span class="line">        <span class="comment">//在actions中调用mutation中定义的setName函数</span></span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;setName&#x27;</span>,res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>注：在actions中定义的函数可以声明context参数，通过此参数可以调用mutations中定义的函数</p><p>第七步：在视图组件中调用actions中定义的函数</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812721.png" alt="image-20230926103114922"></p><p>注：在actions中定义的函数不能直接调用，必须通过 <strong>this.$store.dispatch(‘函数名称’)</strong> 这种方式调用</p><h2 id="4-TypeScript"><a href="#4-TypeScript" class="headerlink" title="4. TypeScript"></a>4. TypeScript</h2><h3 id="4-1-TypeScript-介绍"><a href="#4-1-TypeScript-介绍" class="headerlink" title="4.1 TypeScript 介绍"></a>4.1 TypeScript 介绍</h3><ul><li>TypeScript（简称：TS） 是微软推出的开源语言</li><li>TypeScript 是 JavaScript 的超集（JS 有的 TS 都有）</li></ul><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812722.png" alt="image-20230926112525531"></p><ul><li>TypeScript &#x3D; Type + JavaScript（在 JS 基础上增加了类型支持）</li><li>TypeScript 文件扩展名为 ts</li><li>TypeScript 可编译成标准的 JavaScript，并且在编译时进行类型检查</li></ul><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812723.png" alt="image-20230926112649750"></p><p>在前端项目中使用TS，需要进行安装，命令为：npm install -g typescript</p><p>查看TS版本：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812724.png" alt="image-20230926112830756"></p><p>TS初体验：</p><ol><li>创建 hello.ts 文件，内容如下：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数 hello，并且指定参数类型为string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">msg:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用上面的函数，传递非string类型的参数</span></span><br><span class="line"><span class="title function_">hello</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 tsc 命令编译 hello.ts 文件</li></ol><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812725.png" alt="image-20230926142314810"></p><p>可以看到编译报错，提示参数类型不匹配。这说明在编译时TS会进行类型检查。需要注意的是在编译为JS文件后，类型会被擦除。</p><p>思考：TS 为什么要增加类型支持 ？</p><ul><li>TS 属于静态类型编程语言，JS 属于动态类型编程语言</li><li>静态类型在编译期做类型检查，动态类型在执行期做类型检查</li><li>对于 JS 来说，需要等到代码执行的时候才能发现错误（晚）</li><li>对于 TS 来说，在代码编译的时候就可以发现错误（早）</li><li>配合 VSCode 开发工具，TS 可以提前到在编写代码的同时就发现代码中的错误，减少找 Bug、改 Bug 的时间</li></ul><p>在前端项目中使用TS，需要创建基于TS的前端工程：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812726.png" alt="image-20230926145235469"></p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812727.png" alt="image-20230926145349976"></p><h3 id="4-2-TypeScript-常用类型"><a href="#4-2-TypeScript-常用类型" class="headerlink" title="4.2 TypeScript 常用类型"></a>4.2 TypeScript 常用类型</h3><p>TS中的常用类型如下：</p><table><thead><tr><th><strong>类型</strong></th><th><strong>例</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>字符串类型</td><td>string</td><td></td></tr><tr><td>数字类型</td><td>number</td><td></td></tr><tr><td>布尔类型</td><td>boolean</td><td></td></tr><tr><td>数组类型</td><td>number[],string[],  boolean[] 依此类推</td><td></td></tr><tr><td>任意类型</td><td>any</td><td>相当于又回到了没有类型的时代</td></tr><tr><td>复杂类型</td><td>type 与 interface</td><td></td></tr><tr><td>函数类型</td><td>() &#x3D;&gt;  void</td><td>对函数的参数和返回值进行说明</td></tr><tr><td>字面量类型</td><td>“a”|”b”|”c”</td><td>限制变量或参数的取值</td></tr><tr><td>class 类</td><td>class Animal</td><td></td></tr></tbody></table><h4 id="4-2-1-类型标注的位置"><a href="#4-2-1-类型标注的位置" class="headerlink" title="4.2.1 类型标注的位置"></a>4.2.1 类型标注的位置</h4><p>基于TS进行前端开发时，类型标注的位置有如下3个：</p><ul><li>标注变量</li><li>标注参数</li><li>标注返回值</li></ul><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812728.png" alt="image-20230926145517782"></p><h4 id="4-2-2-字符串、数字、布尔类型"><a href="#4-2-2-字符串、数字、布尔类型" class="headerlink" title="4.2.2 字符串、数字、布尔类型"></a>4.2.2 字符串、数字、布尔类型</h4><p>字符串、数字、布尔类型是前端开发中常用的类型</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812729.png" alt="image-20230926145634149"></p><h4 id="4-2-3-字面量类型"><a href="#4-2-3-字面量类型" class="headerlink" title="4.2.3 字面量类型"></a>4.2.3 字面量类型</h4><p>字面量类型用于限定数据的取值范围，类似于java中的枚举</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812730.png" alt="image-20230926145813932"></p><h4 id="4-2-4-interface-类型"><a href="#4-2-4-interface-类型" class="headerlink" title="4.2.4 interface 类型"></a>4.2.4 interface 类型</h4><p>interface 类型是TS中的复杂类型，它让 TypeScript 具备了 JavaScript 所缺少的、描述较为复杂数据结构的能力。</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812731.png" alt="image-20230926150816090"></p><p>可以通过在属性名后面加上？，表示当前属性为可选，如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812732.png" alt="image-20230926150946103"></p><h4 id="4-2-5-class-类型"><a href="#4-2-5-class-类型" class="headerlink" title="4.2.5 class 类型"></a>4.2.5 class 类型</h4><p>使用 class 关键字来定义类，类中可以包含属性、构造方法、普通方法等</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812733.png" alt="image-20230926151839881"></p><p>在定义类时，可以使用 implments 关键字实现接口，如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812734.png" alt="image-20230926152034526"></p><p>在定义类时，可以使用 extends 关键字 继承其他类，如下：</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202406101812735.png" alt="image-20230926152222634"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue基础回顾-进阶&quot;&gt;&lt;a href=&quot;#vue基础回顾-进阶&quot; class=&quot;headerlink&quot; title=&quot;vue基础回顾+进阶&quot;&gt;&lt;/a&gt;vue基础回顾+进阶&lt;/h1&gt;&lt;h2 id=&quot;课程内容&quot;&gt;&lt;a href=&quot;#课程内容&quot; class=&quot;head</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="http://example.com/2024/03/07/%E5%9B%BE/"/>
    <id>http://example.com/2024/03/07/%E5%9B%BE/</id>
    <published>2024-03-07T01:31:49.000Z</published>
    <updated>2024-03-07T01:32:06.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><hr><p>数据结构当中 比较难的一个知识点了 抽象</p><h4 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h4><p>图是由顶点集合及顶点见的关系组成的一种数据结构，G&#x3D;(V,E) 其中</p><p>顶点结合是有穷非空集合</p><p>边是顶点间关系的有穷集合，也叫做边的集合</p><p>(x,y) 双向通路 &lt;x,y&gt; 单向通路</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930327.png"></p><p>完全图：在有n个顶点的无向图中，若有n * (n-1)&#x2F;2条边，<strong>即任意两个顶点之间有且仅有一条边</strong>，则称此图为<br>无向完全图，比如上图G1；在n个顶点的有向图中，若有n * (n-1)条边，即任意两个顶点之间有且仅有方向<br>相反的边，则称此图为有向完全图，比如上图G4</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930329.png"></p><p>邻接顶点：在无向图中G中，若(u, v)是E(G)中的一条边，则称u和v互为邻接顶点，并称边(u,v)依附于顶点u<br>和v；在有向图G中，若&lt;u, v&gt;是E(G)中的一条边，则称顶点u邻接到v，顶点v邻接自顶点u，并称边&lt;u, v&gt;与<br>顶点u和顶点v相关联。</p><p>顶点的度：顶点v的度是指与它相关联的边的条数，记作deg(v)。在有向图中，顶点的度等于该顶点的入度与<br>出度之和，其中顶点v的入度是以v为终点的有向边的条数，记作indev(v);顶点v的出度是以v为起始点的有向<br>边的条数，记作outdev(v)。因此：dev(v) &#x3D; indev(v) + outdev(v)。注意：对于无向图，顶点的度等于该顶<br>点的入度和出度，即dev(v) &#x3D; indev(v) &#x3D; outdev(v)。</p><p>路径：在图G &#x3D; (V， E)中，若从顶点vi出发有一组边使其可到达顶点vj，则称顶点vi到顶点vj的顶点序列为从<br>顶点vi到顶点vj的路径。</p><p>路径长度：对于不带权的图，一条路径的路径长度是指该路径上的边的条数；对于带权的图，一条路径的路<br>径长度是指该路径上各个边权值的总和。</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930330.png" alt="截屏2024-03-01 13.28.57"></p><p>简单路径与回路：若路径上各顶点v1，v2，v3，…，vm均不重复，则称这样的路径为简单路径。若路 径上<br>第一个顶点v1和最后一个顶点vm重合，则称这样的路径为回路或环</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930331.png" alt="截屏2024-03-01 13.29.25"></p><p>子图：设图G &#x3D; {V, E}和图G1 &#x3D; {V1，E1}，若V1属于V且E1属于E，则称G1是G的子图。</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930332.png" alt="截屏2024-03-01 13.29.50"></p><p>连通图：在无向图中，若从顶点v1到顶点v2有路径，则称顶点v1与顶点v2是连通的。如果图中任意一 对顶点<br>都是连通的，则称此图为连通图。</p><p>强连通图：在有向图中，若在每一对顶点vi和vj之间都存在一条从vi到vj的路径，也存在一条从vj到 vi的路<br>径，则称此图是强连通图。</p><p>生成树：一个连通图的最小连通子图称作该图的生成树。有n个顶点的连通图的生成树有n个顶点和n-1条<br>边。</p><p>最小生成树 – 最常考法</p><p>树 可以认为是特殊的图 但是图 不一定是树 </p><p>连通图 不带环 就可以认为是一颗树</p><p>图到底该如何存储？</p><p>邻接矩阵【考试】</p><p>无向图 的 邻接矩阵 是沿着对角线对称的</p><p>0 代表不连通 1 代表连通</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930333.png" alt="截屏2024-03-01 13.40.16" style="zoom:50%;" /><p>有向图 就不一定是沿着对角线对称了</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930334.png" alt="截屏2024-03-01 13.41.15" style="zoom:50%;" /><p>最多见的 还是带有权值的图</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930335.png" alt=" " style="zoom:67%;" /><p>邻接表：</p><p>无向图：</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930336.png" alt="截屏2024-03-01 13.46.29" style="zoom:50%;" /><p>有向图：</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930338.png" alt="截屏2024-03-01 13.46.57" style="zoom:50%;" /><p>图的应用 ： 社交关系-》熟人社交-〉微信好友关系-》无向图  微博-〉好友关系是有向图 ，地图，A到B的距离就用权值衡量</p><p><strong>面试基本不问图</strong></p><hr><h3 id="基于邻接矩阵图的实现"><a href="#基于邻接矩阵图的实现" class="headerlink" title="基于邻接矩阵图的实现"></a>基于邻接矩阵图的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> HighOrderDS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;FieldMayBeFinal&quot;, &quot;FieldCanBeLocal&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GraphByMatrix</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] arrayV;<span class="comment">//顶点数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] matrix;<span class="comment">//邻接矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isDirect;<span class="comment">//是否是有向图</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 代表当前顶点的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isDirect 是否是有向图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GraphByMatrix</span><span class="params">(<span class="type">int</span> size,<span class="type">boolean</span> isDirect)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.arrayV = <span class="keyword">new</span> <span class="title class_">char</span>[size];</span><br><span class="line">        matrix = <span class="keyword">new</span> <span class="title class_">int</span>[size][size];</span><br><span class="line">        <span class="comment">//默认顶点都要改为无穷大</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            Arrays.fill(matrix[i],Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.isDirect = isDirect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initArrayV</span><span class="params">(<span class="type">char</span>[] array)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.arraycopy(array,<span class="number">0</span>,<span class="built_in">this</span>.arrayV,<span class="number">0</span>,array.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src 起点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 终点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weight 权重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">char</span> src,<span class="type">char</span> dest,<span class="type">int</span> weight)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">srcIndex</span> <span class="operator">=</span> indexOfVertex(src);</span><br><span class="line">        <span class="type">int</span> <span class="variable">destIndex</span> <span class="operator">=</span> indexOfVertex(dest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(srcIndex == -<span class="number">1</span> || destIndex == -<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里要分有向图和无向图的情况</span></span><br><span class="line">        matrix[srcIndex][destIndex] = weight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!isDirect)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果是无向图 那么相反的位置 也同样需要置为空</span></span><br><span class="line">            matrix[destIndex][srcIndex] = weight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当顶点很多的时候 时间复杂度会升高 效率降低</span></span><br><span class="line"><span class="comment">     * 所以后期可以使用hashMap替代数组 来使这一块的查找效率从O(N) 变为 O(1)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOfVertex</span><span class="params">(<span class="type">char</span> v)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayV.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(v == arrayV[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMatrix</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arrayV.length; j++) &#123;</span><br><span class="line">            System.out.print(arrayV[j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            System.out.print(arrayV[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == Integer.MAX_VALUE)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;∞ &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.print(matrix[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某一个顶点的度数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 度数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDegreeOf</span><span class="params">(<span class="type">char</span> v)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//这里也分为有向图和无向图两种情况</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">srcIndex</span> <span class="operator">=</span> indexOfVertex(v);</span><br><span class="line">        <span class="type">int</span> <span class="variable">degree</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix[srcIndex].length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[srcIndex][i]!=Integer.MAX_VALUE)</span><br><span class="line">            &#123;</span><br><span class="line">                degree++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是有向图</span></span><br><span class="line">        <span class="keyword">if</span>(isDirect)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix[srcIndex].length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][srcIndex]!=Integer.MAX_VALUE)</span><br><span class="line">                &#123;</span><br><span class="line">                    degree++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> degree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> []chars = &#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">GraphByMatrix</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphByMatrix</span>(chars.length, <span class="literal">false</span>);</span><br><span class="line">        graph.initArrayV(chars);</span><br><span class="line"></span><br><span class="line">        graph.addEdge(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        graph.printMatrix();</span><br><span class="line"></span><br><span class="line">        System.out.println(graph.getDegreeOf(<span class="string">&#x27;A&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要是就是要注意初始化设置为整数的最大值（表示正无穷）</p><p>然后就和之前学的遍历差不多</p><hr><h3 id="基于邻接表的图"><a href="#基于邻接表的图" class="headerlink" title="基于邻接表的图"></a>基于邻接表的图</h3><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> HighOrderDS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.WeekFields;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;ClassEscapesDefinedScope&quot;, &quot;FieldMayBeFinal&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GraphByNode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//起始位置</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> src;</span><br><span class="line">        <span class="comment">//目标位置</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> dest;</span><br><span class="line">        <span class="comment">//权重</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> weight;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> src,<span class="type">int</span> dest,<span class="type">int</span> weight)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.src = src;</span><br><span class="line">            <span class="built_in">this</span>.dest = dest;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] arrayV;<span class="comment">//顶点数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组+链表的结构</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Node&gt; edgList;<span class="comment">//存储边</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isDirect;<span class="comment">//是否是有向图</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 代表当前顶点的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isDirect 是否是有向图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GraphByNode</span><span class="params">(<span class="type">int</span> size,<span class="type">boolean</span> isDirect)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.arrayV = <span class="keyword">new</span> <span class="title class_">char</span>[size];</span><br><span class="line">        edgList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            edgList.add(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.isDirect = isDirect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化顶点数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initArrayV</span><span class="params">(<span class="type">char</span>[] array)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.arraycopy(array,<span class="number">0</span>,<span class="built_in">this</span>.arrayV,<span class="number">0</span>,array.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 边表 是 不带头节点的单链表 （这里采用尾插法插入）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src 起点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 终点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weight 权重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">char</span> src,<span class="type">char</span> dest,<span class="type">int</span> weight)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">srcIndex</span> <span class="operator">=</span> indexOfVertex(src);</span><br><span class="line">        <span class="type">int</span> <span class="variable">destIndex</span> <span class="operator">=</span> indexOfVertex(dest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(srcIndex == -<span class="number">1</span> || destIndex == -<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里要分有向图和无向图的情况</span></span><br><span class="line">        addEdgeChild(weight, srcIndex, destIndex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!isDirect)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果是无向图 那么相反的位置 也同样需要置为空</span></span><br><span class="line">            addEdgeChild(weight,destIndex,srcIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾插法添加边</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weight 权值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcIndex 起点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destIndex 终点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addEdgeChild</span><span class="params">(<span class="type">int</span> weight, <span class="type">int</span> srcIndex, <span class="type">int</span> destIndex)</span> &#123;</span><br><span class="line">        <span class="comment">//拿到的是首个节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> edgList.get(srcIndex);</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(srcIndex, destIndex, weight);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//不带头节点的链表</span></span><br><span class="line">            edgList.set(srcIndex,node);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.dest == destIndex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur.dest == destIndex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//之前没有存储过这条边</span></span><br><span class="line">        cur.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当顶点很多的时候 时间复杂度会升高 效率降低</span></span><br><span class="line"><span class="comment">     * 所以后期可以使用hashMap替代数组 来使这一块的查找效率从O(N) 变为 O(1)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOfVertex</span><span class="params">(<span class="type">char</span> v)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayV.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(v == arrayV[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEdgList</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//遍历所有边表</span></span><br><span class="line">        <span class="keyword">for</span> (Node cur : edgList) &#123;</span><br><span class="line">            System.out.print(arrayV[cur.src]);</span><br><span class="line">            <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;--&gt;&quot;</span>+arrayV[cur.dest]);</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某一个顶点的度数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 度数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDegreeOf</span><span class="params">(<span class="type">char</span> v)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//这里也分为有向图和无向图两种情况</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> indexOfVertex(v);</span><br><span class="line">        <span class="type">int</span> <span class="variable">degree</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        degree+=countChild(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是有向图</span></span><br><span class="line">        <span class="keyword">if</span>(isDirect)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//遍历所有边表</span></span><br><span class="line">            <span class="keyword">for</span> (Node cur : edgList) &#123;</span><br><span class="line">                <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cur.dest == index) &#123;</span><br><span class="line">                        degree++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cur = cur.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> degree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">countChild</span><span class="params">(<span class="type">int</span> srcIndex)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//拿到的是首个节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> edgList.get(srcIndex);</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> []chars = &#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">GraphByNode</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphByNode</span>(chars.length, <span class="literal">true</span>);</span><br><span class="line">        graph.initArrayV(chars);</span><br><span class="line"></span><br><span class="line">        graph.addEdge(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        graph.addEdge(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;度为：&quot;</span>+graph.getDegreeOf(<span class="string">&#x27;A&#x27;</span>));</span><br><span class="line">        graph.printEdgList();</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意的就是边表节点的样式 还有就是边表是不带头节点的链表 插入第一个元素时的处理</p><hr><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><ol><li>广度优先遍历 类似于层序遍历</li></ol><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930339.png" alt=" " style="zoom:67%;" /><p>与二叉树类似 也是要依靠队列来完成</p><p>现在的逻辑 出一个元素 打印一个元素 同时标记一个元素</p><p>这种逻辑会出现一个问题 当元素没有打印的时候 这个元素有被误认为需要入队的顶点</p><p>解决方法 我们把isVisited数组置true的时机提前 在加入队列时就设置为true 这样就能避免反复将同一个元素放入队列中的问题了</p><p>找到一个起点 先把这个起点放到队列中 </p><p>开始循环 把队首元素弹出 输出 </p><p>然后把所有与这个节点相连 并且 未访问过的都加入队列 （然后需要标识加入队列的节点已经访问过 将对应isVisited数组中的元素设置为true，不然的话会造成死循环 而且放这里可以避免重复放入队列 造成重复打印）</p><p>直到队列为空 也就是访问 过所有节点时 才退出循环 广度优先遍历结束</p><p>isVisited数组标识节点是否被访问过 一开始全部初始化为false</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930340.png" alt="重复打印某一节点的情况 " style="zoom:67%;" /><p><strong>代码实现：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 从一个指定的起点开始进行图的广度优先遍历</span><br><span class="line">     * @param v 起点</span><br><span class="line">     */</span><br><span class="line">    public void BFS(char v)</span><br><span class="line">    &#123;</span><br><span class="line">        //1. 先要创建一个isVisited数组用来标识是否访问过</span><br><span class="line">        boolean []isVisited = new boolean[arrayV.length];</span><br><span class="line">        Arrays.fill(isVisited,false);</span><br><span class="line"></span><br><span class="line">        //开始广度优先遍历</span><br><span class="line">        int begin = indexOfVertex(v);</span><br><span class="line">        //创建队列</span><br><span class="line">        Queue&lt;Integer&gt; que = new LinkedList&lt;&gt;();</span><br><span class="line">        //将起点放入队列</span><br><span class="line">        que.offer(begin);</span><br><span class="line">        isVisited[begin] = true;</span><br><span class="line"></span><br><span class="line">        while(!que.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            Integer srcIndex = que.poll();</span><br><span class="line">            System.out.print(arrayV[srcIndex]+&quot; &quot;);</span><br><span class="line"></span><br><span class="line">            for (int i = 0; i &lt; matrix[srcIndex].length; i++) &#123;</span><br><span class="line">                if(matrix[srcIndex][i]!=Integer.MAX_VALUE &amp;&amp; !isVisited[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    que.offer(i);</span><br><span class="line">                    isVisited[i] = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>深度优先遍历</li></ol><p>类似与二叉树的前序遍历 遇到根就访问</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930341.png" alt="深度优先遍历"></p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 深度优先遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 起点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">char</span> v)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> indexOfVertex(v);</span><br><span class="line">        <span class="type">boolean</span> []isVisited = <span class="keyword">new</span> <span class="title class_">boolean</span>[arrayV.length];</span><br><span class="line">        Arrays.fill(isVisited,<span class="literal">false</span>);</span><br><span class="line">        isVisited[begin] = <span class="literal">true</span>;</span><br><span class="line">        DFSChild(begin,isVisited);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">DFSChild</span><span class="params">(<span class="type">int</span> srcIndex,<span class="type">boolean</span> []isVisited)</span> &#123;</span><br><span class="line">        System.out.print(arrayV[srcIndex]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix[srcIndex].length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[srcIndex][i]!=Integer.MAX_VALUE &amp;&amp; !isVisited[i])</span><br><span class="line">            &#123;</span><br><span class="line">                isVisited[i] = <span class="literal">true</span>;</span><br><span class="line">                DFSChild(i,isVisited);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>应用的就是贪心的思想</p><p>连通图中的每一棵生成树，都是原图的一个极大无环子图，即：<strong>从其中删去任何一条边，生成树 就不在连</strong><br><strong>通；反之，在其中引入任何一条新边，都会形成一条回路</strong>。<br><strong>若连通图由n个顶点组成，则其生成树必含n个顶点和n-1条边</strong>。因此构造最小生成树的准则有三 条：</p><ol><li><p>只能使用图中的边来构造最小生成树</p></li><li><p><strong>只能使用恰好n-1条边来连接图中的n个顶点</strong>（n个节点的树有n-1条边 因为非根节点都只有一个父节点 根节点就没有父节点 所以就是n-1条边）</p></li><li><p>选用的n-1条边不能构成回路</p></li></ol><p>构造最小生成树的方法：Kruskal算法和Prim算法。这两个算法都采用了逐步求解的贪心策略。</p><p>贪心算法：<strong>是指在问题求解时，总是做出当前看起来最好的选择</strong>。</p><p>（贪心算法 求出的 不是唯一的最小生成树）</p><p>也就是说贪心算法做出的不是整体 最优的的选择，而是某种意义上的局部最优解。贪心算法不是对所有的问题都能得到整体最优解。</p><p>生成树： 最小连通子图</p><h4 id="Kruskal算法：全局贪心算法-使用优先级队列"><a href="#Kruskal算法：全局贪心算法-使用优先级队列" class="headerlink" title="Kruskal算法：全局贪心算法 使用优先级队列"></a>Kruskal算法：全局贪心算法 使用优先级队列</h4><p>首先 先在全局 选一条最小的边 下一次再选到最小的边（前提：不能构成回路）直到选到n-1条边</p><p>每次从全局当中 剩下的边里面 选择一个最小的边 存储到当前的生成树当中</p><p>疑问：你怎么判断 你找的这条边 不会构成环？</p><p>通过并查集就可以很好的实现了，并查集就是划分一个集合，可以判断边的两端是否是在一个集合内 如果在一个集合内 就会构成环 此时就不是最小生成树（集合这里就表示连通关系 不连通的我们才能加入）</p><p>1，当存储了一条边 就把这条边的起始位置和结束位置 存入并查集</p><ol start="2"><li>当每次村边的时候 都去检查一下当前的起始位置和结束是不是一个结合</li></ol><p>最后添加到最小生成树当中的所有的边 就是我们所要求的或者我们需要的结果</p><p>问题：你怎么能全局中选出最小的边？</p><p>使用优先级队列 小堆 使得优先是小的元素出队列</p><p>先遍历一遍 把每一条边放到优先级队列中</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 克鲁斯卡尔算法 获得 最小生成树 贪心算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minTree 存储我们找到的边</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最小生成树的权值和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kruskal</span><span class="params">(GraphByMatrix minTree)</span></span><br><span class="line">    &#123;</span><br><span class="line">        minTree.initArrayV(arrayV);</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Pair&lt;Integer, Integer&gt;&gt; que = getEdgesByWeight();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">totalWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">UnionFindSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFindSet</span>(arrayV.length);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//需要判断队列是否为空 因为目标图可能不是连通图</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;arrayV.length-<span class="number">1</span> &amp;&amp; !que.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            Pair&lt;Integer, Integer&gt; edge = que.poll();</span><br><span class="line">            <span class="keyword">if</span>(!set.isSameUnionFindSet(edge.key,edge.val))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;选择的边：&quot;</span>+arrayV[edge.key]+<span class="string">&quot;-&gt;&quot;</span>+arrayV[edge.val]+<span class="string">&quot;:&quot;</span>+matrix[edge.key][edge.val]);</span><br><span class="line">                <span class="comment">//不是同一个集合 才能插入</span></span><br><span class="line">                minTree.addEdge(edge.key,edge.val,matrix[edge.key][edge.val]);</span><br><span class="line">                <span class="comment">//更新并查集</span></span><br><span class="line">                set.union(edge.key, edge.val);</span><br><span class="line">                <span class="comment">//更新权值和</span></span><br><span class="line">                totalWeight+=matrix[edge.key][edge.val];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> totalWeight;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Prim算法-（局部贪心）"><a href="#Prim算法-（局部贪心）" class="headerlink" title="Prim算法 （局部贪心）"></a>Prim算法 （局部贪心）</h4><p>设X集合 为 已经确定的顶点 Y为 未确定的顶点 每次从(X) -&gt; (Y) 最短的一条边</p><p>不会有环的问题 因为每次选边 两个端点一定是位于不同的集合 （确定与非确定）</p><p>天然没环</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930342.png" alt="截屏2024-03-02 18.01.19" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930343.png" alt="截屏2024-03-02 18.00.23" style="zoom:70%;" /><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普里姆算法 局部贪心 从一个起点出发 确定和非确定两个集合中每次找最短的边 加入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minTree 最小生成树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 普里姆算法算最小生成树起点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最小生成树的权值和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Prim</span><span class="params">(GraphByMatrix minTree,<span class="type">char</span> v)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先算出起点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> indexOfVertex(v);</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建两个集合 用于存储确定的顶点 和 非确定的顶点</span></span><br><span class="line">        Set&lt;Integer&gt; setX = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; setY = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化两个集合</span></span><br><span class="line">        setX.add(begin);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayV.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=begin)</span><br><span class="line">            &#123;</span><br><span class="line">                setY.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个优先级队列 遍历 所有连出去的边 最小</span></span><br><span class="line">        PriorityQueue&lt;Pair&lt;Integer,Integer&gt;&gt; que = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1,o2)-&gt;</span><br><span class="line">                matrix[o1.key][o1.val] - matrix[o2.key][o2.val]</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先将起点 连接 的 边 加入优先级队列 这样就可以起到图中辐射的效果 不用担心环的问题</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayV.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[begin][i]!=Integer.MAX_VALUE &amp;&amp; begin!=i)</span><br><span class="line">            &#123;</span><br><span class="line">                que.offer(<span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(begin,i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历优先级队列 去出n-1条边</span></span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            Pair&lt;Integer, Integer&gt; edge = que.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">src</span> <span class="operator">=</span> edge.key;</span><br><span class="line">            <span class="type">int</span> <span class="variable">dest</span> <span class="operator">=</span> edge.val;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果终点已经在X集合 那么加入就会构造成环了</span></span><br><span class="line">            <span class="keyword">if</span>(!setX.contains(dest))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//不包含才放进去</span></span><br><span class="line">                System.out.println(<span class="string">&quot;选择的边：&quot;</span>+arrayV[src]+<span class="string">&quot;--&gt;&quot;</span>+arrayV[dest]+<span class="string">&quot;:&quot;</span>+matrix[src][dest]);</span><br><span class="line">                minTree.addEdge(src,dest,matrix[src][dest]);</span><br><span class="line">                count++;</span><br><span class="line">                totalWeight+=matrix[src][dest];</span><br><span class="line">                <span class="keyword">if</span>(count == arrayV.length-<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//边数已经足够</span></span><br><span class="line">                    <span class="keyword">return</span> totalWeight;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//更新两个集合</span></span><br><span class="line">                setX.add(dest);</span><br><span class="line">                setY.remove(dest);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayV.length; i++) &#123;</span><br><span class="line">                    <span class="comment">//不在集合当中才能放进来</span></span><br><span class="line">                    <span class="keyword">if</span>(matrix[dest][i]!=Integer.MAX_VALUE &amp;&amp; !setX.contains(i))</span><br><span class="line">                    &#123;</span><br><span class="line">                        que.offer(<span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(dest,i));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h3><h4 id="Dijikstra算法-–-单源最短路径"><a href="#Dijikstra算法-–-单源最短路径" class="headerlink" title="Dijikstra算法 – 单源最短路径"></a>Dijikstra算法 – 单源最短路径</h4><p>S – 已经确定最短路径的集合 </p><p>Q为其余未确定最短路径的节点集合</p><p>每次从Q中找出一个起点到该节点代价最小的节点u 将u从Q中取出 并放入S中 对u的每一个相邻节点v进行松弛操作 松弛就是判断从一个节点到另一个节点 新路径是否比旧路径更短 如果更小则更新</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930344.png"></p><p>dist数组用于存原点到每个点的距离</p><p>上面的随着节点加入s ， 更新s到每个点的距离 – 》 松弛操作</p><p>这里的*符号 表示 无穷大</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930345.png"></p><p>用一个S数组表示 原点到该节点是否已经确定最短路径</p><p>要求的是通过哪条路 要记录路径（节点数组）</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930346.png" alt="截屏2024-03-02 20.09.21"></p><p>第杰斯特拉 算法思路 大致解析</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930347.png"></p><p>第杰斯特拉算法无法解决负权值的图的最小路径问题：因为第杰斯特拉确定了原点到一个点的最短路径之后不会再反过来回去检查这条路径是否是最短路径</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第杰斯特拉算法 算 最短路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 起点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 路径数组 路径长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Dijkstra</span><span class="params">(<span class="type">char</span> v,<span class="type">int</span> []dist,<span class="type">int</span> []path)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//三个数组</span></span><br><span class="line">        <span class="comment">//dist数组用来记录起点到各点的距离</span></span><br><span class="line">        <span class="comment">//s用来记录已经确定最小路径的节点</span></span><br><span class="line">        <span class="comment">//path用来记录路径</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录起点值下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">srcIndex</span> <span class="operator">=</span> indexOfVertex(v);</span><br><span class="line">        <span class="comment">//初始化原点距离各点的距离数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arrayV.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dist[i] = matrix[srcIndex][i];</span><br><span class="line">            path[i] = srcIndex;</span><br><span class="line">        &#125;</span><br><span class="line">        dist[srcIndex] = <span class="number">0</span>;</span><br><span class="line">        path[srcIndex] = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//初始化判断是否确定最小路径数组</span></span><br><span class="line">        <span class="type">boolean</span> []s = <span class="keyword">new</span> <span class="title class_">boolean</span>[arrayV.length];</span><br><span class="line">        Arrays.fill(s,<span class="literal">false</span>);</span><br><span class="line">        s[srcIndex] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始寻找 因为最终要确定原点到所有点的路径 那么 就遍历全部顶点 一次 确定一个路径</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arrayV.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//每次都从路径表里找到最短的路径 已经确定的无需检验</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arrayV.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!s[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt; arrayV.length;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!s[j]&amp;&amp;j!=srcIndex&amp;&amp;dist[j]&lt;dist[min])</span><br><span class="line">                &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到最短路径的下标</span></span><br><span class="line">            <span class="comment">//标记路径表中到该点的最短路径已经确定 并加入终点节点 更新路径表的路径</span></span><br><span class="line">            s[min] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;arrayV.length;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!s[k]&amp;&amp;matrix[min][k]!=Integer.MAX_VALUE&amp;&amp;dist[min]+matrix[min][k]&lt;dist[k])</span><br><span class="line">                &#123;</span><br><span class="line">                    dist[k] = dist[min]+matrix[min][k];</span><br><span class="line">                    path[k] = min;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="单源最短路径–Bellman-Ford算法"><a href="#单源最短路径–Bellman-Ford算法" class="headerlink" title="单源最短路径–Bellman-Ford算法"></a>单源最短路径–Bellman-Ford算法</h4><p>以边为单位 每次都对所有边进行松弛操作 松弛操作的起始d数组是原点为0 其余点为无穷 只有d[i]+wi,j &lt; dj时才会对wi,j边进行松弛操作 </p><p>松弛：</p><p>对于一条从 <code>顶点u</code>指向 <code>顶点v</code>的边 <code>u--&gt;v</code>来说，如果满足 <strong>d[u]+w(u,v)&lt;d[v]</strong>,就更新 <code>d[v]</code>,使得 <code>d[v]=d[u]+w(u,v)</code>；这就是对 <code>边uv</code>的一次放松操作； </p><p>其中，w(u,v)表示边的权重，d(u)表示顶点u到达源s的最短距离(目前已知)</p><p><a href="https://blog.csdn.net/dshf_1/article/details/108144085">有关放松操作的博客</a></p><p>我们求一条最短路径 每一轮对所有的边进行松弛操作 只能确定出最短的一条边 那么就进行n-1次之后便可确定所有最短路径 第n次再进行松弛操作 如果还能松弛成功 那么就是一条环 就是存在负权回路</p><p>如果已经确定了某点的最短路径 那么每次都进行判断是无妨的 所以不用担心重复判断会导致结果错误的问题</p><p>n-1次之后 所有最短路径是确定的 如果还能被修改 就说明发生了错误 </p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BellmanFord算法求最短路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 原点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dist 最短路径长度数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 路径数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存在负权回路 false 不存在 true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">bellmanFord</span><span class="params">(<span class="type">char</span> v,<span class="type">int</span> []dist,<span class="type">int</span> []path)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">srcIndex</span> <span class="operator">=</span> indexOfVertex(v);</span><br><span class="line">        Arrays.fill(dist,Integer.MAX_VALUE);</span><br><span class="line">        dist[srcIndex] = <span class="number">0</span>;</span><br><span class="line">        Arrays.fill(path,-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//bellmanFord算法 不是以点的角度去进行松弛操作 而是以边的角度进行松弛操作</span></span><br><span class="line">        <span class="comment">//每一次遍历所有的边 松弛之后 会对应找到最短路径中的一条边</span></span><br><span class="line">        <span class="comment">//最短路径最多有n-1条边 所以循环n-1次 完成之后再进行一次 按道理经过n-1之后已经完成 如果第n次还进行松弛操作 则证明有负权回路</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arrayV.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n-<span class="number">1</span>;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(matrix[i][j]!=Integer.MAX_VALUE &amp;&amp; dist[j]&gt;matrix[i][j]+dist[i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//进行松弛操作 并且改变路径</span></span><br><span class="line">                        dist[j] = matrix[i][j] + dist[i];</span><br><span class="line">                        path[j] = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j]!=Integer.MAX_VALUE &amp;&amp; dist[j]&gt;matrix[i][j]+dist[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//此时还能进行松弛操作 则证明有负权回路</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Floyd算法-–-解决多源最短路径问题"><a href="#Floyd算法-–-解决多源最短路径问题" class="headerlink" title="Floyd算法 – 解决多源最短路径问题"></a>Floyd算法 – 解决多源最短路径问题</h4><p>原理 ： 动态规划</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930348.png"></p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930349.png"></p><p>floyd的路径长度数组 和 路径数组与单源不一样 这里都是二维数组 通过一次算法 将所有点作为原点与其他点的最短路径输出</p><p>主要思想 假设经过一个中间点k点 然后以k点为支点 进行松弛操作</p><p>这样就能更新以k点为中间点的最短路径</p><p>k点的选择 遍历图中所有的顶点</p><p>由此以来 便可以更新所有的最短路径 那么最后得到的就是单源最短路径</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202403070930350.png"></p><p>不能直接更新path[i] [j]为k，因为中间是可能还有很多的点的</p><p>所以 更新为path [k] [j]这样中间的点路径无需关注实现 就加入k进去即可</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">floyd</span><span class="params">(<span class="type">int</span> [][]dist,<span class="type">int</span> [][]path)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先进行初始化 初始化为matrix 先把已有的边加载进去</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arrayV.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dist[i][j] = matrix[i][j];</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j]!=Integer.MAX_VALUE)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//有边 则更新path数组</span></span><br><span class="line">                    path[i][j] = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//无边</span></span><br><span class="line">                    path[i][j] = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//对角线的距离要置为0</span></span><br><span class="line">                <span class="keyword">if</span>(i == j) dist[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行更新最短路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">            <span class="comment">//假设经过k点 更新最短路径</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dist[i][j] &gt; dist[i][k] + dist[k][j] &amp;&amp; dist[i][k]!=Integer.MAX_VALUE</span><br><span class="line">                        &amp;&amp; dist[k][j]!=Integer.MAX_VALUE)</span><br><span class="line">                    &#123;</span><br><span class="line">                        dist[i][j] = dist[i][k] + dist[k][j];</span><br><span class="line">                        <span class="comment">//更新path数组</span></span><br><span class="line">                        path[i][j] = path[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot;图&quot;&gt;&lt;/a&gt;图&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;数据结构当中 比较难的一个知识点了 抽象&lt;/p&gt;
&lt;h4 id=&quot;图的基本概念&quot;&gt;&lt;a href=&quot;#图的基本概念&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>银行排队模拟算法</title>
    <link href="http://example.com/2024/03/01/%E9%93%B6%E8%A1%8C%E6%8E%92%E9%98%9F%E6%A8%A1%E6%8B%9F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2024/03/01/%E9%93%B6%E8%A1%8C%E6%8E%92%E9%98%9F%E6%A8%A1%E6%8B%9F%E7%AE%97%E6%B3%95/</id>
    <published>2024-03-01T05:52:37.000Z</published>
    <updated>2024-03-01T05:53:17.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="银行排队模拟算法-队列的应用"><a href="#银行排队模拟算法-队列的应用" class="headerlink" title="银行排队模拟算法 [队列的应用]"></a>银行排队模拟算法 [队列的应用]</h2><hr><h4 id="两大事件的处理："><a href="#两大事件的处理：" class="headerlink" title="两大事件的处理："></a>两大事件的处理：</h4><h5 id="新客户到来事件："><a href="#新客户到来事件：" class="headerlink" title="新客户到来事件："></a>新客户到来事件：</h5><ol><li><p>弹出事件表的首节点，放入一个变量evItem中，用于中转</p><p>分析是到来还是离开事件？</p></li><li><p>如果是到来事件，那么随机生成两个变量：新客户处理时间，下一客户到来的间隔时间</p><p>然后要加入下一客户的到来事件。</p><p>根据evItem中的发生时间（即新客户的到来时间）+ 生成的间隔时间得到下一客户到来时间</p><p>可是先要判断下一客户的到来时间是否已经超过了银行的关门时间，若超过则不再添加事件</p><p>若未到银行关门时间，那么根据下一客户到来时间和到来事件类型-1创建事件，加入事件表（根据事件发生时间有序排列）</p></li><li><p>生成随机数之后，可以知道新客户的信息，创建一个客户对象，包含到达时间和处理时间，将这个客户对象放入最短的队列当中</p></li><li><p>若此时该客户未在队首，那么不要添加离开事件（不要担心，后面的循环处理事件中到了队首会添加的），如果在队首，那么添加离开事件到事件表，离开时间即到来事件+处理时间</p></li></ol><h5 id="客户离开事件的处理："><a href="#客户离开事件的处理：" class="headerlink" title="客户离开事件的处理："></a>客户离开事件的处理：</h5><ol><li>与上面同样先获取事件表首事件，判断到来还是离开</li><li>是离开，找到队列编号，删除首节点，创建一个变量获取</li><li>判断此时该队列是否为空，若空，不处理</li><li>若不空，要给队首添加离开事件</li><li>添加离开事件的方法与一进就队首不同，这里前一个客户离开的时间才是该客户开始的时间，那么该客户的离开事件需要用前一客户的离开时间+自身的处理时间</li><li>计算等待事件，若为队首，无等待，若不为队首时，该用户到来时间-前一用户离开时间为该用户的等待时间</li></ol><hr><h4 id="总处理时间与总时间"><a href="#总处理时间与总时间" class="headerlink" title="总处理时间与总时间"></a>总处理时间与总时间</h4><h5 id="总时间：根本不用累加，因为事件表最后一个事件必为离开事件，因为开门时间为0，那么这个离开事件发生的时间就是总时间"><a href="#总时间：根本不用累加，因为事件表最后一个事件必为离开事件，因为开门时间为0，那么这个离开事件发生的时间就是总时间" class="headerlink" title="总时间：根本不用累加，因为事件表最后一个事件必为离开事件，因为开门时间为0，那么这个离开事件发生的时间就是总时间"></a>总时间：根本不用累加，因为事件表最后一个事件必为离开事件，因为开门时间为0，那么这个离开事件发生的时间就是总时间</h5><h5 id="总处理时间：直接将每个用户的处理时间累加进去，就得到了"><a href="#总处理时间：直接将每个用户的处理时间累加进去，就得到了" class="headerlink" title="总处理时间：直接将每个用户的处理时间累加进去，就得到了"></a>总处理时间：直接将每个用户的处理时间累加进去，就得到了</h5><p>如此一来，就得到了总等待时间，因为总时间-总处理时间就是等待时间，也可得到平均等待时间</p><hr><h3 id="银行排队问题之单队列多窗口加VIP服务"><a href="#银行排队问题之单队列多窗口加VIP服务" class="headerlink" title="银行排队问题之单队列多窗口加VIP服务"></a>银行排队问题之单队列多窗口加VIP服务</h3><p>这个排队问题与之前的大不相同，在这里，每个窗口不再对着一个队列，而是所有窗口共享一个队列，而且还加入了VIP窗口与VIP用户</p><p>题目要求：求平均等待时间，最大等待时间，结束时间，每个窗口处理的人数（升序排序）</p><p>由此对于窗口而言，我们只用一个int变量表示窗口的开始空闲时间点，因为多个窗口，所以就是一个数组severTime[],方便找最快</p><p>每个窗口处理的人数也需要对应的数组，severeNum[]，需要升序排序</p><p>结束的时间就是当队列为空时，四个窗口中最大的开始空闲时间点</p><hr><p>题目中还有要求：</p><ol><li><p>队列中没有VIP客户时，VIP窗口为普通顾客服务</p></li><li><p>当该窗口空闲并且队列中有VIP客户在等待时，排在最前面的VIP客户享受该窗口的服务。</p></li><li><p>同时，当轮到某VIP客户出列时，若VIP窗口非空，该客户可以选择空闲的普通窗口；<strong>否则一定选择VIP窗口</strong></p></li></ol><hr><p>先来实现一个没有VIP的单队列多窗口服务</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//此处不涉及优先，那么可以用C++定义好的普通队列</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义客户类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> arrivalTime;</span><br><span class="line">    <span class="type">int</span> processTime;</span><br><span class="line">    <span class="built_in">Client</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Client</span>(<span class="type">int</span> arrivalTime,<span class="type">int</span> processTime):<span class="built_in">arrivalTime</span>(arrivalTime),<span class="built_in">processTime</span>(processTime)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankWindow</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> num;<span class="comment">//处理人数</span></span><br><span class="line">    <span class="type">int</span> no;<span class="comment">//窗口编号</span></span><br><span class="line">    <span class="built_in">BankWindow</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">BankWindow</span>(<span class="type">int</span> num,<span class="type">int</span> no):<span class="built_in">num</span>(num),<span class="built_in">no</span>(no)&#123;&#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,BankWindow &amp;b1);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,BankWindow &amp;b1)</span><br><span class="line">&#123;</span><br><span class="line">    os&lt;&lt;<span class="string">&quot;窗口编号：&quot;</span>&lt;&lt;b1.no&lt;&lt;<span class="string">&quot; 处理人数：&quot;</span>&lt;&lt;b1.num&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;Client&gt; que;</span><br><span class="line">    <span class="comment">//先输入有多少个客户</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入需要处理的客户数：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;下面输入每个客户的到来时间和处理时间（按照到来时间有序输入）：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将每个客户的到来时间处理时间输入，加入队列中</span></span><br><span class="line">        <span class="type">int</span> arrivalTime,processTime;</span><br><span class="line">        cin&gt;&gt;arrivalTime&gt;&gt;processTime;</span><br><span class="line">        <span class="function">Client <span class="title">cli</span><span class="params">(arrivalTime,processTime)</span></span>;</span><br><span class="line">        que.<span class="built_in">push</span>(cli);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入窗口数：</span></span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入窗口数：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="comment">//输入完数据，初始化空闲开始时间数组，人数数组</span></span><br><span class="line">    <span class="type">int</span> serverTime[k];</span><br><span class="line">    <span class="comment">//空闲时间开始数组</span></span><br><span class="line">    <span class="type">int</span> serveNum[k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        serverTime[i] = <span class="number">0</span>;<span class="comment">//一开始空闲时间都是0</span></span><br><span class="line">        serveNum[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最大等待时间，平均等待时间，最后时间</span></span><br><span class="line">    <span class="type">int</span> maxWait = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> totalWait = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> lastTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始处理</span></span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//定义一个变量记录最快空闲的窗口,默认最快是0</span></span><br><span class="line">        <span class="type">int</span> fastServer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先获取队首元素，然后踢出队列</span></span><br><span class="line">        Client cli = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//遍历窗口,有空闲窗口的情况</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cli.arrivalTime&gt;serverTime[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//有空闲窗口,那么直接刷新对应窗口最快空闲时间即可</span></span><br><span class="line">                serverTime[i] = cli.arrivalTime+cli.processTime;</span><br><span class="line">                serveNum[i]++;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若无空闲窗口,则找最快空闲的窗口</span></span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(serverTime[i]&lt;serverTime[fastServer])</span><br><span class="line">                &#123;</span><br><span class="line">                    fastServer = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//得到最快空闲的窗口,计算等待时间</span></span><br><span class="line">            <span class="type">int</span> waitTime = serverTime[fastServer] - cli.arrivalTime;</span><br><span class="line">            <span class="keyword">if</span>(waitTime&gt;maxWait)</span><br><span class="line">            &#123;</span><br><span class="line">                maxWait = waitTime;</span><br><span class="line">            &#125;</span><br><span class="line">            totalWait += waitTime;</span><br><span class="line"></span><br><span class="line">            serveNum[fastServer]++;</span><br><span class="line">            <span class="comment">//计算下一个，也就是当前用户占窗口后窗口的最快空闲时间</span></span><br><span class="line">            serverTime[fastServer]+=cli.processTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算结束时间,先初始化lastTime再进行比较</span></span><br><span class="line">    lastTime = serverTime[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(serverTime[i]&gt;lastTime)</span><br><span class="line">        &#123;</span><br><span class="line">            lastTime = serverTime[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> totalNum = <span class="number">0</span>;</span><br><span class="line">    BankWindow bw[k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        totalNum+=serveNum[i];</span><br><span class="line">        bw[i] = <span class="built_in">BankWindow</span>(serveNum[i],i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;最大等待时间：&quot;</span>&lt;&lt;maxWait&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;平均等待时间：&quot;</span>&lt;&lt;(<span class="type">double</span>)totalWait/totalNum&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;结束时间：&quot;</span>&lt;&lt;lastTime&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//升序排序，每个窗口的处理人数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k<span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(bw[j].num&gt;bw[j+<span class="number">1</span>].num)</span><br><span class="line">            &#123;</span><br><span class="line">                BankWindow tmp = bw[j+<span class="number">1</span>];</span><br><span class="line">                bw[j+<span class="number">1</span>] = bw[j];</span><br><span class="line">                bw[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;bw[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>然后加上VIP客户和VIP窗口</p><p>实现：</p><p>因为要对VIP元素进行优先操作，所以此处涉及到VIP插队功能，那么不能用C++定义的队列，自己用大数组实现一个</p><p>测试函数中，首先键盘输入个数，每个客户的信息，窗户数，VIP窗口是哪个</p><p>初始化队列队首和队尾指针，初始化题目要求的最长等待时间和总等待时间和最后时间的值</p><p>然后开始处理，队列为空时跳出循环</p><p>每次读一个，要判断是否为VIP，进入两种情况的处理</p><p>插一句：插队操作的处理，只有在当前窗口是VIP窗口且队列中有等待的VIP用户才会发生，若队首都对于该窗口不为等待状态，那么后面的整个队列对于此时该VIP窗口都不是等待状态，不执行插队操作，否则会变成窗口等人的情况，浪费资源，因为有没有满足条件的VIP用户已在队列遍历中体现，那么就无需再多加一个变量记录VIP用户的个数来确定有没有等待的VIP用户了</p><ol><li><p>队首为普通用户时，先遍历窗口看是否有空闲，若找到空闲VIP窗口，要考虑队列中有无VIP客户，有就要执行VIP客户的插队功能，让VIP客户去队首，无就直接操作即可</p></li><li><p>如果遍历到某个窗口非空闲，那么此时就同步计算最快结束服务的窗口</p></li><li><p>如果在刚才的循环中都没有空闲窗口找到，那么就要找到最快空闲窗口，进行等待处理，此时可计算等待时间，但要注意VIP窗口的情况特殊，要进行插队操作</p></li><li><p>若队首为VIP，那么就优先看VIP窗口是不是空闲，空闲直接处理</p></li><li><p>若VIP窗口不空闲，则选择普通最快窗口，此时最快空闲窗口默认值为VIP窗口编号，全部与其进行比较，找到之后看是否需要等待，分别处理两种情况</p><p>跳出循环之后，完成打印即可</p><p>最后的代码，要考虑的东西太多了，有些是写代码时才发现的，写代码的注释里面了，以后复盘的话要认真看代码里面的注释</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为有VIP涉及到队列中VIP用户优先的情况，所以要自己定义队列，用一个大数组实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先定义客户类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> arrivalTime;</span><br><span class="line">    <span class="type">int</span> processTime;</span><br><span class="line">    <span class="comment">//添加一个值判断是否为VIP,0不是，1是</span></span><br><span class="line">    <span class="type">int</span> vip;</span><br><span class="line">    <span class="built_in">Client</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Client</span>(<span class="type">int</span> arrivalTime,<span class="type">int</span> processTime,<span class="type">int</span> vip):</span><br><span class="line">    <span class="built_in">arrivalTime</span>(arrivalTime),<span class="built_in">processTime</span>(processTime),<span class="built_in">vip</span>(vip)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接着定义一个大数组，元素类型为客户，作为队列底层</span></span><br><span class="line">Client que[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//对VIP用户在等VIP窗口时进行操作的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vip2vip</span><span class="params">(<span class="type">int</span> start,<span class="type">int</span> end,<span class="type">int</span> latest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//参数为队首索引，队尾索引，该窗口最快空闲时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//是否在队中</span></span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//记录第一个要处理的VIP位置</span></span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;end;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当前队列中第一个VIP用户且处于等待状态才生效</span></span><br><span class="line">        <span class="keyword">if</span>(que[i].vip &amp;&amp; que[i].arrivalTime&lt;latest)</span><br><span class="line">        &#123;</span><br><span class="line">            pos = i;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到了要处理的VIP位置，进行插队操作</span></span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先取出pos位置VIP客户</span></span><br><span class="line">        Client vip = que[pos];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=pos<span class="number">-1</span>;i&gt;=start;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            que[i+<span class="number">1</span>] = que[i];</span><br><span class="line">        &#125;</span><br><span class="line">        que[start] = vip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankWindow</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> no;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="built_in">BankWindow</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">BankWindow</span>(<span class="type">int</span> no,<span class="type">int</span> num):<span class="built_in">no</span>(no),<span class="built_in">num</span>(num)&#123;&#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,BankWindow&amp; b1);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,BankWindow&amp; b1)</span><br><span class="line">&#123;</span><br><span class="line">    os&lt;&lt;<span class="string">&quot;窗口编号：&quot;</span>&lt;&lt;b1.no&lt;&lt;<span class="string">&quot; 窗口人数：&quot;</span>&lt;&lt;b1.num&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数，处理</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化部分</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//题目要求的数据</span></span><br><span class="line">    <span class="type">int</span> totalWait = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxWait = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> lastTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义队首和队尾指针来控制队列</span></span><br><span class="line">    <span class="type">int</span> front = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> rear = <span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入总客户数：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请分别输入每个客户的到达时间和处理时间,以及是否为VIP(0不是,1是):&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> arrivalTime,processTime,vip;</span><br><span class="line">        cin&gt;&gt;arrivalTime&gt;&gt;processTime&gt;&gt;vip;</span><br><span class="line">        <span class="comment">//针对大于60的数据进行处理</span></span><br><span class="line">        <span class="keyword">if</span>(processTime&gt;<span class="number">60</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            processTime = <span class="number">60</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建对象，交给数组</span></span><br><span class="line">        <span class="function">Client <span class="title">cli</span><span class="params">(arrivalTime,processTime,vip)</span></span>;</span><br><span class="line">        que[i] = cli;</span><br><span class="line">        <span class="comment">//队列加入操作，队尾往后挪</span></span><br><span class="line">        rear++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入银行的窗口数以及VIP窗口编号:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> k,vipNo;</span><br><span class="line">    cin&gt;&gt;k&gt;&gt;vipNo;</span><br><span class="line">    <span class="comment">//初始化窗口人数数组，和窗口最快空闲时间数组</span></span><br><span class="line">    <span class="type">int</span> serveTime[k];</span><br><span class="line">    <span class="type">int</span> serveNum[k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        serveNum[i] = <span class="number">0</span>;</span><br><span class="line">        serveTime[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始处理,直到队列为空时才停止</span></span><br><span class="line">    <span class="keyword">while</span>(front&lt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//和未带VIP一样每次循环处理一个队首元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//两种情况，VIP和非VIP</span></span><br><span class="line">        <span class="comment">//不是VIP</span></span><br><span class="line">        <span class="keyword">if</span>(!que[front].vip)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//对于普通用户而言，最快窗口是第一个</span></span><br><span class="line">            <span class="type">int</span> fastSever  = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//两种情况，一种能找到空闲窗口，一种无空闲窗口（计算等待时间）</span></span><br><span class="line">            <span class="comment">//找空闲窗口</span></span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(que[front].arrivalTime&gt;=serveTime[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//找到了空闲窗口</span></span><br><span class="line">                    <span class="comment">//此时，队列中全部元素都不处于等待状态，所以直接第一个元素上去，不管是否为VIP</span></span><br><span class="line">                    <span class="comment">//不过还要考虑一个问题，就是等待时间为0是否也是等待状态呢</span></span><br><span class="line"></span><br><span class="line">                    serveNum[i]++;</span><br><span class="line">                    <span class="comment">//此时没有等待时间</span></span><br><span class="line">                    serveTime[i] = que[front].arrivalTime+que[front].processTime;</span><br><span class="line">                    <span class="comment">//队首踢出队列</span></span><br><span class="line">                    front++;</span><br><span class="line">                    <span class="comment">//因为已经处理完该元素，所以直接进入下一个循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//下面是没有进入第一个if处理的情况，也就是当前窗口并不空闲，那么就要计算最快窗口了</span></span><br><span class="line">                <span class="comment">//也就是同步计算fastServer 为后面窗口满情况的选择最快窗口做准备</span></span><br><span class="line">                <span class="keyword">if</span>(serveTime[i]&lt;serveTime[fastSever])</span><br><span class="line">                &#123;</span><br><span class="line">                    fastSever = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//都不空闲，此时要比较获得最快空闲的窗口进行操作</span></span><br><span class="line">                <span class="comment">//最快空闲窗口因为上面的比较已经获得</span></span><br><span class="line">                <span class="comment">//还是要分VIP窗口和非VIP窗口讨论</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(fastSever == vipNo)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//最快窗口VIP</span></span><br><span class="line">                    <span class="comment">//如果有VIP在等待，那么要将后面的等待VIP插入</span></span><br><span class="line">                    <span class="built_in">vip2vip</span>(front,n,serveTime[fastSever]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算等待时间</span></span><br><span class="line">                <span class="type">int</span> waitTime = serveTime[fastSever] - que[front].arrivalTime;</span><br><span class="line">                <span class="keyword">if</span>(waitTime&gt;maxWait)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxWait = waitTime;</span><br><span class="line">                &#125;</span><br><span class="line">                totalWait += waitTime;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//插队完成，操作</span></span><br><span class="line">                serveNum[fastSever]++;</span><br><span class="line">                serveTime[fastSever] += que[front].processTime;</span><br><span class="line">                front++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//队首是VIP</span></span><br><span class="line">            <span class="keyword">if</span>(que[front].arrivalTime&gt;=serveTime[vipNo])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//队列都不处于等待状态时,直接处理，窗口最快空闲时间计算会不同,没有等待时间</span></span><br><span class="line">                serveNum[vipNo]++;</span><br><span class="line">                serveTime[vipNo] = que[front].arrivalTime+que[front].processTime;</span><br><span class="line">                front++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//默认最快窗口是VIP</span></span><br><span class="line">                <span class="type">int</span> fastServer = vipNo;</span><br><span class="line">                <span class="comment">//比较找到最快窗口</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(serveTime[i]&lt;serveTime[fastServer])</span><br><span class="line">                    &#123;</span><br><span class="line">                        fastServer = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//最快空闲窗口若此刻空闲，无需计算等待时间</span></span><br><span class="line">                <span class="keyword">if</span>(serveTime[fastServer]&gt;que[front].arrivalTime)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//要等待的情况</span></span><br><span class="line">                    <span class="comment">//计算等待时间</span></span><br><span class="line">                    <span class="type">int</span> waitTime = serveTime[fastServer]-que[front].arrivalTime;</span><br><span class="line">                    <span class="keyword">if</span>(waitTime&gt;maxWait)</span><br><span class="line">                    &#123;</span><br><span class="line">                        maxWait = waitTime;</span><br><span class="line">                    &#125;</span><br><span class="line">                    totalWait+=waitTime;</span><br><span class="line">                    <span class="comment">//操作</span></span><br><span class="line">                    serveNum[fastServer]++;</span><br><span class="line">                    serveTime[fastServer]+=que[front].processTime;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//不用等待的情况</span></span><br><span class="line">                    <span class="comment">//操作</span></span><br><span class="line">                    serveNum[fastServer]++;</span><br><span class="line">                    serveTime[fastServer]=que[front].processTime+que[front].arrivalTime;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//踢出队列</span></span><br><span class="line">                front++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出打印信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算最后时间，也就是处理时间最大的窗口</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(serveTime[i]&gt;lastTime)</span><br><span class="line">        &#123;</span><br><span class="line">            lastTime = serveTime[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//升序排列窗口人数,同步计算总人数</span></span><br><span class="line">    <span class="type">int</span> totalNum = <span class="number">0</span>;</span><br><span class="line">    BankWindow bw[k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        totalNum+=serveNum[i];</span><br><span class="line">        bw[i] = <span class="built_in">BankWindow</span>(i,serveNum[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冒泡</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k<span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(bw[j].num&gt;bw[j+<span class="number">1</span>].num)</span><br><span class="line">            &#123;</span><br><span class="line">                BankWindow tmp = bw[j];</span><br><span class="line">                bw[j] = bw[j+<span class="number">1</span>];</span><br><span class="line">                bw[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;最大等待时间：&quot;</span>&lt;&lt;maxWait&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;平均等待时间：&quot;</span>&lt;&lt;(<span class="type">double</span>)totalWait/totalNum&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;最后时间：&quot;</span>&lt;&lt;lastTime&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出每个窗口的人数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;bw[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;银行排队模拟算法-队列的应用&quot;&gt;&lt;a href=&quot;#银行排队模拟算法-队列的应用&quot; class=&quot;headerlink&quot; title=&quot;银行排队模拟算法 [队列的应用]&quot;&gt;&lt;/a&gt;银行排队模拟算法 [队列的应用]&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&quot;两大事件的处理：</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>B树</title>
    <link href="http://example.com/2024/02/29/B%E6%A0%91/"/>
    <id>http://example.com/2024/02/29/B%E6%A0%91/</id>
    <published>2024-02-29T15:13:46.000Z</published>
    <updated>2024-02-29T15:16:49.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><hr><p>B-树： 不要读作B减树 这个-是分隔符 意思是 多叉平衡树</p><p>二叉搜索树 AVL树 红黑树 都是二叉的</p><p>多叉 就不只是二叉了</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312469.png" alt="之前学过的查找结构"></p><p>以上结构适合用于数据量不是很大的情况，如果数据量非常大，一次性无法加载到内存中，使用上述结构就不是很<br>方便。比如：使用平衡树搜索一个大文件</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312471.png" alt="截屏2024-02-27 12.50.24"></p><p>缺陷：</p><ol><li>树的高度比较高，查找时最差情况下要比较树的高度次</li><li>数据量如果特别大时，树中的节点可能无法一次性加载到内存中，需要多次IO<br>那如何加速对数据的访问呢？</li><li>提高IO的速度</li><li>降低树的高度—多叉树平衡树</li></ol><p>要想提高IO速度 那么就需要 降低树的高度 –》 每一层尽可能的多放数据 -&gt; 多叉树</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312472.png" alt="截屏2024-02-27 12.54.57" style="zoom:130%;" /><p>内存当中的数据 是容易丢失的 带电存储的</p><p>new的对象 都在内存里面</p><p>面试问题：数据存储到hashMap和存储到文件当中 有什么区别？</p><p>a。 读取慢 b。存储到内存当中 断电就丢失了</p><hr><h3 id="B树概念"><a href="#B树概念" class="headerlink" title="B树概念"></a>B树概念</h3><p>1970年，R.Bayer和E.mccreight提出了一种适合外查找的树，它是一种平衡的多叉树，称为B树(有些地方写的是B-<br>树，注意不要误读成”B减树”)。<strong>一棵M阶(M&gt;2)的B树，是一棵平衡的M路平衡搜索树，可以是空树或者满足一下性质：</strong></p><ol><li><p>根节点至少有两个孩子</p></li><li><p>每个非根节点至少有M&#x2F;2-1 (上取整) 个关键字,至多有M-1个关键字，并且以升序排列</p></li></ol><p>  例如：当M&#x3D;3的时候，至少有3&#x2F;2&#x3D;1.5，向上取整等于2，2-1&#x3D;1个关键字，最多是2个关键字</p><ol start="3"><li>每个非根节点至少有M&#x2F;2 (上取整) 个孩子,至多有M个孩子</li></ol><p>  例如：当M&#x3D;3的时候，至少有3&#x2F;2&#x3D;1.5，向上取整等于2个孩子。最多有3个孩子。</p><ol start="4"><li><p>key[i]和key[i+1]之间的孩子节点的值介于key[i]、key[i+1]之间</p></li><li><p>所有的叶子节点都在同一层</p></li></ol><hr><h5 id="推演B树的插入"><a href="#推演B树的插入" class="headerlink" title="推演B树的插入"></a>推演B树的插入</h5><p>M叉树 就看几个孩子 M为3 就是三叉树 M为4 就是四叉树</p><p>M &#x3D; 3 讨论的是三叉树</p><p>孩子节点 永远比 关键字多一个</p><p>一个B树节点的内容：</p><p>keys 存储关键字 </p><p>subs 存储孩子的地址</p><p>parent 父节点</p><p>usedSize 记录当前节点当中有多少个关键字 便于知道什么时候分裂</p><p>keys必须是有序的 这里类似于插入排序（插入数据的时候，如果当前keys存在元素要插入排序）</p><p>假设 当前要创建一个三叉树 那么我这里的节点keys和subs的大小都要多申请一个空间 （便于分裂 不用去找中间节点 插入排序之后自然就知道中间节点 关键值数组大小为3 孩子节点数组大小为4）（先插入 再把中间的提走）</p><p>假设 我们不多给一个空间</p><p>那么对于当前这棵树来说M&#x3D;4 是四叉树 </p><p>最多刚M-1 也就是3个元素 当你放第四个元素的时候 进行分裂的时候 就不好分裂了 因为要分情况 看把谁提走</p><p>分裂根节点的逻辑</p><p>找到该节点的中间位置m</p><p>右边数据 存储到新的节点当中</p><p>m这个数据 存储到一个新的节点 变为了新的根节点</p><p>对于根节点来说 原来的一个节点 被分裂成了最终的三个节点</p><p>B树的分裂 是横向的 横向在增长 也就意味着树的高度没有增加 只有分裂根节点的时候 树的高度才会增加</p><p>通常情况下M取1024</p><p>整个分裂的过程当中 会一直向上分裂 直到根节点分裂结束</p><p>每次移动节点当中的数据的时候 孩子节点+parent节点 都需要进行适当的改动</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312473.png" alt="推演B树的插入过程" style="zoom:130%;" /><hr><h5 id="插入过程总结："><a href="#插入过程总结：" class="headerlink" title="插入过程总结："></a>插入过程总结：</h5><ol><li>如果树为空，直接插入新节点中，该节点为树的根节点</li><li>树非空，找待插入元素在树中的插入位置(注意：找到的插入节点位置一定在叶子节点中)</li><li>检测是否找到插入位置(假设树中的key唯一，即该元素已经存在时则不插入)4. 按照插入排序的思想将该元素插入到找到的节点中</li><li>检测该节点是否满足B-树的性质：即该节点中的元素个数是否等于M，如果小于则满足</li><li>如果插入后节点不满足B树的性质，需要对该节点进行分裂：</li></ol><p>总结：</p><p>根节点的关键字数量[1,M-1] 孩子节点数量[2,M] （性质：孩子节点数量会比关键字数量多一个）</p><p>非根节点的关键字数量 [M&#x2F;2-1,M-1] 孩子数量[M&#x2F;2,M]</p><p>M&#x2F;2 算下来是要向上取整的</p><p>10个节点 </p><p>左 5 中 1 右4  &#x2F; 左4 中1 右 5</p><p>9个节点</p><p>左 4 中 1 右 4</p><p>B树的分裂 只有在满的时候才会分裂 分裂出来的新节点，和老节点是在同一层的</p><p>但是根节点的分裂会着呢感觉爱高度的</p><p>总结来说 B树 是天然平衡的 因为是横向增长的</p><p>当M &#x3D; 1024 的时候</p><p>第一层： 1023个关键字</p><p>第二层： 1024孩子 * 1023关键字 大约是100W的级别</p><p>第三层： 1024* 1024孩子* 1023 关键字 10亿级别</p><p>仅仅三层 就可以存十亿级别的数据 </p><p>第四层: 1024 * 1024* 1024孩子*1023 关键字 大约是 10000亿级别</p><p>有四层 就可以存上达到万亿级别的数据</p><p>多叉树 树在不高的时候 就可以存放非常多的数据</p><hr><h4 id="B树的实现"><a href="#B树的实现" class="headerlink" title="B树的实现"></a>B树的实现</h4><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> HighOrderDS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBtree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BTRNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span>[] keys;<span class="comment">//关键字</span></span><br><span class="line">        <span class="keyword">public</span> BTRNode[] subs;<span class="comment">//孩子</span></span><br><span class="line">        <span class="keyword">public</span> BTRNode parent; <span class="comment">//父亲节点</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> usedSize; <span class="comment">//记录当前节点中关键字的数量 默认为0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BTRNode</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//说明一下 这里多给一个 是为了好进行分裂</span></span><br><span class="line">            <span class="built_in">this</span>.keys = <span class="keyword">new</span> <span class="title class_">int</span>[M];</span><br><span class="line">            <span class="built_in">this</span>.subs = <span class="keyword">new</span> <span class="title class_">BTRNode</span>[M+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BTRNode root; <span class="comment">// 当前B树的根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往B树当中插入一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 如果B树 当中 没有数据</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">BTRNode</span>();</span><br><span class="line">            root.keys[<span class="number">0</span>] = key;</span><br><span class="line">            root.usedSize++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 当B树 不为空的时候 查找</span></span><br><span class="line">        <span class="comment">//cur移动的时候 还需要记录下来cur的父亲 可能会要分裂</span></span><br><span class="line">        <span class="comment">// 没找到 当前这个插入的节点</span></span><br><span class="line">        <span class="comment">//找到 你要插入的节点</span></span><br><span class="line">        Pair&lt;BTRNode, Integer&gt; pair = find(key);</span><br><span class="line">        <span class="comment">//判断 val值是不是-1 来确定 是否存在当前这个key</span></span><br><span class="line">        <span class="keyword">if</span> (pair.val != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//存在节点 不能往里面插入元素</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不存在key 进行插入操作</span></span><br><span class="line">        <span class="type">BTRNode</span> <span class="variable">cur</span> <span class="operator">=</span> pair.getKey();</span><br><span class="line"></span><br><span class="line">        insertKey(key,cur);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cur.usedSize &lt; M)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//插入之后没有满 插入成功</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//满了 要进行分裂</span></span><br><span class="line">        spilt(cur);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分裂逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cur keys已经满的节点 需要分裂的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">spilt</span><span class="params">(BTRNode cur)</span> &#123;</span><br><span class="line">        <span class="comment">//每次分裂 创建一个新节点 将右边的一半数据都拷到新节点</span></span><br><span class="line">        <span class="comment">//然后将根节点提到父节点处 新节点为父节点的一个新孩子 （横向扩展）</span></span><br><span class="line">        <span class="comment">//根的分裂 两个新节点 B树的高度+1</span></span><br><span class="line">        <span class="comment">//非根节点 1个新节点 B树的高度不变</span></span><br><span class="line">        <span class="comment">//根节点分裂的时候 注意孩子的指针越要有所变化</span></span><br><span class="line">        <span class="type">BTRNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BTRNode</span>();</span><br><span class="line">        <span class="comment">//先存储当前需要分裂节点的父节点</span></span><br><span class="line">        <span class="type">BTRNode</span> <span class="variable">parent</span> <span class="operator">=</span> cur.parent;</span><br><span class="line">        <span class="comment">//从一半右边开始挪到新节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> cur.usedSize/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mid+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;cur.usedSize;i++,j++)</span><br><span class="line">        &#123;</span><br><span class="line">            newNode.keys[j] = cur.keys[i];</span><br><span class="line">            newNode.subs[j] = cur.subs[i];</span><br><span class="line">            cur.subs[i] = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//每拷贝一个孩子 还要把对应孩子的父亲指针修改</span></span><br><span class="line">            <span class="comment">//要注意可能是叶子节点 叶子节点的子节点都是空的</span></span><br><span class="line">            <span class="keyword">if</span>(newNode.subs[j]!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                newNode.subs[j].parent = newNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//多拷贝一次孩子 也就是右边</span></span><br><span class="line">        newNode.subs[j] = cur.subs[i];</span><br><span class="line">        cur.subs[i] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(newNode.subs[j]!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            newNode.subs[j].parent = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新当前新的节点的父亲节点</span></span><br><span class="line">        newNode.parent = parent;</span><br><span class="line">        <span class="comment">//更新新节点的有效数据个数</span></span><br><span class="line">        newNode.usedSize = j;</span><br><span class="line">        <span class="comment">//更新 当前节点 的 有效数据个数</span></span><br><span class="line">        cur.usedSize = cur.usedSize - j - <span class="number">1</span>;<span class="comment">//提前把中间那个也给处理了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//特殊 处理根节点的情况</span></span><br><span class="line">        <span class="keyword">if</span>(cur == root)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//根节点的情况比较简单 只用将原来cur的mid提到根节点 因为新创建的root是空的 所以后面对于root节点的修改操作就不用了</span></span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">BTRNode</span>();</span><br><span class="line">            root.keys[<span class="number">0</span>] = cur.keys[mid];</span><br><span class="line">            root.subs[<span class="number">0</span>] = cur;</span><br><span class="line">            root.subs[<span class="number">1</span>] = newNode;</span><br><span class="line">            root.usedSize = <span class="number">1</span>;</span><br><span class="line">            cur.parent = root;</span><br><span class="line">            newNode.parent = root;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把中间数字提上去</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">endT</span> <span class="operator">=</span> parent.usedSize-<span class="number">1</span>;<span class="comment">//获取父亲节点的keys最后一位</span></span><br><span class="line">        <span class="keyword">for</span>(;endT&gt;=<span class="number">0</span>;endT--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(parent.keys[endT] &gt;= cur.keys[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//对应的孩子要往右移 类似\的绑定关系</span></span><br><span class="line">                parent.subs[endT+<span class="number">2</span>] = parent.subs[endT+<span class="number">1</span>];</span><br><span class="line">                parent.keys[endT+<span class="number">1</span>] = parent.keys[endT];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        parent.subs[endT+<span class="number">2</span>] = newNode;</span><br><span class="line">        parent.keys[endT+<span class="number">1</span>] = cur.keys[mid];</span><br><span class="line">        parent.usedSize++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果parent 满了 还需要再次分裂</span></span><br><span class="line">        <span class="keyword">if</span>(parent.usedSize &gt;= M)</span><br><span class="line">        &#123;</span><br><span class="line">            spilt(parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cur 父亲节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insertKey</span><span class="params">(<span class="type">int</span> key,BTRNode cur)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//为什么不处理 孩子呢 因为每次插入都是在叶子节点 所以叶子节点孩子都是null</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cur.usedSize-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//往前面找是否有比较之下是小的数 有就在这个数插入 搜索的同时移动后面大的数据</span></span><br><span class="line">            <span class="keyword">if</span>(cur.keys[i] &gt; key)</span><br><span class="line">            &#123;</span><br><span class="line">                cur.keys[i+<span class="number">1</span>] = cur.keys[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.keys[i+<span class="number">1</span>] = key;</span><br><span class="line">        cur.usedSize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到关键字key 返回相应节点的地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 所在节点的地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Pair&lt;BTRNode,Integer&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//遍历的时候 parent 也要变化</span></span><br><span class="line">        <span class="type">BTRNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="type">BTRNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="comment">//这里要遍历的应该是实际有效值的大小</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt; cur.usedSize;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(cur.keys[i]&gt;key)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cur.keys[i] == key)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//找到的时候 返回cur和数据对应的下标</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(cur,i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            parent = cur;</span><br><span class="line">            <span class="comment">//相应路线孩子数组的下标和关键字下标一致</span></span><br><span class="line">            cur = cur.subs[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没找到的时候要把parent返回过去 因为要插到parent的后边 此时还要传一个标记-1 没找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(parent,-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(BTRNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; root.usedSize; ++i)&#123;</span><br><span class="line">            inorder(root.subs[i]);</span><br><span class="line">            System.out.println(root.keys[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.subs[root.usedSize]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//广度遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BFS</span><span class="params">(BTRNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;BTRNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">BTRNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; node.usedSize; i++) &#123;</span><br><span class="line">                System.out.print(node.keys[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; node.usedSize+<span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(node.subs[i]!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    que.offer(node.subs[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyBtree</span> <span class="variable">myBtree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBtree</span>();</span><br><span class="line">        <span class="type">int</span> []array = &#123;<span class="number">53</span>,<span class="number">139</span>,<span class="number">75</span>,<span class="number">49</span>,<span class="number">145</span>,<span class="number">36</span>,<span class="number">101</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            myBtree.insert(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        myBtree.BFS(myBtree.root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        myBtree.inorder(myBtree.root);</span><br><span class="line">        System.out.println(<span class="string">&quot;=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>总结：</p><ol><li>B树实际上是一颗多叉平衡树</li><li>非根节点的关键字数量是[M&#x2F;2-1,M-1] 因为每次满了之后 会靠走一半 9 414 10 514</li><li>非根节点的孩子数量[M&#x2F;2,M]，孩子节点永远比关键字多一个</li><li>所有的叶子节点 都在同一层 所以B树是天然平衡的</li></ol><p>性能分析：</p><p>对于一棵节点为N 度为M的B树，查找和插入需要 log<sub>M-1</sub>N ~ log<sub>M&#x2F;2</sub>N 次比较，这个很好证明：对于度为M的B-<br>树，每一个节点的子节点个数为M&#x2F;2 ~(M-1)之间，因此树的高度应该在要 log<sub>M-1</sub>N和 log<sub>M&#x2F;2</sub>N之间，在定位到该<br>节点后，再采用二分查找的方式可以很快的定位到该元素。<br>B-树的效率是很高的，对于N &#x3D; 62*1000000000个节点，如果度M为1024，则 &lt;&#x3D; 4，即在620亿个元素<br>中，如果这棵树的度为1024，则需要小于4次即可定位到该节点，然后利用二分查找可以快速定位到该元素，大大<br>减少了读取磁盘的次数</p><hr><h3 id="B树的删除"><a href="#B树的删除" class="headerlink" title="B树的删除"></a>B树的删除</h3><p>B树的删除参考《算法导论》和《数据结构-殷人昆》</p><p>删除的时候 如果不够 &lt; M&#x2F;2-1 先跟兄弟借</p><p>如果兄弟节点也不够了 那么要先将父节点的元素移下来 然后对相应的孩子节点进行合并</p><p>合并之后就是新的节点</p><hr><h3 id="B-树-和-B-树"><a href="#B-树-和-B-树" class="headerlink" title="B+树 和 B*树"></a>B+树 和 B*树</h3><p>B+树是B-树的变形，也是一种多路搜索树：</p><ol><li>其定义基本与B-树相同，除了：</li><li><strong>非叶子节点的子树指针与关键字个数相同</strong> –》关键字数量和孩子的数量是一样的</li><li><strong>非叶子节点的子树指针p[i]，指向关键字值属于【k[i]，k[i+1])的子树</strong> –》 孩子都是它的右树</li><li><strong>为所有叶子节点增加一个链指针</strong> –&gt; 所有叶子节点是一个链表</li><li><strong>所有关键字都在叶子节点出现</strong></li></ol><p>B+树的叶子节点 存储了数据data</p><p>非叶子节点只是存储了关键字 </p><p>KV结构的b+树 K–》 非叶子节点 K，V–〉叶子节点</p><p>叶子节点当中存储了数据 链表连接起来的</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312474.png" alt="截屏2024-02-29 21.28.50"></p><p>B+树的搜索与B-树基本相同，区别是B+树只有达到叶子节点才能命中(B-树可以在非叶子节点中命中)，其性能也等<br>价与在关键字全集做一次二分查找。<br>B+树的特性：</p><ol><li>所有关键字都出现在叶子节点的链表中(稠密索引)，且链表中的节点都是有序的。</li><li>不可能在非叶子节点中命中。</li><li>非叶子节点相当于是叶子节点的索引(稀疏索引)，叶子节点相当于是存储数据的数据层。</li><li>更适合文件索引系统</li></ol><p><strong>B+树的插入</strong></p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312475.png"></p><hr><h3 id="B-树"><a href="#B-树" class="headerlink" title="B*树"></a>B*树</h3><p>B*树是B+树的变形，在B+树的非根和非叶子节点再增加指向兄弟节点的指针。</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312476.png" alt="截屏2024-02-29 21.45.14" style="zoom:50%;" /><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312477.png" alt="截屏2024-02-29 22.12.24"></p><hr><h3 id="B树-B-树-B-树的对比总结"><a href="#B树-B-树-B-树的对比总结" class="headerlink" title="B树 B+树 B*树的对比总结"></a>B树 B+树 B*树的对比总结</h3><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312478.png" alt="截屏2024-02-29 22.12.52"></p><hr><h3 id="B树的应用"><a href="#B树的应用" class="headerlink" title="B树的应用"></a>B树的应用</h3><p>B+树 – MySQL索引</p><p>数据库中需要存储大量的数据 那么数据库中的数据都是存到哪？  –》磁盘</p><p>存储分类 易失性存储（带电存储如内存） 非易失性存储（不带电，如磁盘）</p><p>易失 一断电就全部丢失了 </p><p>MySQL一次读16KB的数据 16*1024</p><p>MySQL的默认引擎 InnoDB</p><p>MySQL的数据文件 是以page为单位保存在磁盘当中的</p><p>MySQL的CRUD操作 都需要通过计算 找到对应的插入位置 或者找到要修改或者查询的数据</p><p>只要涉及计算都需要CPU参与 为了便于CPU参与 一定要能够先将数据移动到内存当中</p><p>为了更高的效率 一定要尽可能减少系统和磁盘IO的次数</p><p>索引就是为了减少IO的次数 一眼读取数据</p><p>索引基于表 而不是基于数据库</p><hr><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p>MyISAM引擎是MySQL5.5.8版本之前默认的存储引擎，不支持事务，支持全文检索，使用B+Tree作为索引结构，<br>叶节点的data域存放的是数据记录的地址，其结构如下：</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312479.png" alt="截屏2024-02-29 22.51.11" style="zoom:50%;" /><p>是不是所有的东西 都需要建立索引 当然不是</p><p>上图是以以Col1为主键，MyISAM的示意图，可以看出MyISAM的索引文件仅仅保存数据记录的地址。在MyISAM<br>中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的<br>key可以重复。如果想在Col2上建立一个辅助索引，则此索引的结构如下图所示：</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312480.png" alt="截屏2024-02-29 22.53.00" style="zoom:50%;" /><p>同样也是一棵B+Tree，data域保存数据记录的地址。因此，MyISAM中索引检索的算法为首先按照B+Tree搜索算<br>法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。<br>MyISAM的索引方式也叫做“非聚集索引”的</p><p><strong>非聚集索引 -》 非聚簇索引 索引文件和数据文件不在一块</strong></p><p><strong>聚集索引就是存放的物理顺序和列中的顺序一样。一般设置主键索引就为聚集索引</strong></p><hr><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p>InnoDB存储引擎支持事务，其设计目标主要面向在线事务处理的应用，从MySQL数据库5.5.8版本开始，InnoDB<br>存储引擎是默认的存储引擎。InnoDB支持B+树索引、全文索引、哈希索引。但InnoDB使用B+Tree作为索引结构<br>时，具体实现方式却与MyISAM截然不同。<br>第一个区别是InnoDB的数据文件本身就是索引文件。MyISAM索引文件和数据文件是分离的，索引文件仅保存数<br>据记录的地址。而InnoDB索引，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保<br>存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引</p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312481.png" alt="截屏2024-02-29 22.55.48" style="zoom:50%;" /><p>上图是InnoDB主索引（同时也是数据文件）的示意图，可以看到叶节点包含了完整的数据记录，这种索引叫做聚<br>集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果<br>没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则<br>MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。<br>第二个区别是InnoDB的辅助索引data域存储相应记录主键的值而不是地址,所有辅助索引都引用主键作为data<br>域。</p><p><strong>InnoDB属于聚集索引 索引文件和数据文件是在一起的</strong></p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312482.png" alt="截屏2024-02-29 22.56.36" style="zoom:50%;" /><p>聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得<br>主键，然后用主键到主索引中检索获得记录。</p><p><strong>此时辅助索引当中的data域不是一条完整的数据 只是存储的是主键 所以如果要寻找这个主键的所有数据 必须 拿着这个主键继续查找</strong></p><p><strong>如果按照主键建立索引 效率非常高 如果辅助索引 效率反而不高</strong></p><p>问题：既然在表格上建立索引可以提高搜索效率，那是否可以在一个表格上任意建立索引？<br><a href="http://www.cnblogs.com/yangecnu/p/Introduce-B-Tree-and-B-Plus-Tree.html">http://www.cnblogs.com/yangecnu/p/Introduce-B-Tree-and-B-Plus-Tree.html</a> <a href="http://www.cnblogs.com/oldho">http://www.cnblogs.com/oldho</a><br>rse&#x2F;archive&#x2F;2009&#x2F;11&#x2F;16&#x2F;1604009.html <a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a><br>数据库的底层原理</p><hr><h3 id="索引该用哪种数据结构？"><a href="#索引该用哪种数据结构？" class="headerlink" title="索引该用哪种数据结构？"></a>索引该用哪种数据结构？</h3><ol><li><p>红黑树高度太高</p></li><li><p>链表线性表 空间复杂度太高</p></li><li><p><strong>哈希表其实只能实现 是或者不是</strong></p></li></ol><p>​<strong>where id &#x3D; ？可以</strong></p><p>​<strong>where ID&gt;15 不可 不适合范围查找</strong></p><ol start="4"><li>为什么用B+树 而不是用B树？</li></ol><p>​<strong>B+树非叶子节点不存储data 这样一个节点可以存储更多的key 可以使得树更矮 所以IO操作更少</strong></p><p>​<strong>叶子节点相连 更便于进行范围查找</strong></p><hr><h3 id="课堂板书："><a href="#课堂板书：" class="headerlink" title="课堂板书："></a>课堂板书：</h3><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312483.png" alt="截屏2024-02-29 23.10.27" style="zoom:150%;" /><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402292312484.png" alt="2022-07-19-B树"></p><hr><h3 id="MySQL-常见面试题"><a href="#MySQL-常见面试题" class="headerlink" title="MySQL 常见面试题"></a>MySQL 常见面试题</h3><p><a href="https://zhuanlan.zhihu.com/p/59838091">https://zhuanlan.zhihu.com/p/59838091</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;B树&quot;&gt;&lt;a href=&quot;#B树&quot; class=&quot;headerlink&quot; title=&quot;B树&quot;&gt;&lt;/a&gt;B树&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;B-树： 不要读作B减树 这个-是分隔符 意思是 多叉平衡树&lt;/p&gt;
&lt;p&gt;二叉搜索树 AVL树 红黑树 都是二叉的&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>LRUCache</title>
    <link href="http://example.com/2024/02/27/LRUCache/"/>
    <id>http://example.com/2024/02/27/LRUCache/</id>
    <published>2024-02-27T03:38:08.000Z</published>
    <updated>2024-02-27T03:39:40.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LRU-Cache"><a href="#LRU-Cache" class="headerlink" title="LRU Cache"></a>LRU Cache</h2><hr><h3 id="LRU-Cache概念"><a href="#LRU-Cache概念" class="headerlink" title="LRU Cache概念"></a>LRU Cache概念</h3><p>LRU是Least Recently Used的缩写，意思是最近最少使用，它是一种Cache替换算法。</p><p> 什么是Cache？狭义的Cache指的是位于CPU和主存间的快速RAM， 通常它不像系统主存那样使用DRAM技术，而使用昂贵但较快速的SRAM技术。 广义上的Cache指的是位于速度相差较大的两种硬件之间， 用于协调两者数据传输速度差异的结构。</p><p>除了CPU与主存之间有Cache， 内存与硬盘之间也有Cache，乃至在硬盘与网络之间也有某种意义上的Cache── 称为Internet临时文件夹或网络内容缓存等。<br><strong>Cache的容量有限，因此当Cache的容量用完后，而又有新的内容需要添加进来时， 就需要挑选并舍弃原有<br>的部分内容，从而腾出空间来放新内容。LRU Cache 的替换原则就是将最近最少使用的内容替换掉。</strong></p><p>其实，LRU译成最久未使用会更形象， 因为该算法每次替换掉的就是一段时间内最久没有使用过的内容。</p><p>实现LRU Cache的方法和思路很多，但是要保持高效实现O(1)的put和get，那么使用双向链表（删除速度快）和哈希表（快速定位）的搭配是最高效和经典的。使用双向链表是因为双向链表可以实现任意位置O(1)的插入和删除，使用哈希表是因为哈希表的增删查改也是O(1)</p><p>这里的链表是拿来记录插入时的顺序的 并不是用来处理hash冲突的</p><hr><p><a href="https://leetcode.cn/problems/lru-cache/description/">实现LRUCache的相应OJ题</a></p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402271137586.png" alt="LRUCache OJ" style="zoom:50%;" /><h3 id="通过继承JDK的LinkedHashMap实现LRUCache"><a href="#通过继承JDK的LinkedHashMap实现LRUCache" class="headerlink" title="通过继承JDK的LinkedHashMap实现LRUCache"></a>通过继承JDK的LinkedHashMap实现LRUCache</h3><p>JDK中有一个与LRUCache很相似的结构就是LinkedHashMap 但是构造方法 要将accessOrder设置为true</p><p>同时还需要重写 removeEldestEntry这个方法 使每次固定大小满的时候插入 能删除最少使用节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLinkedHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">      LinkedHashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(<span class="number">16</span>,<span class="number">0.7f</span>,<span class="literal">true</span>);</span><br><span class="line">      map.put(<span class="string">&quot;ugly&quot;</span>, <span class="number">1</span>);</span><br><span class="line">      map.put(<span class="string">&quot;world&quot;</span>, <span class="number">4</span>);</span><br><span class="line">      map.put(<span class="string">&quot;fuck u&quot;</span>, -<span class="number">5</span>);</span><br><span class="line">      map.put(<span class="string">&quot;piece of shit&quot;</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这里去一次fuck u之后再输出 节点放置的位置不同 从原来的链表拿起来放到最后了</span></span><br><span class="line">      System.out.println(map);</span><br><span class="line">      System.out.println(map.get(<span class="string">&quot;fuck u&quot;</span>));</span><br><span class="line">      System.out.println(map);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402271137587.png" alt="截屏2024-02-26 22.46.42 " style="zoom:50%;" /><p>LinkedHashMap()构造方法 accessOrder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                     <span class="type">float</span> loadFactor,</span></span><br><span class="line"><span class="params">                     <span class="type">boolean</span> accessOrder)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    <span class="built_in">this</span>.accessOrder = accessOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置为true时 会把常用的数据 放到尾巴 而双向链表的头部就是最少用的节点</p><p>为false时 什么也不会做 就是维持默认的插入顺序</p><p><strong>继承LinkedHashMap实现LRUCache解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;Integer,Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">           <span class="built_in">super</span>(capacity,<span class="number">0.75f</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getOrDefault(key,-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.put(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer,Integer&gt; eldest)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> size()&gt;capacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><h3 id="自己实现LRUCache"><a href="#自己实现LRUCache" class="headerlink" title="自己实现LRUCache"></a>自己实现LRUCache</h3><p>核心： 就是最常使用的节点要在双向链表的最尾端 最少使用的节点放在双向链表的最头端</p><p>底层是由一个hashMap关键字就是节点的key字段 然后值就是节点本身 用于快速定位节点 查找的时候最快（缓存就是为了提高查询速度），还有一个双向链表用于记录最常使用和最少使用 </p><p>还要注意缓存的大小是固定的 如果满了还插入就是要把最少使用的节点踢出去 然后加入新节点在最尾端</p><p>注意LRUCache的双向链表是使用尾插法插入</p><p>下面是实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> HighOrderDS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DLinkNode</span>&#123;</span><br><span class="line">        <span class="comment">//双向链表的节点</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> key;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">        <span class="comment">//后继</span></span><br><span class="line">        <span class="keyword">public</span> DLinkNode next;</span><br><span class="line">        <span class="comment">//前驱</span></span><br><span class="line">        <span class="keyword">public</span> DLinkNode prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为这里是带头尾节点的双向链表</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkNode</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkNode</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> val)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> key+<span class="string">&quot;=&quot;</span>+val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双向链表的头节点</span></span><br><span class="line">    <span class="keyword">public</span> DLinkNode head;</span><br><span class="line">    <span class="comment">//双向链表的尾节点</span></span><br><span class="line">    <span class="keyword">public</span> DLinkNode tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> usedSize;<span class="comment">//双向链表当中 有效的数据节点个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//map要存一份 好找</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer,DLinkNode&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> capacity;<span class="comment">//容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLRUCache</span><span class="params">(<span class="type">int</span> capacity)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化双向链表</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">DLinkNode</span>();</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="keyword">new</span> <span class="title class_">DLinkNode</span>();</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">        <span class="comment">//有空头节点 和 空尾节点 那么之后插入的时候就不用判断了</span></span><br><span class="line">        <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先要查找当前的key是否有存储过</span></span><br><span class="line"><span class="comment">     * 1. 如果存储过</span></span><br><span class="line"><span class="comment">     *  更新key对应的value</span></span><br><span class="line"><span class="comment">     *  然后将该节点 移动到尾巴处 因为这个是新插入的数据</span></span><br><span class="line"><span class="comment">     * 2. 没有存储过</span></span><br><span class="line"><span class="comment">     *   需要实例化一个节点</span></span><br><span class="line"><span class="comment">     *   存储到map当中一份</span></span><br><span class="line"><span class="comment">     *   把该节点存储到尾巴</span></span><br><span class="line"><span class="comment">     *   检查当前双向链表的有效数据个数 是不是超过了capacity</span></span><br><span class="line"><span class="comment">     *   如果超过了 就需要移除头部的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">DLinkNode</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//没有存储过</span></span><br><span class="line">            <span class="comment">//先实例化</span></span><br><span class="line">            <span class="type">DLinkNode</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DLinkNode</span>(key,val);</span><br><span class="line">            map.put(key,tmp);</span><br><span class="line">            <span class="comment">//将节点插入链表尾部</span></span><br><span class="line">            addTail(tmp);</span><br><span class="line">            usedSize++;</span><br><span class="line">            <span class="keyword">if</span>(usedSize&gt;capacity)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">DLinkNode</span> <span class="variable">headNext</span> <span class="operator">=</span> head.next;</span><br><span class="line">                <span class="comment">//如果超限 这里就要清除最少使用元素 也就是头部节点</span></span><br><span class="line">                removeHead();</span><br><span class="line">                <span class="comment">//同时还要将哈希表中的节点同步删除</span></span><br><span class="line">                map.remove(headNext.key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//存储过</span></span><br><span class="line">            <span class="comment">//1. 更新这个key对应的value</span></span><br><span class="line">            map.get(key).val = val;</span><br><span class="line">            <span class="comment">//2. 把这个节点放到链表的最末端</span></span><br><span class="line">            moveToTail(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问当前的key</span></span><br><span class="line"><span class="comment">     *      逻辑：把你访问的节点放到尾巴</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先从哈希表中找到目标节点</span></span><br><span class="line">        <span class="type">DLinkNode</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//找不到目标节点 返回-1标志</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把访问的节点放到尾巴 之后返回值</span></span><br><span class="line">        moveToTail(node);</span><br><span class="line">        <span class="keyword">return</span> node.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先删除 后添加到尾部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 操作的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToTail</span><span class="params">(DLinkNode node)</span> &#123;</span><br><span class="line">        <span class="comment">//把节点从原来的位置删出来</span></span><br><span class="line">        removeNode(node);</span><br><span class="line">        <span class="comment">//再插入尾部</span></span><br><span class="line">       addTail(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(DLinkNode node)</span> &#123;</span><br><span class="line">        <span class="type">DLinkNode</span> <span class="variable">nodePrev</span> <span class="operator">=</span> node.prev;</span><br><span class="line">        <span class="type">DLinkNode</span> <span class="variable">nodeNext</span> <span class="operator">=</span> node.next;</span><br><span class="line">        nodePrev.next = nodeNext;</span><br><span class="line">        nodeNext.prev = nodePrev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除头部节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeHead</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">DLinkNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">if</span>(next!=<span class="literal">null</span> &amp;&amp; next.next!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            next.next.prev = head;</span><br><span class="line">            head.next = next.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾插法将新建节点插入双向链表尾部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 新建节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addTail</span><span class="params">(DLinkNode node)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//这里的尾节点并不只是一个引用 而是一个实例化的空节点</span></span><br><span class="line">        node.prev = tail.prev;</span><br><span class="line">        node.next = tail;</span><br><span class="line">        tail.prev.next = node;</span><br><span class="line">        tail.prev = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;, &quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="type">DLinkNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span>(cur!=tail)</span><br><span class="line">        &#123;</span><br><span class="line">            sj.add(cur.toString());</span><br><span class="line">            <span class="comment">//记得在这里迭代</span></span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyLRUCache</span> <span class="variable">myLRUCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLRUCache</span>(<span class="number">3</span>);</span><br><span class="line">        myLRUCache.put(<span class="number">100</span>,<span class="number">99</span>);</span><br><span class="line">        myLRUCache.put(<span class="number">11</span>,<span class="number">34</span>);</span><br><span class="line">        myLRUCache.put(<span class="number">57</span>,<span class="number">66</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;LRU与LinkedHashMap相同 遍历时会将元素按照插入顺序输出&quot;</span>);</span><br><span class="line">        System.out.println(myLRUCache);</span><br><span class="line">        System.out.println(myLRUCache.get(<span class="number">11</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取关键码为11的元素之后，LRU算法会将这个对应的节点放到尾部 标记为最常使用元素&quot;</span>);</span><br><span class="line">        System.out.println(myLRUCache);</span><br><span class="line">        myLRUCache.put(<span class="number">18</span>,<span class="number">28</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;此时插入元素之后容量超过上限 会从缓存中删除最少使用的元素，再将当前元素插入&quot;</span>);</span><br><span class="line">        System.out.println(myLRUCache);</span><br><span class="line">        myLRUCache.put(<span class="number">57</span>,<span class="number">88</span>);</span><br><span class="line">        System.out.println(myLRUCache);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="课堂板书："><a href="#课堂板书：" class="headerlink" title="课堂板书："></a>课堂板书：</h4><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402271137588.png" alt="LRU1" style="zoom:50%;" /> <img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402271137589.png" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LRU-Cache&quot;&gt;&lt;a href=&quot;#LRU-Cache&quot; class=&quot;headerlink&quot; title=&quot;LRU Cache&quot;&gt;&lt;/a&gt;LRU Cache&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;LRU-Cache概念&quot;&gt;&lt;a href=&quot;#LRU-Cache</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="http://example.com/2024/02/26/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://example.com/2024/02/26/%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2024-02-26T11:21:40.000Z</published>
    <updated>2024-06-10T10:15:04.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><hr><h3 id="并查集概念"><a href="#并查集概念" class="headerlink" title="并查集概念"></a>并查集概念</h3><p>在一些应用问题中，需要将n个不同的元素划分成一些不相交的集合。开始时，每个元素自成一个单元素集<br>合，然后按一定的规律将归于同一组元素的集合合并。在此过程中要反复用到查询某一个元素归属于那个集<br>合的运算。适合于描述这类问题的抽象数据类型称为<strong>并查集(union-find set)</strong></p><p>应用 判断亲戚</p><p>判断给的两个数字 是不是在同一个集合</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402261920430.png"></p><hr><h3 id="并查集实现："><a href="#并查集实现：" class="headerlink" title="并查集实现："></a>并查集实现：</h3><p><a href="https://www.luogu.com.cn/problem/P1551#">亲戚原题</a></p><h4 id="题目背景："><a href="#题目背景：" class="headerlink" title="题目背景："></a>题目背景：</h4><p>若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。</p><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>规定：$x$ 和 $y$ 是亲戚，$y$ 和 $z$ 是亲戚，那么 $x$ 和 $z$ 也是亲戚。如果 $x$，$y$ 是亲戚，那么 $x$ 的亲戚都是 $y$ 的亲戚，$y$ 的亲戚也都是 $x$ 的亲戚。</p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>第一行：三个整数 $n,m,p$，（$n,m,p \le 5000$），分别表示有 $n$ 个人，$m$ 个亲戚关系，询问 $p$ 对亲戚关系。</p><p>以下 $m$ 行：每行两个数 $M_i$，$M_j$，$1 \le M_i,~M_j\le n$，表示 $M_i$ 和 $M_j$ 具有亲戚关系。</p><p>接下来 $p$ 行：每行两个数 $P_i,P_j$，询问 $P_i$ 和 $P_j$ 是否具有亲戚关系。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>$p$ 行，每行一个 <code>Yes</code> 或 <code>No</code>。表示第 $i$ 个询问的答案为“具有”或“不具有”亲戚关系。</p><h4 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6 5 3</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">3 4</span><br><span class="line">5 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">5 6</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionFindSet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> []elems;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFindSet</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.elems = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(elems,-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> x2)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">root1</span> <span class="operator">=</span> findRoot(x1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">root2</span> <span class="operator">=</span> findRoot(x2);</span><br><span class="line">        <span class="keyword">if</span>(root1 == root2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        elems[root1] = elems[root1]+elems[root2];</span><br><span class="line">        elems[root2] = root1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRoot</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;数组越界&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(elems[x]&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x = elems[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameUnion</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> x2)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">root1</span> <span class="operator">=</span> findRoot(x1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">root2</span> <span class="operator">=</span> findRoot(x2);</span><br><span class="line">        <span class="keyword">return</span> root1 == root2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> n,m,p;</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        p = sc.nextInt();</span><br><span class="line">        <span class="type">UnionFindSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFindSet</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m1</span> <span class="operator">=</span> sc.nextInt()-<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m2</span> <span class="operator">=</span> sc.nextInt()-<span class="number">1</span>;</span><br><span class="line">            set.union(m1,m2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m1</span> <span class="operator">=</span> sc.nextInt()-<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m2</span> <span class="operator">=</span> sc.nextInt()-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(set.isSameUnion(m1,m2))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="求省份数量："><a href="#求省份数量：" class="headerlink" title="求省份数量："></a>求省份数量：</h3><p><a href="https://leetcode.cn/problems/number-of-provinces/">省份数量</a></p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402261920431.png" alt="截屏2024-02-26 18.09.54" style="zoom:50%;" /><p>AC代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UnionFindSet</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> [] elems;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> usedSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UnionFindSet</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.elems = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            Arrays.fill(elems,-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRoot</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;下标越界&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(elems[x]&gt;=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x = elems[x];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 合并操作 合并的是根节点 两个都是根节点 需要找根节点</span></span><br><span class="line"><span class="comment">        * 1。 分别找到当前x1和x2的根节点</span></span><br><span class="line"><span class="comment">        * 2. 找到根节点 根节点对应的数值相加 index2对应的值 变为 index1 --》 合并到index1中</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> x2)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">root1</span> <span class="operator">=</span> findRoot(x1);</span><br><span class="line">            <span class="type">int</span> <span class="variable">root2</span> <span class="operator">=</span> findRoot(x2);</span><br><span class="line">            <span class="keyword">if</span>(root1 == root2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            elems[root1] = elems[root1]+elems[root2];</span><br><span class="line">            elems[root2] = root1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x:elems)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 查询x1 x2是否在同一个集合中</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameUnionFindSet</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> x2)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> findRoot(x1);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> findRoot(x2);</span><br><span class="line">            <span class="keyword">return</span> index2 == index1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCircleNum</span><span class="params">(<span class="type">int</span>[][] isConnected)</span> &#123;</span><br><span class="line">        <span class="type">UnionFindSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFindSet</span>(isConnected.length);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;isConnected.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;isConnected.length;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(isConnected[i][j]==<span class="number">1</span> &amp;&amp; i!=j)</span><br><span class="line">                &#123;</span><br><span class="line">                    set.union(i,j);</span><br><span class="line">                    <span class="keyword">if</span>(isConnected[j][i] == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        isConnected[j][i] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isConnected.length-set.getCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用并查集 从关系建立并查集 然后查看有几个集合 –》 得到的就是多少个省份</p><hr><h3 id="等式方程的可满足性："><a href="#等式方程的可满足性：" class="headerlink" title="等式方程的可满足性："></a>等式方程的可满足性：</h3><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402261920432.png" alt="题目" style="zoom:50%;" /><ol><li>若str.charAt(1) &#x3D;&#x3D; ‘&#x3D;’ 遇到等号 进行合并</li><li>遇到不等号 检查当前的str[0].charAt(0) 和 str[0].charAt(3) 是不是在同一个集合 如果不满足就直接返回false</li></ol><p>怎么建立 等式方程 字符要与并查集的下标一一对应?</p><p> 首先这里我们要看清楚题目的条件 字符出现的可能 这里只有小写字母可能会出现 所以就直接用字母表映射 那么并查集就直接设置大小为26就好 映射关系就为 ch - ‘a’</p><p>能不能建立完相等关系再来确定不等关系? 这个题目确实是需要这样才能完成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UnionFindSet</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> [] elems;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> usedSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UnionFindSet</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.elems = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            Arrays.fill(elems,-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRoot</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;下标越界&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(elems[x]&gt;=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x = elems[x];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 合并操作 合并的是根节点 两个都是根节点 需要找根节点</span></span><br><span class="line"><span class="comment">        * 1。 分别找到当前x1和x2的根节点</span></span><br><span class="line"><span class="comment">        * 2. 找到根节点 根节点对应的数值相加 index2对应的值 变为 index1 --》 合并到index1中</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> x2)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">root1</span> <span class="operator">=</span> findRoot(x1);</span><br><span class="line">            <span class="type">int</span> <span class="variable">root2</span> <span class="operator">=</span> findRoot(x2);</span><br><span class="line">            <span class="keyword">if</span>(root1 == root2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            elems[root1] = elems[root1]+elems[root2];</span><br><span class="line">            elems[root2] = root1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x:elems)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 查询x1 x2是否在同一个集合中</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameUnionFindSet</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> x2)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> findRoot(x1);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> findRoot(x2);</span><br><span class="line">            <span class="keyword">return</span> index2 == index1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equationsPossible</span><span class="params">(String[] equations)</span> &#123;</span><br><span class="line">        <span class="comment">//都是小写字母 所以有26个即可</span></span><br><span class="line">        <span class="type">UnionFindSet</span> <span class="variable">ufs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFindSet</span>(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; equations.length; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">op</span> <span class="operator">=</span> equations[i].charAt(<span class="number">1</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch1</span> <span class="operator">=</span> equations[i].charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> equations[i].charAt(<span class="number">3</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> ch1-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> ch2-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ufs.union(index1,index2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; equations.length; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">op</span> <span class="operator">=</span> equations[i].charAt(<span class="number">1</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch1</span> <span class="operator">=</span> equations[i].charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> equations[i].charAt(<span class="number">3</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> ch1-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> ch2-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="string">&#x27;!&#x27;</span> &amp;&amp; ufs.isSameUnionFindSet(index1,index2))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;并查集概念&quot;&gt;&lt;a href=&quot;#并查集概念&quot; class=&quot;headerlink&quot; title=&quot;并查集概念&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>位图&amp;布隆过滤器&amp;海量数据</title>
    <link href="http://example.com/2024/02/25/%E4%BD%8D%E5%9B%BE-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8-%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2024/02/25/%E4%BD%8D%E5%9B%BE-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8-%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/</id>
    <published>2024-02-25T12:51:36.000Z</published>
    <updated>2024-02-26T01:36:38.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="位图-布隆过滤器-海量数据面试题-【哈希的应用】"><a href="#位图-布隆过滤器-海量数据面试题-【哈希的应用】" class="headerlink" title="位图&amp;布隆过滤器&amp;海量数据面试题 【哈希的应用】"></a>位图&amp;布隆过滤器&amp;海量数据面试题 【哈希的应用】</h2><hr><h4 id="BitSet概念及自定义实现："><a href="#BitSet概念及自定义实现：" class="headerlink" title="BitSet概念及自定义实现："></a>BitSet概念及自定义实现：</h4><p>位图：有些资料叫bitMap</p><p>给40亿个不重复的无符号整数，没排过序。给一个无符号整数，如何快速判断一个数是否在这40亿个数<br>中。【腾讯】</p><p>40亿个字节 4个G</p><p>40亿个整数 16G</p><p>解法一：遍历 时间复杂度 O(N)</p><p>解法二：排序 + 二分查找 O(N*logN+logN)  面临问题 内存放不下</p><p>用位来存储数据 一个位表示一个数 0表示不存在 1表示存在</p><p>一个字节 8 个比特位 </p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402252050603.png" alt="CT-20240223084327"></p><p>内存的利用效率非常高</p><p>40亿个不重复的无符号整型用位图存储 –》 存储空间512MB</p><p>实现位图 byte[]</p><p>arrayIndex &#x3D; num&#x2F;8 数组的下标</p><p>num % 8 求出数据在具体数组位置的下标</p><p>所谓位图，就是用每一位来存放某种状态，适用于海量数据，整数，数据无重复的场景。通常是用来判<br>断某个数据存不存在的。</p><p>源码用的是long[]. 这里我们用的是byte[]</p><p>用相应的映射关系表示状态</p><p><a href="https://blog.csdn.net/kongmin_123/article/details/82225172?utm_term=bitset%E5%AE%9E%E7%8E%B0java&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-1-82225172&spm=3001.4430">BitSet的实现原理博客</a></p><p><strong>自定义BitSet代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> HighOrderDS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> test1215.UserNeighborhood;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBitSet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] elem;</span><br><span class="line">    <span class="comment">//记录当前位图当中存在了多少个有效的数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> usedSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBitSet</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.elem = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定位数初始化位图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 表示需要多少个位</span></span><br><span class="line"><span class="comment">     * 有可能会多给一个字节 但是无所谓</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBitSet</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.elem = <span class="keyword">new</span> <span class="title class_">byte</span>[n/<span class="number">8</span>+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置某一位为1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 对应的数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">arrayIndex</span> <span class="operator">=</span> val/<span class="number">8</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bitIndex</span> <span class="operator">=</span> val%<span class="number">8</span>;</span><br><span class="line">        <span class="comment">//如果arrayIndex 比 数组长度要大 或者等于数组长度了 此时就需要扩容了 不然会发生数组越界</span></span><br><span class="line">        <span class="keyword">if</span>(arrayIndex &gt;= elem.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//扩容</span></span><br><span class="line">            <span class="built_in">this</span>.elem = Arrays.copyOf(elem, arrayIndex + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要精确到位 这里就要使用位运算 用或来插入新数据 同时不会损失旧数据</span></span><br><span class="line">        elem[arrayIndex] |= (<span class="type">byte</span>) (<span class="number">1</span>&lt;&lt;bitIndex); <span class="comment">//不能进行异或 逻辑上错误</span></span><br><span class="line">        <span class="comment">//比如插入12 12/8 = 1 12 %8 = 4</span></span><br><span class="line">        <span class="comment">//原本elem[1] = 0 0 0 0 0 0 0 0</span></span><br><span class="line">        <span class="comment">//1用byte表示 0 0 0 0 0 0 0 1</span></span><br><span class="line">        <span class="comment">//要将1变为4 左移4位即可</span></span><br><span class="line">        <span class="comment">//4: 0 0 0 1 0 0 0 0</span></span><br><span class="line">        <span class="comment">//或运算之后得 0 0 0 1 0 0 0 0</span></span><br><span class="line">        usedSize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录当前位图中记录的元素的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUsedSize</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> usedSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前位 是不是1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 位数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//检查这一位是1还是0</span></span><br><span class="line">        <span class="comment">//1存在 0不存在</span></span><br><span class="line">        <span class="keyword">if</span>(val &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">arrayIndex</span> <span class="operator">=</span> val /<span class="number">8</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bitIndex</span> <span class="operator">=</span> val %<span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span>(arrayIndex &gt;= elem.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">tmp</span> <span class="operator">=</span> (<span class="type">byte</span>) (<span class="number">1</span>&lt;&lt;bitIndex);</span><br><span class="line">        <span class="comment">//这里进行与运算 结果 放到tmp中</span></span><br><span class="line">        tmp &amp;= elem[arrayIndex];</span><br><span class="line">        <span class="comment">//不为0 就表示这一位是存在的</span></span><br><span class="line">        <span class="keyword">return</span> tmp != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把某一位重置为0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">arrayIndex</span> <span class="operator">=</span> val /<span class="number">8</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bitIndex</span> <span class="operator">=</span> val %<span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span>(arrayIndex &gt;= elem.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//异或不行 假设原来这个地方原来就是0 现在反而还把他改成1了</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">tmp</span> <span class="operator">=</span> (<span class="type">byte</span>) (<span class="number">1</span>&lt;&lt;bitIndex);</span><br><span class="line">        <span class="comment">//按位取反操作</span></span><br><span class="line">        <span class="comment">//假设要重置的位是12 12 %8 = 4 12/8 =1</span></span><br><span class="line">        <span class="comment">//elem[1] = 0 0 0 1 0 0 0 0</span></span><br><span class="line">        <span class="comment">//tmp = 0 0 0 1 0 0 0 0</span></span><br><span class="line">        <span class="comment">//~tmp = 1 1 1 0 1 1 1 1</span></span><br><span class="line">        <span class="comment">//进行与运算 得到 0 0 0 0 0 0 0 0 指定位置重置成功</span></span><br><span class="line">        tmp = (<span class="type">byte</span>) ~tmp;</span><br><span class="line">        elem[arrayIndex] &amp;= tmp;</span><br><span class="line">        usedSize--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用位图给数据排序 也就是输出</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;, &quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="comment">//排序 升序序列</span></span><br><span class="line">        <span class="comment">//遍历字节数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; elem.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>((elem[i] &amp; (<span class="number">1</span>&lt;&lt;j))!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//说明该位置上存在数 那么输出 该比特位为1</span></span><br><span class="line">                    sj.add(String.valueOf(i*<span class="number">8</span>+j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []array = &#123;<span class="number">78</span>,<span class="number">9</span>,<span class="number">21</span>,<span class="number">33</span>,<span class="number">20</span>,<span class="number">17</span>,<span class="number">66</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">52</span>&#125;;</span><br><span class="line">        <span class="type">MyBitSet</span> <span class="variable">bitSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBitSet</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            bitSet.set(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(bitSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="BitSet的应用："><a href="#BitSet的应用：" class="headerlink" title="BitSet的应用："></a>BitSet的应用：</h4><ol><li>快速查找某个数据是否在一个集合中（BitSet查找某一个元素是否存在极快，整个操作下来只需要O(N),且建立好了集合）</li><li>排序 + 去重 （插入时重复的元素只会保留一个 排序 直接按照位置输出）</li><li>求两个集合的交集、并集等 （去重性）</li><li>操作系统中磁盘块标记</li></ol><hr><h4 id="布隆过滤器："><a href="#布隆过滤器：" class="headerlink" title="布隆过滤器："></a>布隆过滤器：</h4><p>一般来讲，计算机中的集合是用哈希表（hash table）来存储的。它的好处是快速准确，缺点是费存储空<br>间。当集合比较小时，这个问题不显著，但是当集合巨大时，哈希表存储效率低的问题就显现出来了。</p><ol><li>用哈希表存储用户记录，缺点：浪费空间</li><li>用位图存储用户记录，缺点：位图一般只能处理整形，如果内容编号是字符串，就无法处理了。</li><li>将哈希与位图结合，即布隆过滤器</li></ol><p>布隆过滤器是由布隆（Burton Howard Bloom）在1970年提出的 一种紧凑型的、比较巧妙的概率型数据结<br>构，特点是高效地插入和查询，可以用来告诉你 &#x3D;&#x3D;“某样东西一定不存在或者可能存在”&#x3D;&#x3D;，它是用&#x3D;&#x3D;多个哈希函&#x3D;&#x3D;<br>&#x3D;&#x3D;数&#x3D;&#x3D;，将一个数据映射到位图结构中。此种方式不仅可以提升查询效率，也可以节省大量的内存空间。</p><p>为什么不是一定存在？</p><p>字符串通过多个hash函数 映射到相关位置 改变相关位置状态码 （存放）</p><p>此时再来一个字符串 我要确认是否存在这个词 那我就用之前对应的多个hash函数去映射到相关位置 看状态码 如果状态码均为1 则这个词是可能存在的（因为之前存放的时候 或者 现在查找的时候 可能会有hash碰撞）</p><p>如果找到对应状态码为0 – 》 这个词是一定不在数据集中的</p><p>确定存在的时候 –〉 可能会产生误判 （因此 有一个误判域）</p><p>为什么这里要多个hash函数？ 目的就是为了避免hash冲突</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402252050604.png" alt="布隆过滤器的可能性"></p><p>布隆过滤器 没有存储当前的数据</p><p>传统的布隆过滤器 不支持删除操作 因为删除就是重置对应的状态码 但是可能会出现hash碰撞 因此就是会把其他的字符串可能也删除</p><hr><h3 id="自己实现一个布隆过滤器"><a href="#自己实现一个布隆过滤器" class="headerlink" title="自己实现一个布隆过滤器"></a>自己实现一个布隆过滤器</h3><p>布隆过滤器 插入 和 查找 的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> HighOrderDS;</span><br><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBloomFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SimpleHash</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> cap;<span class="comment">//当前容量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> seed;<span class="comment">//随机种子</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SimpleHash</span><span class="params">(<span class="type">int</span> cap,<span class="type">int</span> seed)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.cap = cap;</span><br><span class="line">            <span class="built_in">this</span>.seed = seed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据seed的不同  创建不同的hash函数</span></span><br><span class="line">        <span class="type">int</span> <span class="title function_">hash</span><span class="params">(String key)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> h;</span><br><span class="line">            <span class="comment">//这里是要得到一个hash值</span></span><br><span class="line">            <span class="comment">//seed*(cap-1) 这里不一样 那么生成的hash函数也就不一样</span></span><br><span class="line">            <span class="keyword">return</span> (key == <span class="literal">null</span> )? <span class="number">0</span> : seed*(cap-<span class="number">1</span>) &amp; ((h = key.hashCode())^(h&gt;&gt;&gt;<span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认的位图容量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_SIZE</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//位图</span></span><br><span class="line">    <span class="keyword">public</span> BitSet bitSet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录存储了多少个数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> usedSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机种子 hash函数多个</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> []seeds = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">33</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储hash函数的数组</span></span><br><span class="line">    <span class="keyword">public</span> SimpleHash[] simpleHashes;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBloomFilter</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        bitSet = <span class="keyword">new</span> <span class="title class_">BitSet</span>(DEFAULT_SIZE);</span><br><span class="line">        <span class="comment">//hash函数的个数 主要是由 位图容量 和 随机种子个数共同决定的</span></span><br><span class="line">        simpleHashes = <span class="keyword">new</span> <span class="title class_">SimpleHash</span>[seeds.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; simpleHashes.length; i++) &#123;</span><br><span class="line">            simpleHashes[i] = <span class="keyword">new</span> <span class="title class_">SimpleHash</span>(DEFAULT_SIZE,seeds[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素 到布隆过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//让3个hash函数分别处理当前的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; simpleHashes.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bitIndex</span> <span class="operator">=</span> simpleHashes[i].hash(val);</span><br><span class="line">            <span class="comment">//把他们都存储在位图当中即可</span></span><br><span class="line">            bitSet.set(bitIndex);</span><br><span class="line">            usedSize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含val。这里会存在一定的误判</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//查看val时 也是根据这几个hash函数 看对应的位置状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; simpleHashes.length; i++) &#123;</span><br><span class="line">            <span class="comment">//只要有一个为0 那么肯定不存在</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">bitIndex</span> <span class="operator">=</span> simpleHashes[i].hash(val);</span><br><span class="line">            <span class="keyword">if</span>(!bitSet.get(bitIndex))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//时间复杂度 O(1)</span></span><br><span class="line">        <span class="type">MyBloomFilter</span> <span class="variable">myBloomFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBloomFilter</span>();</span><br><span class="line">        myBloomFilter.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        myBloomFilter.add(<span class="string">&quot;hello2&quot;</span>);</span><br><span class="line">        myBloomFilter.add(<span class="string">&quot;bit&quot;</span>);</span><br><span class="line">        myBloomFilter.add(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(myBloomFilter.usedSize);<span class="comment">//4 *6 = 24 共映射了24次</span></span><br><span class="line">        System.out.println(myBloomFilter.contains(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">        System.out.println(myBloomFilter.contains(<span class="string">&quot;hello3&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> HighOrderDS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.BloomFilter;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Funnels;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试google提供的布隆过滤器 误判率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">1000000</span>;<span class="comment">//预计要插入多少数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">fpp</span> <span class="operator">=</span> <span class="number">0.01</span>;<span class="comment">//期望的误判率</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size, fpp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//插入数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//添加到 布隆过滤器</span></span><br><span class="line">            bloomFilter.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//理论上 这些数据不会出现在布隆过滤器当中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1000000</span>; i &lt; <span class="number">2000000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bloomFilter.mightContain(i)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(i + <span class="string">&quot;误判了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后误判了10314 符合期望的误判率 以后布隆过滤器就用google提供的包</span></span><br><span class="line">        System.out.println(<span class="string">&quot;总共的误判数:&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="布隆过滤器的删除："><a href="#布隆过滤器的删除：" class="headerlink" title="布隆过滤器的删除："></a>布隆过滤器的删除：</h3><p>布隆过滤器不能直接支持删除工作，因为在删除一个元素时，可能会影响其他元素。<br>比如：删除上图中”tencent”元素，如果直接将该元素所对应的二进制比特位置0，“baidu”元素也被删除了，<br>因为这两个元素在多个哈希函数计算出的比特位上刚好有重叠。<br>一种支持删除的方法：将布隆过滤器中的每个比特位扩展成一个小的计数器，插入元素时给k个计数器(k个哈<br>希函数计算出的哈希地址)加一，删除元素时，给k个计数器减一，通过多占用几倍存储空间的代价来增加删<br>除操作。<br>缺陷：</p><ol><li>无法确认元素是否真正在布隆过滤器中【会有误判】</li><li>存在计数回绕【回绕意思为：溢出】（比特位的角度）</li></ol><hr><h3 id="布隆过滤器的优点"><a href="#布隆过滤器的优点" class="headerlink" title="布隆过滤器的优点"></a>布隆过滤器的优点</h3><ol><li>增加和查询元素的时间复杂度为:O(K), (K为哈希函数的个数，一般比较小)，与数据量大小无关</li><li>哈希函数相互之间没有关系，方便硬件并行运算</li><li>布隆过滤器不需要存储元素本身，在某些对保密要求比较严格的场合有很大优势</li><li>在能够承受一定的误判时，布隆过滤器比其他数据结构有这很大的空间优势</li><li>数据量很大时，布隆过滤器可以表示全集，其他数据结构不能（数据量很大的时候 其他数据结构不能存储全部元素 只有位图和布隆过滤器可以存储 可以极大地节省空间）</li><li>使用同一组散列函数的布隆过滤器可以进行交、并、差运算</li></ol><hr><h3 id="布隆过滤器缺陷"><a href="#布隆过滤器缺陷" class="headerlink" title="布隆过滤器缺陷"></a>布隆过滤器缺陷</h3><ol><li>有误判率，即存在假阳性(False Position)，即不能准确判断元素是否在集合中(补救方法：再建立一个白<br>名单，存储可能会误判的数据)</li><li>不能获取元素本身</li><li>一般情况下不能从布隆过滤器中删除元素</li><li>如果采用计数方式删除，可能会存在计数回绕问题</li></ol><hr><h3 id="布隆过滤器的使用场景："><a href="#布隆过滤器的使用场景：" class="headerlink" title="布隆过滤器的使用场景："></a>布隆过滤器的使用场景：</h3><ol><li><p>google的guava包中有对Bloom Filter的实现（已经实现好的布隆过滤器）</p></li><li><p>网页爬虫对URL的去重，避免爬去相同的URL地址。（可以确定不在已经爬过的url地址集合中）</p></li><li><p>垃圾邮件过滤，从数十亿个垃圾邮件列表中判断某邮箱是否是垃圾邮箱。（可以确定不在垃圾邮箱集合中）<br>String s3 &#x3D; “金轮法王”;<br>String s4 &#x3D; “霍都”;<br>BloomFilter filter&#x3D;new BloomFilter();<br>filter.set(s1);<br>filter.set(s2);<br>filter.set(s3);<br>filter.set(s4);<br>System.out.println(filter.contains(“杨过”));<br>System.out.println(filter.contains(“金轮法王”));<br>}<br>}</p></li><li><p>解决数据库缓存击穿，黑客攻击服务器时，会构建大量不存在于缓存中的key向服务器发起请求，在数<br>据量足够大的时候，频繁的数据库查询会导致挂机。（可以确定不存在于缓存中的key）</p></li><li><p>秒杀系统，查看用户是否重复购买（可以确定用户没有购买记录）</p></li></ol><hr><h3 id="简单总结一下："><a href="#简单总结一下：" class="headerlink" title="简单总结一下："></a>简单总结一下：</h3><p>位图：适合处理整数，大量数据，查找&#x2F;排序&#x2F;去重 但是如果不是整数，此时就需要使用布隆过滤器</p><p>布隆过滤器：适合一些非整数的 使用哈希+位图结合来做的，查找的时间复杂度和哈希函数的个数有关系 不存储关键信息 有误判的！！！ 他能确定谁一定不在 但是 谁在？ 是有一定的误判率的</p><hr><h3 id="海量数据面试题："><a href="#海量数据面试题：" class="headerlink" title="海量数据面试题："></a>海量数据面试题：</h3><h5 id="哈希切割："><a href="#哈希切割：" class="headerlink" title="哈希切割："></a>哈希切割：</h5><p>给一个超过100G大小的log file, log中存着IP地址, 设计算法找到出现次数最多的IP地址？ 与上题条件相同，<br>如何找到top K的IP？</p><p>​内存当中不能存下100G的数据</p><p>​通常的如果忽略大小 我们可以统计每个IP出现的次数 我们可以使用K，V结构来解决这个题 但是问题目前是100G的数据太大了，一次性是无法加载到内容当中的</p><p>思路：尝试把当前这一个文件 给拆分成若干个小文件 问题就是要如何拆分呢？</p><p>均分的思路是不可以的 均分会出现一个情况 一个文件当中 最多的IP地址 不一定就是整体上最多的IP地址。所以不可以均分 均分的是数量 不是根据IP地址的内容均分的（既然不可以根据内容均分 目标：是否能将相同的IP存储到同一个文件当中？ 如果能做到 就可以解决这个问题）</p><p>正确思路：</p><ol><li><p>IP本身就是一个字符串而已 先把IP变成一个整数 hash(IP) </p></li><li><p>文件的下标index  &#x3D; hash(IP) % 200</p></li></ol><p>每一份就分为了500MB </p><p>好处 会把相同的字符串映射到 同一个文件当中的</p><ol start="3"><li>读取每个文件的内容，统计每个文件当中，IP出现的次数 Map记录下来</li></ol><hr><h5 id="位图应用："><a href="#位图应用：" class="headerlink" title="位图应用："></a>位图应用：</h5><ol><li>给定100亿个整数，设计算法找到只出现一次的整数？</li></ol><p>这里会有重复的数据 100亿个整数 大约 40G的内存</p><p>解法1:哈希切割：</p><p>把数字 哈希到 对应的小文件当中 一样的数字 肯定是在一起的 遍历每个小文件 统计数字出现的次数 此时 在内存当中就可以知道 哪个数字出现了一次</p><p>解法2:位图</p><p>42亿比特位 大约是 512M</p><p>42亿&#x2F;8&#x2F;1024&#x2F;1024 &#x3D; 512M</p><p>没出现 0 0</p><p>出现1次 0 1</p><p>出现2次 1 0</p><p>出现3次以上 1 1</p><p>用两个位图来表示相应位置的第一位和第二位</p><p>所以要求出只有一次的数  那就直接用两个位图 如果相应位置 一个位图的比特位为1 一个位图的比特位为0，那么就是只出现了一次</p><p>解法3: 使用一个位图</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402252050605.png" alt="一个位图的解法"></p><p>面试的时候这种题目极其多</p><ol start="2"><li>给两个文件，分别有100亿个整数，我们只有1G内存，如何找到两个文件交集？</li></ol><p>​100亿 –》 就是40个G</p><p>​解法一： 哈希切割</p><p>​第一步：哈希切割 相同的数全部哈希到相同的文件中 （分成小文件），两个文件都用相同的哈希函数</p><p>​第二步：相同的下标文件 求交集 交集再重新组成大文件  就是交集</p><p>​解法二：位图</p><pre><code>1. 先遍历第一个文件 降低一个文件数据读取出来 存放在bitySet当中1. 遍历第二个文件 每次读一个数据 就看bitSet当中 之前是否存在1. 如果存在 就是交集</code></pre><p>两个bitSet 按位与 就直接是交集 按位或 就直接是并集 差集 就直接按位异或（不同的位就置一）</p><ol start="3"><li>位图应用变形：1个文件有100亿个int，1G内存，设计算法找到出现次数不超过2次的所有整数</li></ol><p>解法一：哈希切割</p><p>解法二；使用两个位图 两个BItSet对应的位上 不要出现2个1的就好 0次的也不能统计</p><hr><h5 id="布隆过滤器：-1"><a href="#布隆过滤器：-1" class="headerlink" title="布隆过滤器："></a>布隆过滤器：</h5><ol><li>给两个文件，分别有100亿个query，我们只有1G内存，如何找到两个文件交集？分别给出精确算法和<br>近似算法</li></ol><p>近似算法 有一定概率 –》 布隆过滤器去做 </p><p>精确算法 哈希切割 </p><p>假设一个query 平均10个byte 1000亿个字节 –》 93个G</p><p>两个文件都分别切割成小文件 分别对应求交集</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402252050606.png" alt="精确算法求交集"></p><p>近似算法 ： 把第一个文件当中的query映射到布隆过滤器当中 </p><p>读第二个文件 每个query 都去布隆过滤器去查找</p><p>找到了才有可能是交集 找不到那铁定不是交集 （存在误判 有可能没存在 但被误判为有）</p><ol start="2"><li>如何扩展BloomFilter使得它支持删除元素的操作</li></ol><hr><p>拓展：</p><p><a href="http://my.oschina.net/zhenglingfei/blog/405622">一致性哈希</a>（应用在分布式系统当中）</p><p>hash%N N代表了缓存服务器的数量 如果N发生了改变 那么此时就会缓存雪崩</p><p>一致性hash算法：哈希环 一致性hash算法是对2^32取模</p><p>接着将各个服务器使用IP地址 主机名作为关键字进行hash 确定每台机子在hash环的位置</p><p>最后使用算法定位数据访问到对应的服务器 将数据key使用相同的函数hash计算出hash值吗，并确定此数据在环上的位置 沿环顺时针寻找 第一台遇到的服务器就是应该定位到的服务器</p><ol><li><p>我们可以认为 这个哈希环是由2^32个点组成的</p></li><li><p>根据hash(key) % 2^32 确定服务器在哈希环的位置</p></li><li><p>将数据缓存到hash环上 hash(图片名称) % 2^32</p></li></ol><p>假设此时B服务器坏掉了 在B服务器上缓存的数据 就会落到下一个服务器 </p><p>一致性算法节点的增减都只需重定位环空间中的一小部分数量</p><p>2^32 更加均匀 在环上的哪一个地方都有可能</p><p>hash环会倾斜 不理想情况下 会出现服务器紧挨在一起 </p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402260936536.png" alt="哈希环倾斜"></p><p>ABC三台机器负载极不均衡 这种情况如果A出现故障 存储在A的数据会大量转移到B上 可能会导致节点B的崩溃 节点B崩溃之后 A，B的所有水会想节点C迁移导致节点C也崩溃 最终导致整个集群宕机 这种情况称为<strong>雪崩效应</strong></p><p>解决办法 –》 虚拟节点 </p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402260936537.png" alt="虚拟节点"></p><p>WEB服务器 Nginx-〉就用到了负载均衡的思想</p><p>可以再多多扩展阅读 一致性hash和负载均衡</p><p><a href="http://www.cnblogs.com/leoo2sk/archive/2010/10/01/hash-and-encrypt.html">哈希与加密</a></p><p>哈希算法是不可逆的 加密算法是可逆的</p><p>hash将目标文本 转换成长度相同 不可逆的杂凑的字符串</p><p>加密是将目标文本转换成具有不同长度的 可逆的密文 （长度与明文的长度有关）</p><p>md5加密 - 》可以逆向推导</p><p>彩虹表 搜集到的常用的加密表</p><p>如果被保护数据仅仅用做比较认真 在以后不需要还原成铭文形式 则使用hash 如果被保护的数据在以后需要被还原成明文 则需要使用加密</p><p>最常用的哈希算法 是MD5 （广泛使用散列函数）</p><p>加盐： “1b2i3t4e “ 123456-&gt; bi123456te  除非知道我的盐是什么？</p><p>也可以加随机盐 BcryptPasswordEncoder 类</p><p>密码越长 破解的难度就越高</p><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402260936538.png"></p><hr><h3 id="板书："><a href="#板书：" class="headerlink" title="板书："></a>板书：</h3><p><img src="https://raw.githubusercontent.com/1067367579/picgophotos/main/img/202402252050607.png" alt="2022-07-11-位图+布隆过滤器"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;位图-布隆过滤器-海量数据面试题-【哈希的应用】&quot;&gt;&lt;a href=&quot;#位图-布隆过滤器-海量数据面试题-【哈希的应用】&quot; class=&quot;headerlink&quot; title=&quot;位图&amp;amp;布隆过滤器&amp;amp;海量数据面试题 【哈希的应用】&quot;&gt;&lt;/a&gt;位图&amp;amp</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://example.com/2024/02/23/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://example.com/2024/02/23/%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2024-02-23T03:49:22.000Z</published>
    <updated>2024-02-23T08:18:26.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><hr><h4 id="红黑树概念："><a href="#红黑树概念：" class="headerlink" title="红黑树概念："></a>红黑树概念：</h4><p>红黑树，是一种二叉搜索树，但在每个结点上增加一个存储位表示结点的颜色，可以是Red或Black。 通过对任何<br>一条从根到叶子的路径上各个结点着色方式的限制，&#x3D;&#x3D;红黑树确保没有一条路径会比其他路径长出俩倍，因而是接近<br>平衡的。</p><p>红黑树并不是绝对平衡 只是相对平衡，而AVL树是绝对平衡的</p><hr><h4 id="红黑树性质："><a href="#红黑树性质：" class="headerlink" title="红黑树性质："></a>红黑树性质：</h4><ol><li>每个结点不是红色就是黑色</li><li>根节点是黑色的</li><li>如果一个节点是红色的，则它的两个孩子结点是黑色的【&#x3D;&#x3D;没有2个连续的红色节点&#x3D;&#x3D;】</li><li>对于每个结点，从该结点到其所有后代叶结点的简单路径上，均 包含相同数目的黑色结点</li><li>每个叶子结点都是黑色的(此处的叶子结点指的是空结点NIL)</li></ol><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2024-02-22%2017.07.24.png" alt="截屏2024-02-22 17.07.24" style="zoom:50%;" /><p>为什么 有这五点性质 就能保证最长路径中的节点个数不会超过最短路径节点个数的两倍？</p><p> 最短路径 ： 当前路径上全部都是黑色的节点</p><p>最长路径： 红黑交替（保证了与最短路径黑色个数相同 同时红色尽可能的多）–红色的儿子不能是红色</p><p>​又因为根节点必须是黑色 所以极端情况下最长路径就是最短路径的两倍</p><p>说明：一个正常的二叉树 不会出现这种一条路径全都是黑色的情况（这种情况是完全二叉树）</p><p>NIL在红黑树是不可省略的</p><p>假设：一棵红黑树当中 有X个黑色的节点 这棵树总共有N个节点 那么N的范围是多少</p><p>[X,2X]</p><p>最短路径 长度 ： logN</p><p>最长路径的长度：2*logN</p><p>知道极端情况下就知道了N的范围</p><p> 最短路径的时间复杂度：logX</p><p>最长路径的时间复杂度：log2X &#x3D; logX + 1 </p><p>最短路径和最长路径的时间复杂度 几乎相同</p><p>所以可以认为时间复杂度就是 logN</p><hr><h4 id="红黑树节点的定义"><a href="#红黑树节点的定义" class="headerlink" title="红黑树节点的定义"></a>红黑树节点的定义</h4><p>颜色用枚举来表示</p><p>新创建的节点默认颜色是红色</p><p> 思考：在节点的定义中，为什么要将节点的默认颜色给成红色的？</p><p>因为如果是黑色 那么需要保证每条路径上黑色节点个数相同的规则 势必会带来几个问题：</p><ol><li>需要新增节点</li></ol><p>如果是红色 只需要考虑 根节点 或者 红色不能连一起 （此时就调整当前路径上的节点即可）</p><hr><h4 id="红黑树的插入："><a href="#红黑树的插入：" class="headerlink" title="红黑树的插入："></a>红黑树的插入：</h4><p>红黑树是在二叉搜索树的基础上加上其平衡限制条件，因此红黑树的插入可分为两步：</p><ol><li>按照二叉搜索的树规则插入新节点</li><li>检测新节点插入后，红黑树的性质是否造到破坏<br>因为新节点的默认颜色是红色，因此：如果其双亲节点的颜色是黑色，没有违反红黑树任何性质，则不需要<br>  调整；但当新插入节点的双亲节点颜色为红色时，就违反了性质三不能有连在一起的红色节点，此时需要对<br>  红黑树分情况来讨论：</li></ol><p>难点</p><p><img src="https://mdphotos2.oss-cn-shenzhen.aliyuncs.com/img/202402231147911.png" alt="2022-07-05-AVL树+红黑树"></p><p>好好看图理解代码</p><ol><li><p>在红黑树的插入中，主要的性质还是红色不能连续 路径相同黑色数目</p></li><li><p>插入时 默认插入之前就是一个性质完备的红黑树</p></li><li><p>插入时 双亲节点如果是黑色 插入的节点默认是红色 那么不违反任何性质 所以直接插入即可</p></li><li><p>只有在双亲节点是红色且当前节点是红色时，才要进行处理（违反性质红色不能连续）</p></li><li><p>插入时 如果parent为红 uncle也为红 就设置这两个兄弟为黑（设置parent为黑 红色就不连续 同时路径黑色必须相同 那么uncle也要设置为黑）</p></li><li><p>因为所有路径中经过这棵子树的路径都多了一个黑色节点 那么就要删去一个 所以直接对祖父节点下手 变为红色 以此抵消</p></li><li><p>如果祖父节点的父亲为黑色 那么操作就完成了</p></li><li><p>如果祖父节点的父亲不为黑色 那么就继续迭代</p></li><li><p>如果当前节点是红色 双亲节点是红色 而uncle节点是黑色且存在 此时又要将cur的上一级设置为黑色，但是问题就出来了，本来是平衡的，现在parent这边多了一个黑色节点 又不能随意添加或者删除无意义的节点，因此该种情况 只能右旋 (该情况不会出现在第一次迭代中 在未插入节点前 cur一定是黑色 不然不能保持路径黑色个数一致)，右旋后 parent为根节点 grandfather变为右子树根 uncle变为grandfather的右子树 cur还是parent的左子树 此时parent变为黑色，grandfather变为红色 cur和uncle都不变 是黑色 那么此时依然保持完备性</p></li><li><p>如果当前节点为红色 parent为红 uncle不存在 那么还是右旋 把parent变成黑 grandfather变成红 cur不变还是红 就完美适配完备性了 路径中黑色节点个数未变</p></li><li><p>如果当前节点是红色，且插在parent的右边，parent为红，grandfather为黑，uncle存在且为黑，那么cur本来也一定为黑，与情况二很相似，可以想办法变成情况二，那就是想办法把cur搞到左边去，要想这样，就只能进行局部的左旋，cur顶替了parent的位置，parent变为cur的左子树，颜色不变，那么就是情况二</p></li><li><p>如果uncle不存在 还是和上面一样 处理 uncle的问题是情况二中解决的</p></li><li><p>最后不管怎样都要把根节点设置为黑色</p></li></ol><p>插入操作代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先按照普通二叉搜索树来插入 插入后再用红黑树的规则去约束调整</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            root.color = COLOR.BLACK;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            parent = cur;</span><br><span class="line">            <span class="keyword">if</span>(val &gt; cur.val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//往右边走</span></span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(val &lt; cur.val)</span><br><span class="line">            &#123;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//重复元素 直接不插入</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入操作</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">if</span>(parent.val &lt; val)</span><br><span class="line">        &#123;</span><br><span class="line">            parent.right = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            parent.left = node;</span><br><span class="line">        &#125;</span><br><span class="line">        node.parent = parent;</span><br><span class="line">        cur = node;</span><br><span class="line">        <span class="comment">//接下来就是红黑树的调整 </span></span><br><span class="line">        <span class="comment">//首先插入默认是红色，如果parent为黑色，那么不破坏任何红黑树的规则 不进行调整，如果parent == null 是根节点 根节点在最后无论如何都会置为黑色，调整完毕</span></span><br><span class="line">        <span class="keyword">while</span>(parent!=<span class="literal">null</span> &amp;&amp; parent.color == COLOR.RED)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//分为三种情况 parent和uncle也有左右之分</span></span><br><span class="line">            <span class="comment">//首先 要区分parent是左还是右 那么就要找到祖父节点 因为parent为红色 所以一定存在祖父节点 这里不用判空</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">grandFather</span> <span class="operator">=</span> parent.parent;</span><br><span class="line">            <span class="keyword">if</span>(parent == grandFather.left)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//parent在左边的情况</span></span><br><span class="line">                <span class="comment">//找到叔叔节点</span></span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">uncle</span> <span class="operator">=</span> grandFather.right;</span><br><span class="line">                <span class="comment">//如果uncle存在且为红色 那么就是情况一</span></span><br><span class="line">                <span class="keyword">if</span>(uncle!=<span class="literal">null</span> &amp;&amp; uncle.color == COLOR.RED)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//该种情况可以出现在第一轮插入 因为该种情况插入开始前是路径黑色数平衡的 只是需要调整红色连续</span></span><br><span class="line">                    <span class="comment">//cur为红色 parent需要调整为黑色 那么uncle也要调整为黑色</span></span><br><span class="line">                    parent.color = uncle.color = COLOR.BLACK;</span><br><span class="line">                    <span class="comment">//因为grandFather子树路径中黑色都多了一个 所以grandFather要变为红色 以此平衡所有路径</span></span><br><span class="line">                    grandFather.color = COLOR.RED;</span><br><span class="line">                    <span class="comment">//迭代，向上判断 如果grandFather为根节点根据 循环条件 会退出 如果不是 就继续向上调整</span></span><br><span class="line">                    cur = grandFather;</span><br><span class="line">                    parent = cur.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//uncle不存在 或者 存在且黑色的情况 -- 情况二和情况三</span></span><br><span class="line">                    <span class="comment">//情况三：cur插在parent的右边 cur为红色 parent为红色 uncle为黑色或者不存在</span></span><br><span class="line">                    <span class="comment">//想办法变成情况二 和情况二相像 让红色的位置变成左边 就按情况二处理即可 所以 这里我们直接局部左旋</span></span><br><span class="line">                    <span class="keyword">if</span>(cur == parent.right)</span><br><span class="line">                    &#123;</span><br><span class="line">                        rotateLeft(parent);</span><br><span class="line">                        <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> parent;</span><br><span class="line">                        parent = cur;</span><br><span class="line">                        cur = tmp;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//情况二：cur依然是插在parent的左边 cur为红色 parent为红色 uncle为黑色或者不存在</span></span><br><span class="line">                    <span class="comment">//uncle若存在且黑色 ， 则cur在插入节点前一定是黑色 不然无法平衡 插入后因为向上传递变为了红色</span></span><br><span class="line">                    <span class="comment">//uncle若不存在 那么可能是第一轮循环 </span></span><br><span class="line">                    <span class="comment">//出发点：不能连续红色 但是又不能破坏左右两边平衡 </span></span><br><span class="line">                    <span class="comment">//右旋操作，parent变为根节点 变黑色 grandfather变右子树 红色 cur还是左子树 黑色 uncle依然黑色 所以平衡</span></span><br><span class="line">                    rotateRight(grandFather);</span><br><span class="line">                    grandFather.color = COLOR.RED;</span><br><span class="line">                    parent.color = COLOR.BLACK;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//parent在右边的情况 和左边反着来就行 也就是parent和uncle换了位置</span></span><br><span class="line">                <span class="comment">//找到叔叔节点</span></span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">uncle</span> <span class="operator">=</span> grandFather.left;</span><br><span class="line">                <span class="comment">//如果uncle存在且为红色 那么就是情况一</span></span><br><span class="line">                <span class="keyword">if</span>(uncle!=<span class="literal">null</span> &amp;&amp; uncle.color == COLOR.RED)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//该种情况可以出现在第一轮插入 因为该种情况插入开始前是路径黑色数平衡的 只是需要调整红色连续</span></span><br><span class="line">                    <span class="comment">//cur为红色 parent需要调整为黑色 那么uncle也要调整为黑色</span></span><br><span class="line">                    parent.color = uncle.color = COLOR.BLACK;</span><br><span class="line">                    <span class="comment">//因为grandFather子树路径中黑色都多了一个 所以grandFather要变为红色 以此平衡所有路径</span></span><br><span class="line">                    grandFather.color = COLOR.RED;</span><br><span class="line">                    <span class="comment">//迭代，向上判断 如果grandFather为根节点根据 循环条件 会退出 如果不是 就继续向上调整</span></span><br><span class="line">                    cur = grandFather;</span><br><span class="line">                    parent = cur.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//uncle不存在 或者 存在且黑色的情况 -- 情况二和情况三</span></span><br><span class="line">                    <span class="comment">//情况三：cur插在parent的右边 cur为红色 parent为红色 uncle为黑色或者不存在</span></span><br><span class="line">                    <span class="comment">//想办法变成情况二 和情况二相像 让红色的位置变成左边 就按情况二处理即可 所以 这里我们直接局部左旋</span></span><br><span class="line">                    <span class="keyword">if</span>(cur == parent.left)</span><br><span class="line">                    &#123;</span><br><span class="line">                        rotateRight(parent);</span><br><span class="line">                        <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> parent;</span><br><span class="line">                        parent = cur;</span><br><span class="line">                        cur = tmp;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//情况二：cur依然是插在parent的左边 cur为红色 parent为红色 uncle为黑色或者不存在</span></span><br><span class="line">                    <span class="comment">//uncle若存在且黑色 ， 则cur在插入节点前一定是黑色 不然无法平衡 插入后因为向上传递变为了红色</span></span><br><span class="line">                    <span class="comment">//uncle若不存在 那么可能是第一轮循环 </span></span><br><span class="line">                    <span class="comment">//出发点：不能连续红色 但是又不能破坏左右两边平衡 </span></span><br><span class="line">                    <span class="comment">//右旋操作，parent变为根节点 变黑色 grandfather变右子树 红色 cur还是左子树 黑色 uncle依然黑色 所以平衡</span></span><br><span class="line">                    rotateLeft(grandFather);</span><br><span class="line">                    grandFather.color = COLOR.RED;</span><br><span class="line">                    parent.color = COLOR.BLACK;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//调整完了 最后要把根节点变为黑色</span></span><br><span class="line">        root.color = COLOR.BLACK;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotateRight</span><span class="params">(TreeNode parent)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(parent == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subL</span> <span class="operator">=</span> parent.left;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subLR</span> <span class="operator">=</span> subL.right;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">pParent</span> <span class="operator">=</span> parent.parent;</span><br><span class="line">        subL.right = parent;</span><br><span class="line">        parent.parent = subL;</span><br><span class="line">        parent.left = subLR;</span><br><span class="line">        <span class="keyword">if</span>(subLR!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            subLR.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pParent == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root = subL;</span><br><span class="line">            subL.parent = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pParent.left == parent)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//原parent是父节点的左子节点</span></span><br><span class="line">                pParent.left = subL;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//原parent是父节点的右子节点</span></span><br><span class="line">                pParent.right = subL;</span><br><span class="line">            &#125;</span><br><span class="line">            subL.parent = pParent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotateLeft</span><span class="params">(TreeNode parent)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(parent == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subR</span> <span class="operator">=</span> parent.right;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subRL</span> <span class="operator">=</span> subR.left;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">pParent</span> <span class="operator">=</span> parent.parent;</span><br><span class="line">        subR.left = parent;</span><br><span class="line">        parent.parent = subR;</span><br><span class="line">        parent.right = subRL;</span><br><span class="line">        <span class="keyword">if</span>(subRL!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            subRL.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pParent == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root = subR;</span><br><span class="line">            subR.parent = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pParent.left == parent)</span><br><span class="line">            &#123;</span><br><span class="line">                pParent.left = subR;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pParent.right = subR;</span><br><span class="line">            &#125;</span><br><span class="line">            subR.parent = pParent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>围绕搜索树进行讲解：</p><ol><li><p>复习了之前讲的二叉搜索树 理想情况下 查找的时间复杂度为O(logn) 如果出现但分枝的情况 O(n)</p></li><li><p>AVL树 左右子树的高度差的绝对值 &lt;&#x3D; 1</p><p>AVL树为了达到平衡 每次插入的时候 如果平衡因子 超过了范围 就会进行旋转</p><p>左旋 右旋 左右双旋 右左双旋</p><p>先按照二叉搜索树的方式进行节点插入</p><p>更新平衡因子</p><p>进行旋转</p><p>如果parent平衡因子为2 subR为1 -》 左旋 -&gt; 修改对应的平衡因子</p><p>如果parent平衡因子为2 subR为-1 -&gt; 右左双旋 -》修改对应的平衡因子</p><p>如果parent平衡因子为-2 subL为-1 -》 右旋 - 〉 修改对应平衡因子</p><p>如果parent平衡因子为-2 subL为1 -》 左右双旋 -〉 修改对应的平衡因子</p></li></ol><p>​AVL树是高度绝对平衡的 所以 查找的时候 时间复杂度O(logN)</p><p>​如果 对AVL树进行频繁的插入或者删除 不太好 因为得旋转 所以AVL树一般适用于进行静态数据的查找</p><ol start="3"><li><p>红黑树 ： 相对平衡 减少旋转 提升插入删除效率、</p><p>parent为gf左边</p></li></ol><p>情况一：cur为红 parent为红 grandfather为黑 uncle为红 cur为parent左边 -》uncle和parent变红 grandfather变黑 迭代</p><p>情况二：cur为parent左边</p><ol><li>uncle为黑 cur插入前为黑 插入后因迭代变红了 grandfaher为黑 -》右旋 修改parent和gf颜色</li></ol><p>  2.uncle不存在 可能是第一次循环 cur可能插入前不存在 -》如上 直接右旋 修改p和gf颜色</p><p>情况三：和情况二类似，不同的是cur为parent右边 -&gt;先左旋 然后parent和cur交换位置 变为情况二处理</p><p>​parent为gf右边</p><p>直接就上面情况的镜像变换即可</p><p>注意⚠️：每次跳出调整循环之后一定要手动把根节点改成黑色 不然会循环空指针异常（这里的话最好就是在循环之后进行操作 然乎还要避免异常的话 涉及旋转的操作因为旋转之后红黑树就成立了 那么此时就直接break循环 到循环外 下一步手动改根节点颜色就好了）</p><hr><h3 id="红黑树的验证："><a href="#红黑树的验证：" class="headerlink" title="红黑树的验证："></a>红黑树的验证：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前树 是不是 红黑树</span></span><br><span class="line"><span class="comment">     * 得满足红黑树的性质</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRBTree</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果一棵树是空时 那么这棵树是红黑树</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.color != COLOR.BLACK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//违反了性质2</span></span><br><span class="line">            System.out.println(<span class="string">&quot;违反了性质 根节点必须是黑色的&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//性质三 红色不能连续 可以倒着往前看 因为往后看 有叶子节点的特殊情况</span></span><br><span class="line">        <span class="comment">//要判断 是否有两个连续的红色节点 需要遍历当前书中的节点 如果是红色的 判断父亲是不是红色</span></span><br><span class="line">        <span class="comment">//性质四 每条路径是否都有相同数目的黑色节点</span></span><br><span class="line">        <span class="keyword">return</span> checkRedColor(root) &amp;&amp; checkBlackColor(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkBlackColor</span><span class="params">(RBTreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//以递归的方式</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getBlack(root)!=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 并判断 这棵树下路径的黑色节点个数是否相同</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 当前树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> -1不相同 不为-1 相同</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getBlack</span><span class="params">(RBTreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> getBlack(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> getBlack(root.right);</span><br><span class="line">        <span class="comment">//直接在单次递归中就把求black的高度 和 判断是否子树具有相同的黑色路径个数 操作完成</span></span><br><span class="line">        <span class="keyword">if</span>(left!=right || left == -<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;各路径黑色节点个数不同&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left+((root.color == COLOR.BLACK)?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkRedColor</span><span class="params">(RBTreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//递归遍历</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.color == COLOR.RED &amp;&amp; root.parent!=<span class="literal">null</span> &amp;&amp; root.parent.color == COLOR.RED)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;违反了性质 出现了两个连续的红色节点&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> checkRedColor(root.left) &amp;&amp; checkRedColor(root.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="红黑树的删除："><a href="#红黑树的删除：" class="headerlink" title="红黑树的删除："></a>红黑树的删除：</h4><p>红黑树的删除本节不做讲解，有兴趣的同学可参考：《算法导论》<br><a href="http://www.cnblogs.com/fornever/archive/2011/12/02/2270692.html">http://www.cnblogs.com/fornever/archive/2011/12/02/2270692.html</a><br><a href="http://blog.csdn.net/chenhuajie123/article/details/11951777">http://blog.csdn.net/chenhuajie123/article/details/11951777</a></p><p>自己下去看博客<br>找替代节点 他的左子树 和 右子树一定有一个为空 </p><hr><h4 id="红黑树和AVL"><a href="#红黑树和AVL" class="headerlink" title="红黑树和AVL"></a>红黑树和AVL</h4><p>红黑树和AVL树都是高效的平衡二叉树，增删改查的时间复杂度都是O(logN)，红黑树不追求绝对平衡，其只需保<br>证最长路径不超过最短路径的2倍，相对而言，降低了插入和旋转的次数，所以在经常进行增删的结构中性能比<br>AVL树更优，而且红黑树实现比较简单，所以实际运用中红黑树更多。</p><hr><h4 id="红黑树应用："><a href="#红黑树应用：" class="headerlink" title="红黑树应用："></a>红黑树应用：</h4><ol><li>java集合框架中的：TreeMap、TreeSet底层使用的就是红黑树</li><li>C++ STL库 – map&#x2F;set、mutil_map&#x2F;mutil_set</li><li>linux内核：进程调度中使用红黑树管理进程控制块，epoll在内核中实现时使用红黑树管理事件块</li><li>其他一些库：比如nginx中用红黑树管理timer等</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;红黑树&quot;&gt;&lt;a href=&quot;#红黑树&quot; class=&quot;headerlink&quot; title=&quot;红黑树&quot;&gt;&lt;/a&gt;红黑树&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&quot;红黑树概念：&quot;&gt;&lt;a href=&quot;#红黑树概念：&quot; class=&quot;headerlink&quot; title=&quot;红黑树概</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>AVL树:二叉平衡树</title>
    <link href="http://example.com/2024/02/22/AVL%E6%A0%91-%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    <id>http://example.com/2024/02/22/AVL%E6%A0%91-%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91/</id>
    <published>2024-02-22T08:52:32.000Z</published>
    <updated>2024-02-23T07:58:00.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉平衡树"><a href="#二叉平衡树" class="headerlink" title="二叉平衡树"></a>二叉平衡树</h2><h4 id="找工作："><a href="#找工作：" class="headerlink" title="找工作："></a>找工作：</h4><p>​提前批：准备好了 就可以试试 不要等</p><p>​没准备好： –》</p><p>​什么时候准备好？</p><p>​怎么准备？</p><p>​简历 -&gt; 面试官问你简历的那些重点？ 知道吗？</p><ol><li><p>课看完了 -》项目至少看一个</p></li><li><p>简历写完了</p></li><li><p>就可以投递了 </p><p>面试才是最好的准备</p><p>大量的面试 才能更好的成长【取决于每次面试之后，都要好好把这次面试总结了】必须笔试要通过 </p><p>如何通过笔试？？ 笔试才是最难的 -》</p><ol><li><p>笔试强训48天</p></li><li><p>课堂代码</p></li><li><p>《剑指offer》</p></li></ol><p>如果从今天开始 再不弥补 那么真的太危险了</p><p>实验才是检验真理的唯一标准</p><p>基础比较好 笔试强训48天之后 去做牛客的大厂校招真题</p><p>19年开始往后 都是线上笔试</p><p>不管实习过没有 正规的流程里面就是有笔试的</p><p>选择题+代码题</p><p>选择题+问答题+代码题</p><p>代码题</p><p>是不是某个公司的笔试没过，那么整个秋招就和这个公司无缘了？</p><p>实习没有笔试：80%</p><p>提前批没有笔试：80%</p><p>提前批：提前批会在正式大规模招聘之前先招优秀的，提前准备好的</p><p>SP专场：特殊offer 普通15w 特殊25w</p><hr><h4 id="高阶数据结构的学习"><a href="#高阶数据结构的学习" class="headerlink" title="高阶数据结构的学习"></a>高阶数据结构的学习</h4><p>大公司问的比较多：AVL ？ </p><p>会让手写代码吗？</p><p>​插入是有可能让写的</p><p>​删除一般不会，说个思想</p></li></ol><p>​TreeMap TreeSet的底层就是红黑树</p><ol><li>二叉搜索树【二叉排序树】 中序遍历之后就是有序序列，极端情况下查找可能是单分支的树 效率及其低下</li><li>AVL树 高度平衡的二叉搜索树（每棵树左右子树高度差都不会超过1）如果树的左右高度保持一致的话，查找性能高 次数就是树的高度 （通过旋转才能达到这样的效果 难在插入的代码）</li></ol><p>平衡因子 &#x3D; 右子树的高度 - 左子树的高度</p><ol><li>先将数据插入到AVL树当中（和二叉搜索树一样）</li><li>插入进去之后，根据平衡因子来进行树的调整 在右边平衡因子++ 在左边平衡因子–</li><li>检查平衡情况： 平衡因子为0 不用动 整棵树一定平衡 平衡因子为1或者-1 待定 当前树平衡但不一定整棵树平衡 需要向上调整平衡因子 平衡因子大于1 整棵树一定不平衡 直接进行旋转操作</li></ol><p>旋转操作分为：左旋 右旋 左右双旋 右左双旋</p><p>区分是单旋 还是 双旋 就看 parent.bf和cur.bf是否异号</p><p>区分是左单旋还是右单旋 就看parent的bf是正还是负 正号的话就是右边高 左旋 负号的话就是左边高 右旋</p><p>区分是左右双旋 还是 右左双旋 就看 具体parent和cur的异号情况 parent正cur负 那么就是右左双旋</p><p>parent负cur正 那么就是左右双旋</p><p>为什么双旋？ 其实就是 要使parent和其左树或者右树的bf符号相等时 才能进行整体的旋转（这个时候才有意义）</p><p>如果这里记不起来 或者 之后难以理解 就看板书中的具体样例图片 :</p><p><strong>粗略地总结了一下各种旋转的具体情况，右左在下面已给出</strong></p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/%E7%AC%94%E8%AE%B0%202025.jpeg" alt="笔记 2025" style="zoom:50%;" /><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/%E7%AC%94%E8%AE%B0%202026.jpeg" alt="笔记 2026" style="zoom:80%;" /><ol><li>新节点插入较高左子树的左侧</li></ol><p>​右旋操作</p><p>​<img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240221012812.png" alt="CT-20240221012812" style="zoom:50%;" /></p><p>​</p><p>注意 还要修改平衡因子</p><p>右旋的本质 把左树提起来</p><p>要定义变量引用表示左儿子 和 左边的右孙子</p><p>因为 40 比 30 大 比 60 小 所以旋转之后安排在原本根节点的左边（也就是旋转之后右儿子的左孙）</p><p>旋转之后平衡因子也要做相应调整</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思想 ： 左边提上去 右边降下来 那要腾位置 就刚好 把 左二字的右树 移到旋转之后右儿子的左树</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateRight</span><span class="params">(TreeNode parent)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//左儿子右孙</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subLR</span> <span class="operator">=</span> parent.left.right;</span><br><span class="line">        <span class="comment">//左儿子</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subL</span> <span class="operator">=</span> parent.left;</span><br><span class="line"></span><br><span class="line">        parent.left = subLR;</span><br><span class="line">        subL.right = parent;</span><br><span class="line">        <span class="keyword">if</span>(subLR!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//注意subLR可能为空</span></span><br><span class="line">            subLR.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//parent的节点上面可能是还有节点的 你在这里不只是要把当前树的根节点的parent指针指上去就好</span></span><br><span class="line">        <span class="comment">//在这里还要考虑 原来树的根节点的父节点的left 或 right 指针的变化</span></span><br><span class="line">        <span class="comment">// （在这里还要判断 父节点为空 即原parent就是root 原parent是父节点的左儿子 原parent是父节点的右儿子 三种情况 分别做处理）</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">pParent</span> <span class="operator">=</span> parent.parent;</span><br><span class="line">        parent.parent = subL;</span><br><span class="line">        <span class="keyword">if</span>(pParent == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//即原parent自己本身就是根节点</span></span><br><span class="line">            subL.parent = <span class="literal">null</span>;</span><br><span class="line">            root = subL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pParent.left == parent)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//原parent是父节点的左子节点</span></span><br><span class="line">                pParent.left = subL;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//原parent是父节点的右子节点</span></span><br><span class="line">                pParent.right = subL;</span><br><span class="line">            &#125;</span><br><span class="line">            subL.parent = pParent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//平衡因子调整 最后就只有subL和parent的平衡因子变了 变为0（因为绝对值只要到了2一定要进行调整）</span></span><br><span class="line">        subL.bf = <span class="number">0</span>;</span><br><span class="line">        parent.bf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>新节点插入较高右子树的右侧 – 左单旋</li></ol><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240221041914.png" alt="CT-20240221041914" style="zoom:50%;" /><p>右子树提起来 当前parent变为右子树的左子树 原右子树的左子树变为旋转之后左子树的右子树</p><p>总结之后我们可以看到左&#x2F;右单旋都是只有parent 和 cur的bf发生了改变 都变为0 cur从左右单旋可以分为是subR或者subL</p><p>具体实现代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateLeft</span><span class="params">(TreeNode parent)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//和右旋的思想差不多 只不过关注的节点发生了改变</span></span><br><span class="line">        <span class="comment">//把左边扯下去 右边扯上来 因为是右边过高</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subR</span> <span class="operator">=</span> parent.right;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subRL</span> <span class="operator">=</span> parent.right.left;</span><br><span class="line">        <span class="comment">//因为是要由 subR 替代parent的位置 所以subR 的left需要发生变化</span></span><br><span class="line">        subR.left = parent;</span><br><span class="line">        parent.right = subRL;</span><br><span class="line">        <span class="keyword">if</span>(subRL != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//subRL不一定存在 可能是空的 避免空指针异常</span></span><br><span class="line">            subRL.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">pParent</span> <span class="operator">=</span> parent.parent;</span><br><span class="line">        parent.parent = subR;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可能整棵树是某一节点的左树或者右树 也有可能这就是整一棵树</span></span><br><span class="line">        <span class="keyword">if</span>(pParent == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root = subR;</span><br><span class="line">            subR.parent = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pParent.left == parent)</span><br><span class="line">            &#123;</span><br><span class="line">                pParent.left = subR;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pParent.right = subR;</span><br><span class="line">            &#125;</span><br><span class="line">            subR.parent = pParent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后还是平衡因子要进行调整</span></span><br><span class="line">        subR.bf = <span class="number">0</span>;</span><br><span class="line">        parent.bf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>新节点插入较高左子树的右侧：先左单旋再右单旋</li></ol><p>AVL树不适合大量的插入和删除 要保持平衡 只适合静态数据的查找</p><p>假设只是进行简单的右旋 做不到 结果只是从左边比右边高2 变成 右边比左边高2</p><p>先左旋cur这棵树 再对parent进行右旋 平衡因子的调整情况需要分析</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateLR</span><span class="params">(TreeNode parent)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subL</span> <span class="operator">=</span> parent.left;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subLR</span> <span class="operator">=</span> subL.right;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bf</span> <span class="operator">=</span> subLR.bf;</span><br><span class="line"></span><br><span class="line">        rotateLeft(parent.left);</span><br><span class="line">        rotateRight(parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(bf == -<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            subL.bf = <span class="number">0</span>;</span><br><span class="line">            subLR.bf = <span class="number">0</span>;</span><br><span class="line">            parent.bf = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(bf == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            subL.bf = -<span class="number">1</span>;</span><br><span class="line">            subLR.bf = <span class="number">0</span>;</span><br><span class="line">            parent.bf = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">//bf为0时 经过左旋和右旋的修改 本身就是平衡的 不需要修改</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>新节点插入较高右子树的左侧 – 右左 ： 先右单旋 再 左单旋 – 右左双旋</li></ol><p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/%E7%AC%94%E8%AE%B0%202024%E5%B9%B42%E6%9C%8819%E6%97%A5.jpeg" alt="笔记 2024年2月19日"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右左双旋</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent bf为2的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateRL</span><span class="params">(TreeNode parent)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subR</span> <span class="operator">=</span> parent.right;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">subRL</span> <span class="operator">=</span> subR.left;</span><br><span class="line">      <span class="type">int</span> <span class="variable">bf</span> <span class="operator">=</span> subRL.bf;</span><br><span class="line">        rotateRight(subR);</span><br><span class="line">        rotateLeft(parent);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(bf == -<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            subRL.bf = <span class="number">0</span>;</span><br><span class="line">            subR.bf = <span class="number">1</span>;</span><br><span class="line">            parent.bf = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(bf == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            subRL.bf = <span class="number">0</span>;</span><br><span class="line">            subR.bf = <span class="number">0</span>;</span><br><span class="line">            parent.bf = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>插入操作的总代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//不管怎样，先按照二叉搜索树来进行插入 不同的是平衡因子 要根据平衡因子进行旋转操作</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        parent = cur;</span><br><span class="line">        <span class="keyword">if</span>(val &lt; cur.val)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(val &gt; cur.val)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//二叉搜索树中没有重复的节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    <span class="keyword">if</span>(val &lt; parent.val)</span><br><span class="line">    &#123;</span><br><span class="line">        parent.left = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        parent.right = node;</span><br><span class="line">    &#125;</span><br><span class="line">    node.parent = parent;</span><br><span class="line">    cur = node;</span><br><span class="line">    <span class="comment">//平衡因子的修改 需要向上调整(向上调整也要看是否需要)</span></span><br><span class="line">    <span class="keyword">while</span>(parent!=<span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先看cur是parent的左还是右 决定平衡因子的变化怎么变</span></span><br><span class="line">        <span class="keyword">if</span>(cur == parent.right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果cur 为 parent 的右子树 parent的bf++</span></span><br><span class="line">            parent.bf++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果cur 为 parent 的左子树 parent的bf--</span></span><br><span class="line">            parent.bf--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查当前的平衡因子是不是绝对值小于等于1</span></span><br><span class="line">        <span class="comment">//分情况讨论看是否需要向上调整</span></span><br><span class="line">        <span class="keyword">if</span>(parent.bf == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//不需要向上调整 整棵树已经平衡</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(parent.bf == -<span class="number">1</span> || parent.bf == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//待定 不确定上面的节点是否平衡 只确定当前这棵树平衡 继续向上修改平衡因子</span></span><br><span class="line">            cur = parent;</span><br><span class="line">            parent = parent.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//肯定不平衡 因为左右高度差已经大于1 此时需要调整（旋转）</span></span><br><span class="line">            <span class="comment">//旋转有 左单旋 右单旋 左右双旋 右左双旋</span></span><br><span class="line">            <span class="keyword">if</span>(parent.bf == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//右树高 要调整右树的情况</span></span><br><span class="line">                <span class="keyword">if</span>(cur.bf == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//右边单支 直接左旋 将右子节点作为根节点进行旋转 例如 8 9 10</span></span><br><span class="line">                    rotateLeft(parent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cur.bf == -<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//先右旋 再左旋</span></span><br><span class="line">                    rotateRL(parent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(parent.bf == -<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//左树高 要调整左树的情况</span></span><br><span class="line">                <span class="keyword">if</span>(cur.bf == -<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//左边单支的情况 右单旋</span></span><br><span class="line">                    rotateRight(parent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cur.bf == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//先左旋 后右旋</span></span><br><span class="line">                    rotateLR(parent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//旋转之后就平衡了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 左右双旋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parent bf为-2的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateLR</span><span class="params">(TreeNode parent)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">subL</span> <span class="operator">=</span> parent.left;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">subLR</span> <span class="operator">=</span> subL.right;</span><br><span class="line">    <span class="type">int</span> <span class="variable">bf</span> <span class="operator">=</span> subLR.bf;</span><br><span class="line"></span><br><span class="line">    rotateLeft(parent.left);</span><br><span class="line">    rotateRight(parent);</span><br><span class="line">    <span class="comment">//经过两次旋转之后平衡因子会更新的 所以要在旋转前保留LR的平衡因子 后面方便对整棵树的</span></span><br><span class="line">    <span class="comment">//关键平衡因子进行调整</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bf == -<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        subL.bf = <span class="number">0</span>;</span><br><span class="line">        subLR.bf = <span class="number">0</span>;</span><br><span class="line">        parent.bf = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可能会出现左右双旋已经把bf改为了0</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(bf == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        subL.bf = -<span class="number">1</span>;</span><br><span class="line">        subLR.bf = <span class="number">0</span>;</span><br><span class="line">        parent.bf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 右左双旋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parent bf为2的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateRL</span><span class="params">(TreeNode parent)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">subR</span> <span class="operator">=</span> parent.right;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">subRL</span> <span class="operator">=</span> subR.left;</span><br><span class="line">    <span class="type">int</span> <span class="variable">bf</span> <span class="operator">=</span> subRL.bf;</span><br><span class="line">    rotateRight(subR);</span><br><span class="line">    rotateLeft(parent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bf == -<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        subRL.bf = <span class="number">0</span>;</span><br><span class="line">        subR.bf = <span class="number">1</span>;</span><br><span class="line">        parent.bf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(bf == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        subRL.bf = <span class="number">0</span>;</span><br><span class="line">        subR.bf = <span class="number">0</span>;</span><br><span class="line">        parent.bf = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 右单旋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parent bf为2的节点</span></span><br><span class="line"><span class="comment"> * 思想 ： 左边提上去 右边降下来 那要腾位置 就刚好 把 左二字的右树 移到旋转之后右儿子的左树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateRight</span><span class="params">(TreeNode parent)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//左儿子右孙</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">subLR</span> <span class="operator">=</span> parent.left.right;</span><br><span class="line">    <span class="comment">//左儿子</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">subL</span> <span class="operator">=</span> parent.left;</span><br><span class="line"></span><br><span class="line">    parent.left = subLR;</span><br><span class="line">    subL.right = parent;</span><br><span class="line">    <span class="keyword">if</span>(subLR!=<span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//注意subLR可能为空</span></span><br><span class="line">        subLR.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//parent的节点上面可能是还有节点的 你在这里不只是要把当前树的根节点的parent指针指上去就好</span></span><br><span class="line">    <span class="comment">//在这里还要考虑 原来树的根节点的父节点的left 或 right 指针的变化</span></span><br><span class="line">    <span class="comment">// （在这里还要判断 父节点为空 即原parent就是root 原parent是父节点的左儿子 原parent是父节点的右儿子 三种情况 分别做处理）</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">pParent</span> <span class="operator">=</span> parent.parent;</span><br><span class="line">    parent.parent = subL;</span><br><span class="line">    <span class="keyword">if</span>(pParent == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//即原parent自己本身就是根节点</span></span><br><span class="line">        subL.parent = <span class="literal">null</span>;</span><br><span class="line">        root = subL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pParent.left == parent)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//原parent是父节点的左子节点</span></span><br><span class="line">            pParent.left = subL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//原parent是父节点的右子节点</span></span><br><span class="line">            pParent.right = subL;</span><br><span class="line">        &#125;</span><br><span class="line">        subL.parent = pParent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//平衡因子调整 最后就只有subL和parent的平衡因子变了 变为0（因为绝对值只要到了2一定要进行调整）</span></span><br><span class="line">    subL.bf = <span class="number">0</span>;</span><br><span class="line">    parent.bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 左单旋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parent bf为2的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateLeft</span><span class="params">(TreeNode parent)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//和右旋的思想差不多 只不过关注的节点发生了改变</span></span><br><span class="line">    <span class="comment">//把左边扯下去 右边扯上来 因为是右边过高</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">subR</span> <span class="operator">=</span> parent.right;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">subRL</span> <span class="operator">=</span> parent.right.left;</span><br><span class="line">    <span class="comment">//因为是要由 subR 替代parent的位置 所以subR 的left需要发生变化</span></span><br><span class="line">    subR.left = parent;</span><br><span class="line">    parent.right = subRL;</span><br><span class="line">    <span class="keyword">if</span>(subRL != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//subRL不一定存在 可能是空的 避免空指针异常</span></span><br><span class="line">        subRL.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">pParent</span> <span class="operator">=</span> parent.parent;</span><br><span class="line">    parent.parent = subR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可能整棵树是某一节点的左树或者右树 也有可能这就是整一棵树</span></span><br><span class="line">    <span class="keyword">if</span>(pParent == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        root = subR;</span><br><span class="line">        subR.parent = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pParent.left == parent)</span><br><span class="line">        &#123;</span><br><span class="line">            pParent.left = subR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pParent.right = subR;</span><br><span class="line">        &#125;</span><br><span class="line">        subR.parent = pParent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后还是平衡因子要进行调整</span></span><br><span class="line">    subR.bf = <span class="number">0</span>;</span><br><span class="line">    parent.bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>课堂板书</strong></p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/2022-06-29-AVL%E6%A0%91.png" alt="2022-06-29-AVL树" style="zoom:60%;" /><hr><p>AVL树的查找效率非常高 例如要存储10亿个数据 然后查找 因为查找时间效率为O(logn) 也就是这棵树有30层 那也就查找差不多30次就能找到对应的数</p><p>10亿个整型数据 –》 存储空间 4GB</p><hr><p>验证当前树 是不是AVL树 怎么验证</p><p>不能简单地去检验中序遍历序列</p><p>更重要的是高度</p><p>能不能 直接遍历AVL树 判断每个节点的bf 绝对值是不是小于等于1？</p><p>不能，平衡因子是自己算的 可能出错</p><p>总结 先验证是否是二叉搜索树 –》 就用中序遍历序列</p><p>​再验证是否是平衡树 –〉高度差计算</p><p>样例：16, 3, 7, 11, 9, 26, 18, 14, 15</p><p>4, 2, 6, 1, 3, 5, 15, 7, 16, 14</p><p>测试过程中发现了一些bug：</p><ol><li>在左右双旋和右左双旋中 subLR 或者 subRL的平衡因子一定要先保存（经过两次旋转这个节点对应的平衡因子会改变）</li><li>双旋最后对平衡因子处理的时候 只有在bf为-1和bf为1的时候才要处理 bf为0的时候整棵树因为前面两次旋转已经调整好了平衡因子 不用再调整了</li><li>经过旋转的树就平衡了，parent和cur还是原来的值 不能再向上迭代了 直接退出循环 然后返回true</li></ol><hr><p><strong>AVL树的删除</strong>（了解）:</p><p>因为AVL树也是二叉搜索树，可按照二叉搜索树的方式将节点删除，然后再更新平衡因子，只不过与删除不<br>同的是，删除节点后的平衡因子更新，最差情况下一直要调整到根节点的位置。<br>具体实现可参考《算法导论》或《数据结构-用面向对象方法与C++描述》殷人昆版。</p><pre><code>1、找到需要删除的节点2、按照搜索树的删除规则删除节点--参考《二叉搜索树的删除》3、更新平衡因子，如果出现了不平衡，进行旋转。--单旋，双旋</code></pre><hr><p><strong>AVL树的性能分析</strong></p><p>平衡都是通过大量的旋转换来的</p><p>AVL树是一棵绝对平衡的二叉搜索树，其要求每个节点的左右子树高度差的绝对值都不超过1，这样可以保证查询<br>时高效的时间复杂度，即O(logN) 。但是如果要对AVL树做一些结构修改的操作，性能非常低下，比如：插入时要<br>维护其绝对平衡，旋转的次数比较多，更差的是在删除时，有可能一直要让旋转持续到根的位置。因此：如果需要<br>一种查询高效且有序的数据结构，而且数据的个数为静态的(即不会改变)，可以考虑AVL树，但一个结构经常修<br>改，就不太适合。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉平衡树&quot;&gt;&lt;a href=&quot;#二叉平衡树&quot; class=&quot;headerlink&quot; title=&quot;二叉平衡树&quot;&gt;&lt;/a&gt;二叉平衡树&lt;/h2&gt;&lt;h4 id=&quot;找工作：&quot;&gt;&lt;a href=&quot;#找工作：&quot; class=&quot;headerlink&quot; title=&quot;找工作：&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>反射枚举Lambda+JavaSE与数据结构复习</title>
    <link href="http://example.com/2024/02/19/%E5%8F%8D%E5%B0%84%E6%9E%9A%E4%B8%BELambda-JavaSE%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2024/02/19/%E5%8F%8D%E5%B0%84%E6%9E%9A%E4%B8%BELambda-JavaSE%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</id>
    <published>2024-02-19T14:37:36.000Z</published>
    <updated>2024-02-22T08:54:02.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="反射枚举Lambda"><a href="#反射枚举Lambda" class="headerlink" title="反射枚举Lambda"></a>反射枚举Lambda</h3><hr><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><table><thead><tr><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>class类</td><td>代表类的实体，在运行的java应用程序中表示类和接口</td></tr><tr><td>Field类</td><td>代表类的成员变量&#x2F;类的属性</td></tr><tr><td>Method类</td><td>代表类的方法</td></tr><tr><td>Constructor类</td><td>代表类的构造方法</td></tr></tbody></table><p>Class类 反射机制的起源</p><p>编译后的.class文件 放到JVM中 被解析为一个对象 就是Class类</p><p>getDeclaredField(String name) 可以访问所有权限的字段</p><p>getField(String name) 只能访问特定权限的字段</p><p>获取class对象：</p><p> 第一种，使用 Class.forName(“类的全路径名”); 静态方法。</p><p>前提：已明确类的全路径名。</p><p>第二种，使用 .class 方法。</p><p>说明：仅适合在编译前就已经明确要操作的 Class</p><p>第三种，使用类对象的 getClass() 方法</p><p>Class 对象 只有一个 无论获取多少次 都是那个Class对象</p><p>优点：</p><ol><li>对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法</li><li>增加程序的灵活性和扩展性，降低耦合性，提高自适应能力</li><li>反射已经运用在了很多流行框架如：Struts、Hibernate、Spring 等等。</li></ol><p>缺点：</p><ol><li>使用反射会有效率问题。会导致程序效率降低。具体参考这里：<a href="http://www.imooc.com/article/293679">http://www.imooc.com/article/293679</a></li><li>反射技术绕过了源代码的技术，因而会带来维护问题。反射代码比相应的直接代码更复杂 。</li></ol><p>课程代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//私有属性name</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;bit&quot;</span>;<span class="comment">//公有属性age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">    <span class="comment">//不带参数的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student(String,name)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i am eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i am pig&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//获取class对象</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;test0118.ReflectDemo.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(aClass);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; bClass = Student.class;</span><br><span class="line"></span><br><span class="line">        System.out.println(bClass);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cClass = <span class="keyword">new</span> <span class="title class_">Student</span>().getClass();</span><br><span class="line"></span><br><span class="line">        System.out.println(cClass);</span><br><span class="line"></span><br><span class="line">        System.out.println(aClass.equals(bClass));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> test0118.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用Class对象创建一个目标类实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reflectNewInstance</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//先拿到一个class对象</span></span><br><span class="line">        Class&lt;?&gt; c1 = Student.class;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student)c1.newInstance();</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反射私有的构造方法 屏蔽内容为获得公有的构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reflectPrivateConstructor</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; c1 = Student.class;</span><br><span class="line">        Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="comment">//私有的方法要设置为可访问</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//调用newInstance方法 实例化相应的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reflectPrivateField</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; f = Student.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> f.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) f.newInstance();</span><br><span class="line">        name.set(stu,<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reflectPrivateMethod</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; f = Student.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">function</span> <span class="operator">=</span> f.getDeclaredMethod(<span class="string">&quot;function&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) f.newInstance();</span><br><span class="line">        function.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        function.invoke(stu,<span class="string">&quot;大傻逼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//reflectPrivateConstructor();</span></span><br><span class="line"><span class="comment">//        reflectPrivateField();</span></span><br><span class="line">        reflectPrivateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举是在JDK1.5以后引入的。主要用途是：将一组常量组织起来，在这之前表示一组常量通常使用定义常量的方<br>式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GREEN</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>但是常量举例有不好的地方，例如：可能碰巧有个数字1，但是他有可能误会为是RED，现在我们可以直接用枚举<br>来进行组织，这样一来，就拥有了类型，枚举类型。而不是普通的整形1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118.EmumDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Constant</span> &#123;</span><br><span class="line">    <span class="comment">//枚举对象</span></span><br><span class="line">    RED,WHITE,GREEN</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优点：将常量组织起来统一进行管理</p><p>场景：错误状态码，消息类型，颜色的划分，状态机等等</p><p>枚举类型的方法从哪里来 都是通过默认继承原生的Enum类 而来的</p><p>我们自己写的枚举类当中 构造方法默认是私有的</p><p>会提供默认的构造方法 无需自己写</p><p>优点：</p><ol><li><p>枚举常量更简单安全 。</p></li><li><p>枚举具有内置方法 ，代码更优雅</p></li></ol><p>缺点：</p><ol><li>不可继承，无法扩展</li></ol><p>课堂代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118.EmumDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Constant</span> &#123;</span><br><span class="line">    <span class="comment">//枚举对象</span></span><br><span class="line">    RED(<span class="string">&quot;红色&quot;</span>,<span class="number">0</span>),WHITE(<span class="string">&quot;白色&quot;</span>,<span class="number">1</span>),GREEN(<span class="string">&quot;绿色&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> oridinal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Constant</span><span class="params">(String color,<span class="type">int</span> oridinal)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.oridinal = oridinal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Constant.RED);</span><br><span class="line">        System.out.println(Constant.RED.oridinal);</span><br><span class="line">        System.out.println(Constant.RED.color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main3</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; c = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">&quot;test0118.EmumDemo.Constant&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; con = c.getDeclaredConstructor(String.class, <span class="type">int</span>.class,String.class, <span class="type">int</span>.class);</span><br><span class="line">            <span class="comment">//报错 没有构造方法 原因：继承自Enum</span></span><br><span class="line">            con.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Constant</span> <span class="variable">pink</span> <span class="operator">=</span> (Constant)con.newInstance(<span class="string">&quot;粉红&quot;</span>, <span class="number">4</span>,<span class="string">&quot;999&quot;</span>,<span class="number">999</span>);</span><br><span class="line">            <span class="comment">//java.lang.IllegalArgumentException: Cannot reflectively create enum objects</span></span><br><span class="line">            <span class="comment">//不能通过反射来创建枚举对象，在源码中已经写死</span></span><br><span class="line">            System.out.println(pink);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main2</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Constant[] values = Constant.values();</span><br><span class="line">        <span class="keyword">for</span> (Constant value : values) &#123;</span><br><span class="line">            <span class="comment">//输出枚举和在数组当中的序号</span></span><br><span class="line">            System.out.println(value+<span class="string">&quot; &quot;</span>+value.ordinal());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====&quot;</span>);</span><br><span class="line">        <span class="type">Constant</span> <span class="variable">red</span> <span class="operator">=</span> Constant.valueOf(<span class="string">&quot;RED&quot;</span>);</span><br><span class="line">        System.out.println(red);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//枚举类型比较的是序号</span></span><br><span class="line">        System.out.println(RED.compareTo(WHITE));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//枚举类型的方法从哪里来 都是通过默认继承原生的Enum类 而来的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Constant</span> <span class="variable">c</span> <span class="operator">=</span> Constant.RED;</span><br><span class="line">        <span class="comment">//switch里的参数可以是枚举类型</span></span><br><span class="line">        <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">            <span class="keyword">case</span> RED -&gt; System.out.println(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> WHITE -&gt; System.out.println(<span class="string">&quot;白色&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> GREEN -&gt; System.out.println(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h4><p>通过表达式 来 代替 功能接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> PriorityQueue&lt;Map.Entry&lt;String,Integer&gt;&gt; que = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;String, Integer&gt; o1, Map.Entry&lt;String, Integer&gt; o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">value1</span> <span class="operator">=</span> o1.getValue();</span><br><span class="line">                <span class="type">int</span> <span class="variable">value2</span> <span class="operator">=</span> o2.getValue();</span><br><span class="line">                <span class="keyword">if</span>(value1 != value2)&#123;</span><br><span class="line">                    <span class="keyword">return</span> value2 - value1;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getKey().compareTo(o2.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Lambda表达式改写为</span></span><br><span class="line">  PriorityQueue&lt;Map.Entry&lt;String,Integer&gt;&gt; que1 = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt;&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">value1</span> <span class="operator">=</span> o1.getValue();</span><br><span class="line">                <span class="type">int</span> <span class="variable">value2</span> <span class="operator">=</span> o2.getValue();</span><br><span class="line">                <span class="keyword">if</span>(value1 != value2)&#123;</span><br><span class="line">                    <span class="keyword">return</span> value2 - value1;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getKey().compareTo(o2.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>基本语法: (parameters) -&gt; expression 或 (parameters) -&gt;{ statements; }<br>Lambda表达式由三部分组成：</p><ol><li>paramaters：类似方法中的形参列表，这里的参数是函数式接口里的参数。这里的参数类型可以明确的声明<br>也可不声明而由JVM隐含的推断。另外当只有一个推断类型时可以省略掉圆括号。</li><li>-&gt;：可理解为“被用于”的意思</li><li>方法体：可以是表达式也可以代码块，是函数式接口里方法的实现。代码块可返回一个值或者什么都不反<br>回，这里的代码块块等同于方法的方法体。只有一个语句可以省略花括号，如果是表达式，也可以返回一个值或者什么都不反回。</li></ol><p>函数式接口： 一个接口 有却仅有 一个抽象方法</p><p>注解：@FunctionInterface 可以帮助检测 是否是 函数式接口 也可以帮助判断是否可以用Lambda表达式</p><p>匿名内部类中变量不能被修改 将被视作是一个常量</p><p>Lambda表达式也是一样的，因为本身其实也是一个匿名内部类</p><p>Lambda表达式在集合当中的使用</p><p>forEach()方法</p><p>sort()方法</p><p>课堂代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无返回值无参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NoParameterNoReturn</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无返回值一个参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">OneParameterNoReturn</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无返回值多个参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MoreParameterNoReturn</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有返回值无参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NoParameterReturn</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有返回值一个参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">OneParameterReturn</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有返回值多参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MoreParameterReturn</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Map中Lambda的应用</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;hello&quot;</span>,<span class="number">13</span>);</span><br><span class="line">        map.put(<span class="string">&quot;abc&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">31</span>);</span><br><span class="line">        <span class="comment">//注意map当中forEach与list中有所不同 原因是函数式接口中的accept方法此时是接收两个参数</span></span><br><span class="line">        <span class="comment">//这两个参数分别为key和value</span></span><br><span class="line">        map.forEach((x1,x2)-&gt; System.out.println(x1+<span class="string">&quot;:&quot;</span>+x2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main6</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//list中Lambda的应用</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;fxxku&quot;</span>);</span><br><span class="line">        list.forEach((x)-&gt; System.out.println(x));</span><br><span class="line">        list.sort((x1,x2)-&gt; x1.compareTo(x2));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main5</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NoParameterReturn</span> <span class="variable">noParameterReturn</span> <span class="operator">=</span> ()-&gt;<span class="number">10</span>;</span><br><span class="line">        System.out.println(noParameterReturn.test());</span><br><span class="line"></span><br><span class="line">        <span class="type">OneParameterReturn</span> <span class="variable">oneParameterReturn</span> <span class="operator">=</span> (x)-&gt;x*x;</span><br><span class="line">        System.out.println(oneParameterReturn.test(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">MoreParameterReturn</span> <span class="variable">moreParameterReturn</span> <span class="operator">=</span> (x1,x2)-&gt;x1*x2;</span><br><span class="line">        System.out.println(moreParameterReturn.test(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main4</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">           <span class="type">MoreParameterNoReturn</span> <span class="variable">moreParameterNoReturn</span> <span class="operator">=</span> (x1,x2) -&gt; System.out.println(x1+x2);</span><br><span class="line">           moreParameterNoReturn.test(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main3</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OneParameterNoReturn</span> <span class="variable">oneParameterNoReturn</span> <span class="operator">=</span> (x) -&gt; System.out.println(x);</span><br><span class="line">        oneParameterNoReturn.test(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main1</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//new后面的部分都是创建一个匿名内部类</span></span><br><span class="line">        <span class="type">NoParameterNoReturn</span> <span class="variable">noParameterNoReturn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NoParameterNoReturn</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;test......&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        noParameterNoReturn.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//()代表没有参数 -&gt; 后面代表方法体只有一行 如果有多行代码就要加花括号</span></span><br><span class="line">        <span class="type">NoParameterNoReturn</span> <span class="variable">noParameterNoReturn1</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;test......&quot;</span>);</span><br><span class="line">        noParameterNoReturn1.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 总结<br>Lambda表达式的优点很明显，在代码层次上来说，使代码变得非常的简洁。缺点也很明显，代码不易读。<br>优点：</p><ol><li>代码简洁，开发迅速</li><li>方便函数式编程</li><li>非常容易进行并行计算</li><li>Java 引入 Lambda，改善了集合操作</li></ol><p>缺点：</p><ol><li>代码可读性变差</li><li>在非并行计算中，很多计算未必有传统的 for 性能要高</li><li>不容易进行调试</li></ol><p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/20230720-map&set.png" alt="20230720-map&amp;set"></p><hr><h4 id="阶段总结：-思维导图"><a href="#阶段总结：-思维导图" class="headerlink" title="阶段总结：(思维导图)"></a>阶段总结：(思维导图)</h4><p>  Java SE 语法阶段复习导图：</p><p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/JavaSE%E8%AF%AD%E6%B3%95%E9%98%B6%E6%AE%B5%E5%A4%8D%E4%B9%A0%E5%AF%BC%E5%9B%BE.png" alt="JavaSE语法阶段复习导图"></p><p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%98%B6%E6%AE%B5%E5%A4%8D%E4%B9%A0%E5%AF%BC%E5%9B%BE.png" alt="数据结构阶段复习导图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;反射枚举Lambda&quot;&gt;&lt;a href=&quot;#反射枚举Lambda&quot; class=&quot;headerlink&quot; title=&quot;反射枚举Lambda&quot;&gt;&lt;/a&gt;反射枚举Lambda&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="Java语法" scheme="http://example.com/categories/Java%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="Java语法" scheme="http://example.com/tags/Java%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="http://example.com/2024/02/19/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://example.com/2024/02/19/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2024-02-19T06:49:06.000Z</published>
    <updated>2024-02-22T08:54:15.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode热题100-第一题-两数之和"><a href="#LeetCode热题100-第一题-两数之和" class="headerlink" title="LeetCode热题100 第一题 两数之和"></a>LeetCode热题100 第一题 两数之和</h3><p><a href="https://leetcode.cn/problems/two-sum/">两树之和</a><br>思路： 重点 找到相应的值和对应的下标 建立关系 所以 我们这里要使用HashMap HashMap的时间效率最高 查找 插入 的时间复杂度都为O(1)<br>我们要尽量在一轮循环中结束 把时间复杂度控制在O(N) 那么我们就可以采取边遍历数组边对hashMap操作的思路<br>代码与具体思路如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="comment">// int front = 0;</span></span><br><span class="line">        <span class="comment">// int []res = new int[2];</span></span><br><span class="line">        <span class="comment">// while(front!=nums.length-1)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     for(int i=front+1;i&lt;nums.length;i++)</span></span><br><span class="line">        <span class="comment">//     &#123;</span></span><br><span class="line">        <span class="comment">//         if(nums[front]+nums[i] == target)</span></span><br><span class="line">        <span class="comment">//         &#123;</span></span><br><span class="line">        <span class="comment">//             res[0] = front;</span></span><br><span class="line">        <span class="comment">//             res[1] = i;</span></span><br><span class="line">        <span class="comment">//             return res;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     front++;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return res;</span></span><br><span class="line">        <span class="comment">//上面代码的时间复杂度为O(N^2)]</span></span><br><span class="line">        <span class="comment">//下面是题解中给的思路：用HashMap 如果 在map中找不到target-num[i]就插入 </span></span><br><span class="line">        <span class="comment">//key为这个数的值 value为这个数所在的位置</span></span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(target-nums[i]))&#123;</span><br><span class="line">                <span class="comment">//直接返回对应的数组</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(target-nums[i]),i&#125;;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//并没有则插入map当中</span></span><br><span class="line">                map.put(nums[i],i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">//分析该段代码的时间复杂度：</span></span><br><span class="line">        <span class="comment">//首先遍历一轮数组 时间复杂度为O(N)</span></span><br><span class="line">        <span class="comment">//然后循环里面的操作就是 在hashMap中找是否有这个元素 插入hashmap 获取hashmap中的值</span></span><br><span class="line">        <span class="comment">//这些操作时间复杂度均为O(1)</span></span><br><span class="line">        <span class="comment">//所以最后的时间复杂度是O(N) 比上面的代码时间效率大大提高</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;LeetCode热题100-第一题-两数之和&quot;&gt;&lt;a href=&quot;#LeetCode热题100-第一题-两数之和&quot; class=&quot;headerlink&quot; title=&quot;LeetCode热题100 第一题 两数之和&quot;&gt;&lt;/a&gt;LeetCode热题100 第一题 两数</summary>
      
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode热题100" scheme="http://example.com/tags/LeetCode%E7%83%AD%E9%A2%98100/"/>
    
  </entry>
  
  <entry>
    <title>字符串与泛型</title>
    <link href="http://example.com/2024/02/18/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%B3%9B%E5%9E%8B/"/>
    <id>http://example.com/2024/02/18/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%B3%9B%E5%9E%8B/</id>
    <published>2024-02-18T14:05:35.000Z</published>
    <updated>2024-02-22T08:54:51.801Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><hr><p>双引号引起来的 –&gt; 字符串常量 –》存放在字符串常量池当中 StringPool</p><p>StringTable –&gt; C++</p><p>存储字符串常量的时候 会先检查当前常量池是否存在 你所要存储的常量</p><p>java程序中 字面类型的常量经常使用 为了使程序的运行速度更快 更节省内存 java为8种基本数据类型 和String类提供了常量池</p><p>池是一种编程中常见的 重要的提升效率的方式</p><p>Java8以后池在堆当中</p><p>new一定会分配内存 一个value 一个hash 两个域 </p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240218133813.png" alt="CT-20240218133813" style="zoom:50%;" /> <p>Intern()方法</p><p>比如String类型的变量s1调用intern()方法 会把自己的值扔到常量池中 那么之后的字面量就是这个常量池中的对象了 也即之后的s2赋值相同字面量 用等号与s1进行比较的时候 会出现相等的情况</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240218134844.png" alt="CT-20240218134844" style="zoom:50%;" /><hr><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>通配符 ？ 不知道自己要获取的是什么类型的数据</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240218135531.png" alt="CT-20240218135531" style="zoom:50%;" /><p>泛型上界： ？ extends xxx 以某类型作为上界 限制可以传入的泛型</p><p>泛型下界： ？super xxx 以某类型作为下界</p><p>上界和下界都是闭区间</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;双引号引起来的 –&amp;gt; 字符串常量 –》存放在字符串常量池当中 StringPool&lt;/p&gt;
&lt;p&gt;StringTab</summary>
      
    
    
    
    <category term="Java语法" scheme="http://example.com/categories/Java%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="Java语法" scheme="http://example.com/tags/Java%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Map和Set</title>
    <link href="http://example.com/2024/02/18/map%E5%92%8Cset/"/>
    <id>http://example.com/2024/02/18/map%E5%92%8Cset/</id>
    <published>2024-02-18T13:12:15.000Z</published>
    <updated>2024-02-22T08:55:09.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h2><p>TreeSet TreeMap底层是红黑树 – 是一种特殊的二叉搜索树</p><p>二叉搜索树又称二叉排序树，它或者是一棵空树，或者是具有以下性质的二叉树:<br>若它的左子树不为空，则左子树上所有节点的值都小于根节点的值<br>若它的右子树不为空，则右子树上所有节点的值都大于根节点的值<br>它的左右子树也分别为二叉搜索树</p><p>二叉搜索树的删除（难度）：</p><p>删除完之后还要保证是二叉搜索树</p><p>情况：（第一种 第二种情况都很简单 第三种情况很复杂）</p><ol><li><p>要删除的节点左右子树都为空： 看该节点是父节点的左还是右 相应的指针置空即可</p></li><li><p>要删除的节点只有一边为空：</p><ol><li><p>如果 要删除的节点是父节点的左子节点 </p><ol><li>若左子树为空，则让父节点的左子树为该节点的右子树</li><li>若右子树为空，则让父节点的右子树为该节点的左子树</li></ol></li><li><p>如果 要删除的节点是父节点的右子节点 同理</p></li></ol></li><li><p>要删除的节点左右子树都不为空</p></li></ol><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240217114836.png" alt="CT-20240217114836" style="zoom:50%;" /><p>现在要删除90 节点 方法：替罪羊删除法</p><p>思考：现在如何选择替换90的数呢 ，就要选择最接近的数 由二叉搜索树的逻辑结构可以得到75 和 95 的位置 （也就是左儿子的右最后孙节点 和 右儿子的左最后孙节点 最合适 最接近爷节点）</p><p>删除并不是真正意义上的删除 是覆盖值</p><p>找到替罪羊 就是两个节点中选一个 这种节点下面肯定是没有右子节点或者左子节点了</p><p>删除原理 ： 二叉搜索树性质 最接近根节点的值 在中间位置 也就是左子树 之后一直往右走到尽头 右子树 之后一直往左走到尽头</p><p>还要进行处理特殊情况 也就是 tp都没有走动 然后就使tp的left等于t的right，这样的做法是不行的 破坏了二叉搜索树的逻辑结构（即找不到替罪羊的情况）</p><p>** 补充：要想利用二叉搜索树排序，直接中序遍历即可，二叉搜索树的中序遍历结果一定是有序序列（升序） **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;ClassEscapesDefinedScope&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> val;</span><br><span class="line">        <span class="keyword">private</span> TreeNode left;</span><br><span class="line">        <span class="keyword">private</span> TreeNode right;</span><br><span class="line"></span><br><span class="line">        TreeNode(<span class="type">int</span> val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> TreeNode root;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.val &gt; val) &#123;</span><br><span class="line">                <span class="comment">//在左边</span></span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur.val &lt; val) &#123;</span><br><span class="line">                <span class="comment">//在右边</span></span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入节点到二叉搜索树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 节点值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否插入成功（如果与树中元素重复是插入不成功的）</span></span><br><span class="line"><span class="comment">     * 思路：牢记二叉搜索树的性质 ： 新插入的元素一定可以满足在叶子节点的位置 所以无需考虑</span></span><br><span class="line"><span class="comment">     * 元素插在树枝中间的情况 那么就定义一前一后两个指针 根据大小关系找到路径</span></span><br><span class="line"><span class="comment">     * （前面的指针到了null时停止循环 parent就到了叶子节点的位置</span></span><br><span class="line"><span class="comment">     * 然后就比较找到parent到底是应该放在左边还是右边）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//找到合适的位置，每次插入的一定都是叶子节点（cur为空）</span></span><br><span class="line">        <span class="comment">//二叉搜索树本身不能有重复的数据 所以相等时不处理 为空时直接插入即可</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//要判断空 避免空指针异常</span></span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//找位置 一定在叶子处</span></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            parent = cur;</span><br><span class="line">            <span class="keyword">if</span>(cur.val &gt; val) &#123;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur.val &lt;val)&#123;</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//二叉搜索树不能有重复的数据，直接返回插入失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到了要插入的位置</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">if</span>(parent.val &lt; val)&#123;</span><br><span class="line">            parent.right = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            parent.left = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//二叉搜索树的删除（难点）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//删除前先要找到节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.val &gt; val)&#123;</span><br><span class="line">                <span class="comment">//查找的在左边</span></span><br><span class="line">                parent = cur;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur.val &lt; val)&#123;</span><br><span class="line">                <span class="comment">//查找的在右边</span></span><br><span class="line">                parent = cur;</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//找到了 删除节点的逻辑</span></span><br><span class="line">                removeNode(parent,cur);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的删除节点操作</span></span><br><span class="line"><span class="comment">     * 要删除节点 ，要知道当前节点在树中的位置 所以要传入两个参数parent 和 cur</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 当前节点的父节点 -- 待删除节点的双亲节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cur 当前节点 -- 待删除的节点</span></span><br><span class="line"><span class="comment">     *  思路： 三种情况</span></span><br><span class="line"><span class="comment">     *  1. 两个子树都为空</span></span><br><span class="line"><span class="comment">     *  2. 只有一个子树为空</span></span><br><span class="line"><span class="comment">     *  3.两个子树都不为空（最复杂的情况）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(TreeNode parent,TreeNode cur)</span> &#123;</span><br><span class="line">        <span class="comment">//为什么这里要分出cur为根节点的情况呢 ：因为 如果cur为根节点 那么 parent此时为null 会报空指针异常</span></span><br><span class="line">        <span class="keyword">if</span>(cur.left == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//cur是根</span></span><br><span class="line">            <span class="keyword">if</span>(cur == root) &#123;</span><br><span class="line">                root = cur.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//cur不是根</span></span><br><span class="line">                <span class="comment">//待删除节点左子树为空的情况</span></span><br><span class="line">                <span class="comment">//又分为两种情况</span></span><br><span class="line">                <span class="keyword">if</span>(cur == parent.left) &#123;</span><br><span class="line">                    <span class="comment">//使父节点的左子树等于该节点的右子树</span></span><br><span class="line">                    parent.left = cur.right;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur == parent.right)&#123;</span><br><span class="line">                    <span class="comment">//使父节点的右子树等于该节点的右子树</span></span><br><span class="line">                    parent.right = cur.right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//待删除节点右子树为空的情况</span></span><br><span class="line">            <span class="keyword">if</span>(cur == root) &#123;</span><br><span class="line">                <span class="comment">//cur是根节点,新的根为cur的左子节点</span></span><br><span class="line">                root = cur.left;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//cur不为根节点</span></span><br><span class="line">                <span class="keyword">if</span> (cur == parent.left) &#123;</span><br><span class="line">                    <span class="comment">//是父节点的左子节点 就让父节点的左子节点为该节点的左子节点</span></span><br><span class="line">                    parent.left = cur.left;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == parent.right) &#123;</span><br><span class="line">                    <span class="comment">//是父节点的右子节点 就让父节点的右子节点为该节点的左子节点</span></span><br><span class="line">                    parent.right = cur.left;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//第三种情况，找中间的最孙辈,默认右子树的左最后孙节点</span></span><br><span class="line">            <span class="comment">//这里已经是确认左右都有子节点的情况 所以不用担心 t 空指针异常</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">tp</span> <span class="operator">=</span> cur;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">t</span> <span class="operator">=</span> cur.right;</span><br><span class="line">            <span class="keyword">while</span>(t.left!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tp = t;</span><br><span class="line">                t = t.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到了目标的替罪羊节点 赋值</span></span><br><span class="line">            cur.val = t.val;</span><br><span class="line">            <span class="comment">//还要注意处理 tp仍然为cur的情况 而此时又有左子树 就与逻辑相悖</span></span><br><span class="line">            <span class="keyword">if</span>(t == tp.left)&#123;</span><br><span class="line">                <span class="comment">//正常情况</span></span><br><span class="line">                tp.left = t.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//非正常情况 也就是 t此时为tp的右 就是代表着tp并没有走动的情况 此时把右子节点的右边拿上来即可</span></span><br><span class="line">                tp.right = t.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求树的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 树的高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDepth</span><span class="params">(TreeNode t)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> getDepth(t.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> getDepth(t.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftHeight, rightHeight)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立一个可视化打印的函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayOnBoard</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先找到树的深度是多少，才能确定画布的宽和高如何</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> getDepth(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; depth; i++) &#123;</span><br><span class="line">            height+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i != depth-<span class="number">1</span>) &#123;</span><br><span class="line">                height+=len;</span><br><span class="line">                len*=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> height*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//取得了画布的宽和高,接下来开始画</span></span><br><span class="line">        String [][] board = <span class="keyword">new</span> <span class="title class_">String</span>[height][width];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; height; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; width; j++) &#123;</span><br><span class="line">                board[i][j] = <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> width/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        paintOnBoard(root,x,y,len/<span class="number">2</span>,board);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; height; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; width; j++) &#123;</span><br><span class="line">                System.out.print(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把元素和枝干都画在画板上</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 当前树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 当前树的根节点的横坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y 当前树的根节点的纵坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> len 当前树枝干的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> board 画布数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paintOnBoard</span><span class="params">(TreeNode t,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> len,String[][] board)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> String.valueOf(t.val);</span><br><span class="line">        <span class="comment">//画根节点元素</span></span><br><span class="line">        board[y][x] = res;</span><br><span class="line">        <span class="comment">//画左边的边 如果左子节点不存在不用画</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t.left!=<span class="literal">null</span>)</span><br><span class="line">                board[y+i][x-i] = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(t.right!=<span class="literal">null</span>)</span><br><span class="line">                board[y+i][x+i] = <span class="string">&quot;\\&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        paintOnBoard(t.left,x-len-<span class="number">1</span>,y+len+<span class="number">1</span>,len/<span class="number">2</span>,board);</span><br><span class="line">        paintOnBoard(t.right,x+len+<span class="number">1</span>,y+len+<span class="number">1</span>,len/<span class="number">2</span>,board);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//testBST();</span></span><br><span class="line">        <span class="comment">//testMap();</span></span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;plo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMap</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        TreeMap&lt;String,Integer&gt; map1 = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认是按照key进行比较插入红黑树</span></span><br><span class="line">        map1.put(<span class="string">&quot;this&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;phe&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;a&quot;</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map1.get(<span class="string">&quot;phe&quot;</span>));</span><br><span class="line">        <span class="comment">//get方法 没有该元素 会报空指针异常 此时用getOrDefault方法可以避免异常的出现</span></span><br><span class="line">        System.out.println(map1.getOrDefault(<span class="string">&quot;phe8&quot;</span>, <span class="number">999</span>));</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; s = map1.keySet(); <span class="comment">//把所有的key取出来放到Set里面</span></span><br><span class="line"></span><br><span class="line">        Collection&lt;Integer&gt; values = map1.values();</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map1.entrySet();</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBST</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BinarySearchTree</span> <span class="variable">bst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>();</span><br><span class="line">        bst.insert(<span class="number">60</span>);</span><br><span class="line">        bst.insert(<span class="number">40</span>);</span><br><span class="line">        bst.insert(<span class="number">90</span>);</span><br><span class="line">        bst.insert(<span class="number">73</span>);</span><br><span class="line">        bst.insert(<span class="number">10</span>);</span><br><span class="line">        bst.insert(<span class="number">45</span>);</span><br><span class="line"></span><br><span class="line">        bst.insert(<span class="number">120</span>);</span><br><span class="line">        bst.insert(<span class="number">195</span>);</span><br><span class="line">        bst.insert(<span class="number">75</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(bst.getDepth(bst.root));</span><br><span class="line">        bst.displayOnBoard();</span><br><span class="line"></span><br><span class="line">        bst.remove(<span class="number">90</span>);</span><br><span class="line">        bst.displayOnBoard();</span><br><span class="line"></span><br><span class="line">        bst.remove(<span class="number">40</span>);</span><br><span class="line">        bst.displayOnBoard();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析二叉搜索树 ：</p><p>可能为完全二叉树 也可能为单链表 时间效率可能会出现极低的情况 因此出现了AVL树 </p><p>AVL树会通过树的旋转 来降低树的高度 </p><p>左旋 右旋 左右双旋 右左双旋</p><p>红黑树 ：</p><p>4个性质 通过节点的颜色来调整树 尽可能达到平等 旋转较少 </p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/20230717-map&set.png" alt="20230717-map&set" style="zoom:60%;" /><hr><p>纯key模型 TreeSet. HashSet</p><p>key-value模型 TreeMap HashMap</p><p>key是唯一的 （二叉搜索树的性质）</p><p>TreeMap 的key不能为空 value可以为空（因为要比较） HashMap的key和value就都可以为空</p><p>Map可以用keySet方法 和values方法提取出key和value</p><p>Map中插入重复的key 会直接覆盖之前的value </p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240217141741.png" alt="CT-20240217141741 " style="zoom:50%;" /><p>TreeSet的底层是一个TreeMap</p><p>TreeMap&lt;E,Object&gt;</p><p>不能存放重复的元素 最大的功能就是为集合去重</p><p>TreeSet不能插入null的key HashSet可以</p><hr><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>基本思想：理想的搜索方法，可以不经过任何比较，一次直接从表中得到要搜索的元素。 如果构造一种存储结构，通过某种函数(hashFunc)使元素的存储位置与它的关键码之间能够建立一一映射的关系，那么在查找时通过该函数可以很快找到该元素</p><p>哈希冲突：对于两个数据元素的关键字 k<sub>i</sub> 和 k<sub>j</sub>(i !&#x3D; j)，有k<sub>i</sub> !&#x3D;  k<sub>j</sub>，但有：Hash( k<sub>i</sub> ) &#x3D;&#x3D; Hash(k<sub>i</sub> )，即：不同关键字通过相同哈希哈数计算出相同的哈希地址，该种现象称为<strong>哈希冲突</strong>或<strong>哈希碰撞</strong>。<br>把具有不同关键码而具有相同哈希地址的数据元素称为“同义词”。</p><p>避免冲突：尽量降低冲突率，设计合理的哈希函数</p><ol><li>哈希函数的定义域必须包括需要存储的全部关键码，而如果散列表允许有m个地址时，其值域必须在0到m-1之间</li><li>哈希函数计算出来的地址能均匀分布在整个空间中</li><li>哈希函数应该比较简单</li></ol><p>常见哈希函数</p><ol><li>直接定制法–(常用)<br>取关键字的某个线性函数为散列地址：Hash（Key）&#x3D; A*Key + B 优点：简单、均匀 缺点：需要事先知道关<br>键字的分布情况 使用场景：适合查找比较小且连续的情况 面试题：字符串中第一个只出现一次字符</li><li>除留余数法–(常用)<br>设散列表中允许的地址数为m，取一个不大于m，但最接近或者等于m的质数p作为除数，按照哈希函数：<br>Hash(key) &#x3D; key% p(p&lt;&#x3D;m),将关键码转换成哈希地址</li></ol><p>第二种思路：负载因子</p><p>增加散列表的长度</p><p>负载因子的定义：填入表中的元素个数&#x2F;散列表的长度</p><p>负载因子要控制在0.75之内 超过就要扩容</p><p>解决哈希冲突：</p><ol><li>闭散列：也叫开放定址法，当发生哈希冲突时，如果哈希表未被装满，说明在哈希表中必然还有空位置，那么可以把key存放到冲突位置中的“下一个” 空位置中去。</li></ol><p>二次探测：</p><p>线性探测的缺陷是产生冲突的数据堆积在一块，这与其找下一个空位置有关系，因为找空位置的方式就是挨</p><p>着往后逐个去找，因此二次探测为了避免该问题，找下一个空位置的方法为：H<sub>i</sub> &#x3D; ( H<sub>0</sub>+i<sup>2</sup> )% m, 或者：<br>&#x3D; (H<sub>0</sub> - i<sup>2</sup>)% m。其中：i &#x3D; 1,2,3…， 是通过散列函数Hash(x)对元素的关键码 key 进行计算得到的位置，<br>m是表的大小。 对于2.1中如果要插入44，产生冲突，使用解决后的情况为：</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2024-02-17%2023.46.31.png" alt="截屏2024-02-17 23.46.31" style="zoom:50%;" /><ol start="2"><li>开散列（重点）</li></ol><p>和JDK中的做法是一样的</p><p>开散列法又叫链地址法(开链法)，首先对关键码集合用散列函数计算散列地址，具有相同地址的关键码归于同一子<br>集合，每一个子集合称为一个桶，各个桶中的元素通过一个单链表链接起来，各链表的头结点存储在哈希表中。</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240217154947.png" alt="CT-20240217154947" style="zoom:50%;" /><p>增删查改 复杂度都是O(1)</p><p>负载因子会控制链表的长度 使其保留在常数项等级 O(1)</p><p>hashMap 是 典型 的 浪费空间换取时间的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashBuck</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> key;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node[] array;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> usedSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashBuck</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> key % array.length;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> array[index];</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">null</span>)&#123;</span><br><span class="line">            array[index] = <span class="keyword">new</span> <span class="title class_">Node</span>(key,val);</span><br><span class="line">            usedSize++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.key == key)&#123;</span><br><span class="line">                cur.val = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur.key == key)&#123;</span><br><span class="line">            cur.val = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = <span class="keyword">new</span> <span class="title class_">Node</span>(key,val);</span><br><span class="line">        usedSize++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(loadFactor()&gt;<span class="number">0.75</span>)&#123;</span><br><span class="line">            <span class="comment">//扩容</span></span><br><span class="line">            resize();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//扩容需要注意的事项是什么？</span></span><br><span class="line">        <span class="comment">//一定要注意把所有的元素重新哈希</span></span><br><span class="line">        Node [] tmpArr = <span class="keyword">new</span> <span class="title class_">Node</span>[array.length*<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//遍历原来的数组 将所有的元素 重新哈希到新的数组当中</span></span><br><span class="line">        <span class="keyword">for</span> (Node node : array) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> node;</span><br><span class="line">            <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> cur.key % tmpArr.length;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">tmp</span> <span class="operator">=</span> tmpArr[index];</span><br><span class="line">                <span class="keyword">if</span> (tmp == <span class="literal">null</span>) &#123;</span><br><span class="line">                    tmpArr[index] = <span class="keyword">new</span> <span class="title class_">Node</span>(cur.key, cur.val);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (tmp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                    tmp = tmp.next;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp.next = <span class="keyword">new</span> <span class="title class_">Node</span>(cur.key, cur.val);</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        array = tmpArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">loadFactor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usedSize*<span class="number">1.0</span>/ array.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> key% array.length;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> array[index];</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.key == key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> cur.val;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HashBuck</span> <span class="variable">hashBuck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashBuck</span>();</span><br><span class="line">        hashBuck.put(<span class="number">12</span>,<span class="number">3</span>);</span><br><span class="line">        hashBuck.put(<span class="number">12</span>,<span class="number">4</span>);</span><br><span class="line">        hashBuck.put(<span class="number">22</span>,<span class="number">5</span>);</span><br><span class="line">        hashBuck.put(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        hashBuck.put(<span class="number">11</span>,<span class="number">11</span>);</span><br><span class="line">        hashBuck.put(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">        hashBuck.put(<span class="number">13</span>,<span class="number">6</span>);</span><br><span class="line">        hashBuck.put(<span class="number">66</span>,<span class="number">14</span>);</span><br><span class="line">        hashBuck.put(<span class="number">73</span>,<span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(hashBuck.get(<span class="number">12</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//hashcode 在Object中无法看到实现方法 是用C/C++代码写的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(id, person.id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;ClassEscapesDefinedScope&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashBuck2</span> &lt;K,V&gt;&#123;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HashNode</span>&lt;K,V&gt;&#123;</span><br><span class="line">         <span class="keyword">public</span> K key;</span><br><span class="line">         <span class="keyword">public</span> V val;</span><br><span class="line">         <span class="keyword">public</span> HashNode&lt;K,V&gt; next;</span><br><span class="line">         <span class="keyword">public</span> <span class="title function_">HashNode</span><span class="params">(K key,V val)</span>&#123;</span><br><span class="line">             <span class="built_in">this</span>.key = key;</span><br><span class="line">             <span class="built_in">this</span>.val = val;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> HashNode&lt;K,V&gt;[] array;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> usedSize;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">HashBuck2</span><span class="params">()</span>&#123;</span><br><span class="line">         array = (HashNode&lt;K, V&gt;[]) <span class="keyword">new</span> <span class="title class_">HashNode</span>[<span class="number">10</span>];</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(K key,V val)</span> &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> key.hashCode() % array.length;</span><br><span class="line">         HashNode&lt;K,V&gt; cur = array[index];</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(cur == <span class="literal">null</span>)&#123;</span><br><span class="line">             array[index] = <span class="keyword">new</span> <span class="title class_">HashNode</span>&lt;&gt;(key, val);</span><br><span class="line">             usedSize++;</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(cur.key.equals(key))&#123;</span><br><span class="line">                 cur.val = val;</span><br><span class="line">                 <span class="keyword">return</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             cur = cur.next;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(cur.key.equals(key))&#123;</span><br><span class="line">             cur.val = val;</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         cur.next = <span class="keyword">new</span> <span class="title class_">HashNode</span>&lt;&gt;(key,val);</span><br><span class="line">         usedSize++;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//testHash();</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;234&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;345&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashBuck2&lt;Person,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashBuck2</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(person1,<span class="string">&quot;XiaoMing&quot;</span>);</span><br><span class="line">        map.put(person2,<span class="string">&quot;XiaoZhang&quot;</span>);</span><br><span class="line">        map.put(person2,<span class="string">&quot;XiaoMei&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(map.get(person1));</span><br><span class="line">        System.out.println(map.get(person2));</span><br><span class="line">        System.out.println(map.get(person3));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> key.hashCode() % array.length;</span><br><span class="line">        HashNode&lt;K,V&gt; cur = array[index];</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.key.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> cur.val;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于引用类型 使用hash来获取关键码</span></span><br><span class="line"><span class="comment">     * 将对象 转换成一个整数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(person1.hashCode());</span><br><span class="line">        System.out.println(person2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>面试题：问HashCode和equals的区别是什么？</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240218032400.png" alt="CT-20240218032400" style="zoom:50%;" /><p>面试题：<a href="https://leetcode.cn/problems/copy-list-with-random-pointer/">随机链表的复制</a></p><p>这一题最容易掉到的坑就是 一个节点的next域和random域不能通过直接复制</p><p>不然会造成新的链表仍然指向的是老的节点</p><p>但我们现在又要记录起老链表的random关系 不然新链表的random关系无法建立</p><p>所以这个时候我们就采用新旧链表一一对应的关系来确定某个节点的next和random应该指向谁（按照对应关系）</p><p>所以此时我们要建立一个map key为老节点的地址 value为新节点的地址</p><p>大致思路示意图：（建立新老节点地址映射表）</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240218080548.png" alt="CT-20240218080548" style="zoom:50%;" /><p>两遍：第一遍建立映射 第二遍设置每个节点的next和random 也就是把节点串起来的操作</p><p>不可以用TreeMap 因为 node类型并未实现 comparable 接口 不可比较</p><p>面试题：<a href="https://leetcode.cn/problems/jewels-and-stones/">宝石与石头</a></p><p>定义一个Set 集合 来存放宝石 遍历石头 每次遇到宝石计数器+1即可</p><p>String.toCharArray() 把字符串变为字符数组 遍历</p><p>HashSet 的时间效率 是 比TreeSet 要高的</p><p>面试题：<a href="https://www.nowcoder.com/questionTerminal/f88dafac00c8431fa363cd85a37c2d5e">旧键盘</a></p><p>去重操作：优先考虑 Set 集合</p><p>AC代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getBrokenKey</span><span class="params">(String right,String wrong)</span></span><br><span class="line">    &#123;</span><br><span class="line">        right = right.toUpperCase();</span><br><span class="line">        wrong = wrong.toUpperCase();</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch : wrong.toCharArray())&#123;</span><br><span class="line">            set.add(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedHashSet&lt;Character&gt; hs = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch : right.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(!(set.contains(ch)))&#123;</span><br><span class="line">                hs.add(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (Object o : hs.toArray()) &#123;</span><br><span class="line">            sb.append((<span class="type">char</span>) o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> <span class="string">&quot;7_This_is_a_test&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">wrong</span> <span class="operator">=</span> <span class="string">&quot;_hs_s_a_es&quot;</span>;</span><br><span class="line">        System.out.println(getBrokenKey(right, wrong));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然 这里其实也可以不用LinkedHashSet 我们可以创建一个新的set集合 边打印 边把此元素放到这个新set中 并且 要将进入条件加上 该元素不在这个新set集合里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getBrokenKey</span><span class="params">(String right,String wrong)</span></span><br><span class="line">    &#123;</span><br><span class="line">        right = right.toUpperCase();</span><br><span class="line">        wrong = wrong.toUpperCase();</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch : wrong.toCharArray())&#123;</span><br><span class="line">            set.add(ch);</span><br><span class="line">        &#125;</span><br><span class="line">      Set&lt;Character&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch : right.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(!(set.contains(ch) &amp;&amp; !set1.contains(ch))</span><br><span class="line">                sb.append(ch);</span><br><span class="line">               set1.add(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> <span class="string">&quot;7_This_is_a_test&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">wrong</span> <span class="operator">=</span> <span class="string">&quot;_hs_s_a_es&quot;</span>;</span><br><span class="line">        System.out.println(getBrokenKey(right, wrong));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>面试题：<a href="https://leetcode.cn/problems/top-k-frequent-words/"> 前K个高频单词</a></p><p>统计单词出现的次数</p><p>使用PriorityQueue 使用默认的小根堆即可 排序方式 先 按照值的大小降序排序 再 按照 key的大小升序排序 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">topKFrequent</span><span class="params">(String[] words, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 统计每个单词出现的次数</span></span><br><span class="line">        HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(word)) &#123;</span><br><span class="line">                map.put(word, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> map.get(word);</span><br><span class="line">                map.put(word, count + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用优先级队列 排序顺序 优先按照值的大小降序排序 然后再按key升序排序</span></span><br><span class="line">        PriorityQueue&lt;Map.Entry&lt;String,Integer&gt;&gt; que = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;String, Integer&gt; o1, Map.Entry&lt;String, Integer&gt; o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">value1</span> <span class="operator">=</span> o1.getValue();</span><br><span class="line">                <span class="type">int</span> <span class="variable">value2</span> <span class="operator">=</span> o2.getValue();</span><br><span class="line">                <span class="keyword">if</span>(value1 != value2)&#123;</span><br><span class="line">                    <span class="keyword">return</span> value2 - value1;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getKey().compareTo(o2.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            que.offer(entry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            list.add(que.poll().getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>HashMap 的 源码解析：</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/20230719-map&set.png" alt="20230719-map&set" style="zoom:50%;" /><p>下来还要自己再分析分析HashMap的put方法和get方法 写一篇博客……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Map和Set&quot;&gt;&lt;a href=&quot;#Map和Set&quot; class=&quot;headerlink&quot; title=&quot;Map和Set&quot;&gt;&lt;/a&gt;Map和Set&lt;/h2&gt;&lt;p&gt;TreeSet TreeMap底层是红黑树 – 是一种特殊的二叉搜索树&lt;/p&gt;
&lt;p&gt;二叉搜索树又称</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>missing semester</title>
    <link href="http://example.com/2024/02/04/missing-semester/"/>
    <id>http://example.com/2024/02/04/missing-semester/</id>
    <published>2024-02-04T15:46:34.000Z</published>
    <updated>2024-02-23T03:49:21.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Missing-semester"><a href="#Missing-semester" class="headerlink" title="Missing semester"></a>Missing semester</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line">Last login: Sat Jan 13 11:14:39 on console</span><br><span class="line">lujingxiang@MacBook-Pro-4 ~ % date</span><br><span class="line">2024年 1月15日 星期一 14时52分38秒 CST</span><br><span class="line">lujingxiang@MacBook-Pro-4 ~ % echo hello</span><br><span class="line">hello</span><br><span class="line">lujingxiang@MacBook-Pro-4 ~ % bash</span><br><span class="line"></span><br><span class="line">The default interactive shell is now zsh.</span><br><span class="line">To update your account to use zsh, please run `chsh -s /bin/zsh`.</span><br><span class="line">For more details, please visit https://support.apple.com/kb/HT208050.</span><br><span class="line">bash-3.2$ echo &quot;hello world&quot;</span><br><span class="line">hello world</span><br><span class="line">bash-3.2$ echo Hello\ World</span><br><span class="line">Hello World</span><br><span class="line">bash-3.2$ echo $PATH</span><br><span class="line">/Users/lujingxiang/.pnpm-global/2/bin:/Library/Java/JavaVirtualMachines/jdk-20.jdk/Contents/Home/bin:/Users/lujingxiang/IdeaProjects/apache-maven-3.6.1/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Library/Frameworks/Python.framework/Versions/3.11/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/Applications/VMware Fusion.app/Contents/Public:/usr/local/go/bin:.:/usr/local/go/bin:/Users/lujingxiang/go/bin:/usr/local/go/bin:/Users/lujingxiang/go/bin:/usr/local/go/bin:/Users/lujingxiang/go/bin:/usr/local/mysql/bin</span><br><span class="line">bash-3.2$ which echo</span><br><span class="line">/bin/echo</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/Users/lujingxiang</span><br><span class="line">bash-3.2$ cd /home</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/home</span><br><span class="line">bash-3.2$ cd ..</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/</span><br><span class="line">bash-3.2$ cd ./home</span><br><span class="line">bash-3.2$ [wd</span><br><span class="line">bash: [wd: command not found</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/home</span><br><span class="line">bash-3.2$ echo h</span><br><span class="line">h</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">bash-3.2$ cd ..</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">ApplicationsUserscoreshomesbinvar</span><br><span class="line">LibraryVolumesdevopttmp</span><br><span class="line">Systembinetcprivateusr</span><br><span class="line">bash-3.2$ ls dev</span><br><span class="line">aes_0ptysbttyq2</span><br><span class="line">afsc_type5ptyscttyq3</span><br><span class="line">apfs-raw-device.2.0ptysdttyq4</span><br><span class="line">auditpipeptysettyq5</span><br><span class="line">auditsessionsptysfttyq6</span><br><span class="line">autofsptyt0ttyq7</span><br><span class="line">autofs_controlptyt1ttyq8</span><br><span class="line">autofs_homedirmounterptyt2ttyq9</span><br><span class="line">autofs_notriggerptyt3ttyqa</span><br><span class="line">autofs_nowaitptyt4ttyqb</span><br><span class="line">bpf0ptyt5ttyqc</span><br><span class="line">bpf1ptyt6ttyqd</span><br><span class="line">bpf2ptyt7ttyqe</span><br><span class="line">bpf3ptyt8ttyqf</span><br><span class="line">consoleptyt9ttyr0</span><br><span class="line">cu.Bluetooth-Incoming-Portptytattyr1</span><br><span class="line">disk0ptytbttyr2</span><br><span class="line">disk0s1ptytcttyr3</span><br><span class="line">disk0s2ptytdttyr4</span><br><span class="line">disk0s3ptytettyr5</span><br><span class="line">disk1ptytfttyr6</span><br><span class="line">disk1s1ptyu0ttyr7</span><br><span class="line">disk1s2ptyu1ttyr8</span><br><span class="line">disk1s3ptyu2ttyr9</span><br><span class="line">disk1s4ptyu3ttyra</span><br><span class="line">disk2ptyu4ttyrb</span><br><span class="line">disk2s1ptyu5ttyrc</span><br><span class="line">disk2s2ptyu6ttyrd</span><br><span class="line">disk3ptyu7ttyre</span><br><span class="line">disk3s1ptyu8ttyrf</span><br><span class="line">disk3s1s1ptyu9ttys0</span><br><span class="line">disk3s2ptyuattys000</span><br><span class="line">disk3s3ptyubttys1</span><br><span class="line">disk3s4ptyucttys2</span><br><span class="line">disk3s5ptyudttys3</span><br><span class="line">disk3s6ptyuettys4</span><br><span class="line">dtraceptyufttys5</span><br><span class="line">dtracehelperptyv0ttys6</span><br><span class="line">fbtptyv1ttys7</span><br><span class="line">fdptyv2ttys8</span><br><span class="line">fseventsptyv3ttys9</span><br><span class="line">klogptyv4ttysa</span><br><span class="line">lockstatptyv5ttysb</span><br><span class="line">monotonicptyv6ttysc</span><br><span class="line">nfsclntptyv7ttysd</span><br><span class="line">nullptyv8ttyse</span><br><span class="line">oslogptyv9ttysf</span><br><span class="line">oslog_streamptyvattyt0</span><br><span class="line">perfmon_coreptyvbttyt1</span><br><span class="line">perfmon_uncoreptyvcttyt2</span><br><span class="line">pfptyvdttyt3</span><br><span class="line">pfmptyvettyt4</span><br><span class="line">profileptyvfttyt5</span><br><span class="line">ptmxptyw0ttyt6</span><br><span class="line">ptyp0ptyw1ttyt7</span><br><span class="line">ptyp1ptyw2ttyt8</span><br><span class="line">ptyp2ptyw3ttyt9</span><br><span class="line">ptyp3ptyw4ttyta</span><br><span class="line">ptyp4ptyw5ttytb</span><br><span class="line">ptyp5ptyw6ttytc</span><br><span class="line">ptyp6ptyw7ttytd</span><br><span class="line">ptyp7ptyw8ttyte</span><br><span class="line">ptyp8ptyw9ttytf</span><br><span class="line">ptyp9ptywattyu0</span><br><span class="line">ptypaptywbttyu1</span><br><span class="line">ptypbptywcttyu2</span><br><span class="line">ptypcptywdttyu3</span><br><span class="line">ptypdptywettyu4</span><br><span class="line">ptypeptywfttyu5</span><br><span class="line">ptypfrandomttyu6</span><br><span class="line">ptyq0rdisk0ttyu7</span><br><span class="line">ptyq1rdisk0s1ttyu8</span><br><span class="line">ptyq2rdisk0s2ttyu9</span><br><span class="line">ptyq3rdisk0s3ttyua</span><br><span class="line">ptyq4rdisk1ttyub</span><br><span class="line">ptyq5rdisk1s1ttyuc</span><br><span class="line">ptyq6rdisk1s2ttyud</span><br><span class="line">ptyq7rdisk1s3ttyue</span><br><span class="line">ptyq8rdisk1s4ttyuf</span><br><span class="line">ptyq9rdisk2ttyv0</span><br><span class="line">ptyqardisk2s1ttyv1</span><br><span class="line">ptyqbrdisk2s2ttyv2</span><br><span class="line">ptyqcrdisk3ttyv3</span><br><span class="line">ptyqdrdisk3s1ttyv4</span><br><span class="line">ptyqerdisk3s1s1ttyv5</span><br><span class="line">ptyqfrdisk3s2ttyv6</span><br><span class="line">ptyr0rdisk3s3ttyv7</span><br><span class="line">ptyr1rdisk3s4ttyv8</span><br><span class="line">ptyr2rdisk3s5ttyv9</span><br><span class="line">ptyr3rdisk3s6ttyva</span><br><span class="line">ptyr4stderrttyvb</span><br><span class="line">ptyr5stdinttyvc</span><br><span class="line">ptyr6stdoutttyvd</span><br><span class="line">ptyr7ttyttyve</span><br><span class="line">ptyr8tty.Bluetooth-Incoming-Portttyvf</span><br><span class="line">ptyr9ttyp0ttyw0</span><br><span class="line">ptyrattyp1ttyw1</span><br><span class="line">ptyrbttyp2ttyw2</span><br><span class="line">ptyrcttyp3ttyw3</span><br><span class="line">ptyrdttyp4ttyw4</span><br><span class="line">ptyrettyp5ttyw5</span><br><span class="line">ptyrfttyp6ttyw6</span><br><span class="line">ptys0ttyp7ttyw7</span><br><span class="line">ptys1ttyp8ttyw8</span><br><span class="line">ptys2ttyp9ttyw9</span><br><span class="line">ptys3ttypattywa</span><br><span class="line">ptys4ttypbttywb</span><br><span class="line">ptys5ttypcttywc</span><br><span class="line">ptys6ttypdttywd</span><br><span class="line">ptys7ttypettywe</span><br><span class="line">ptys8ttypfttywf</span><br><span class="line">ptys9ttyq0urandom</span><br><span class="line">ptysattyq1zero</span><br><span class="line">bash-3.2$ cd ~</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">ApplicationsMinecraftWorldWeChatProjects</span><br><span class="line">Applications (Parallels)Moviesgo</span><br><span class="line">ClionProjectsMusicnginx-1.22.0-tlias</span><br><span class="line">DesktopParallelsnginx-conf</span><br><span class="line">DocumentsPicturesnginx-sky-takeout</span><br><span class="line">DownloadsPostmanphotos</span><br><span class="line">IdeaProjectsPublictree-test</span><br><span class="line">LibraryPycharmProjects</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/Users/lujingxiang</span><br><span class="line">bash-3.2$ cd -</span><br><span class="line">/</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/</span><br><span class="line">bash-3.2$ cd ~</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/Users/lujingxiang</span><br><span class="line">bash-3.2$ ls --help</span><br><span class="line">ls: unrecognized option `--help&#x27;</span><br><span class="line">usage: ls [-@ABCFGHILOPRSTUWabcdefghiklmnopqrstuvwxy1%,] [--color=when] [-D format] [file ...]</span><br><span class="line">bash-3.2$ ls --helo</span><br><span class="line">ls: unrecognized option `--helo&#x27;</span><br><span class="line">usage: ls [-@ABCFGHILOPRSTUWabcdefghiklmnopqrstuvwxy1%,] [--color=when] [-D format] [file ...]</span><br><span class="line">bash-3.2$ ls --help</span><br><span class="line">ls: unrecognized option `--help&#x27;</span><br><span class="line">usage: ls [-@ABCFGHILOPRSTUWabcdefghiklmnopqrstuvwxy1%,] [--color=when] [-D format] [file ...]</span><br><span class="line">bash-3.2$ ls -l</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x@   5 lujingxiang  staff   160 12 10 12:24 Applications</span><br><span class="line">drwxr-xr-x@   5 lujingxiang  staff   160  1 13 11:28 Applications (Parallels)</span><br><span class="line">drwxr-xr-x@  10 lujingxiang  staff   320 12 25 23:10 ClionProjects</span><br><span class="line">drwx------@  19 lujingxiang  staff   608  1 15 14:45 Desktop</span><br><span class="line">drwx------@  18 lujingxiang  staff   576  1 13 11:17 Documents</span><br><span class="line">drwx------@  38 lujingxiang  staff  1216  1 14 10:11 Downloads</span><br><span class="line">drwxr-xr-x@  25 lujingxiang  staff   800  1 14 17:46 IdeaProjects</span><br><span class="line">drwx------+ 117 lujingxiang  staff  3744 12 20 09:01 Library</span><br><span class="line">drwxr-xr-x@   4 lujingxiang  staff   128  8 13 10:07 MinecraftWorld</span><br><span class="line">drwx------@  13 lujingxiang  staff   416 12 28 10:45 Movies</span><br><span class="line">drwx------@   8 lujingxiang  staff   256  7  7  2023 Music</span><br><span class="line">drwx------@   4 lujingxiang  staff   128  9  5 23:52 Parallels</span><br><span class="line">drwx------@   8 lujingxiang  staff   256  3 21  2023 Pictures</span><br><span class="line">drwxr-xr-x@   3 lujingxiang  staff    96  9 21 22:03 Postman</span><br><span class="line">drwxr-xr-x+   5 lujingxiang  staff   160  7 21 13:14 Public</span><br><span class="line">drwxr-xr-x    6 lujingxiang  staff   192 12 29 18:52 PycharmProjects</span><br><span class="line">drwxr-xr-x@   4 lujingxiang  staff   128 12  5 23:47 WeChatProjects</span><br><span class="line">drwxr-xr-x@   5 lujingxiang  staff   160  7 28 18:40 go</span><br><span class="line">drwxr-xr-x@  10 lujingxiang  staff   320 11 18 23:19 nginx-1.22.0-tlias</span><br><span class="line">-rw-r--r--@   1 lujingxiang  admin   720 12  5 23:14 nginx-conf</span><br><span class="line">-rw-r--r--@   1 lujingxiang  admin   768 12  5 23:14 nginx-sky-takeout</span><br><span class="line">drwxr-xr-x    2 lujingxiang  staff    64  4  3  2023 photos</span><br><span class="line">drwxr-xr-x   13 lujingxiang  staff   416 10 25 09:26 tree-test</span><br><span class="line">bash-3.2$ cd /</span><br><span class="line">bash-3.2$ ls -l</span><br><span class="line">total 10</span><br><span class="line">drwxrwxr-x  66 root  admin  2112  1 15 11:01 Applications</span><br><span class="line">drwxr-xr-x  70 root  wheel  2240 12 25 14:49 Library</span><br><span class="line">drwxr-xr-x@ 10 root  wheel   320 12 15 22:43 System</span><br><span class="line">drwxr-xr-x   5 root  admin   160 12 20 11:21 Users</span><br><span class="line">drwxr-xr-x   3 root  wheel    96  1 13 11:28 Volumes</span><br><span class="line">drwxr-xr-x@ 39 root  wheel  1248 12 15 22:43 bin</span><br><span class="line">drwxr-xr-x   2 root  wheel    64  2  9  2023 cores</span><br><span class="line">dr-xr-xr-x   4 root  wheel  4648  1 13 11:14 dev</span><br><span class="line">lrwxr-xr-x@  1 root  wheel    11 12 15 22:43 etc -&gt; private/etc</span><br><span class="line">lrwxr-xr-x   1 root  wheel    25  1 13 11:14 home -&gt; /System/Volumes/Data/home</span><br><span class="line">drwxr-xr-x   4 root  wheel   128 12  5 23:04 opt</span><br><span class="line">drwxr-xr-x   6 root  wheel   192  1 13 11:14 private</span><br><span class="line">drwxr-xr-x@ 64 root  wheel  2048 12 15 22:43 sbin</span><br><span class="line">lrwxr-xr-x@  1 root  wheel    11 12 15 22:43 tmp -&gt; private/tmp</span><br><span class="line">drwxr-xr-x@ 11 root  wheel   352 12 15 22:43 usr</span><br><span class="line">lrwxr-xr-x@  1 root  wheel    11 12 15 22:43 var -&gt; private/var</span><br><span class="line">bash-3.2$ cd ~</span><br><span class="line">bash-3.2$ cd desktop</span><br><span class="line">bash-3.2$ ls</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">RECYCLE.BINHMCL-3.5.5.jarcodeto solve.md</span></span><br><span class="line">DataStructrueMSDN.lnkeBooks截屏</span><br><span class="line">Everything.lnkVisual Studio 2022.lnkjava-109-master顺序表.md</span><br><span class="line">Files bitclasspdfnotesJava</span><br><span class="line">bash-3.2$ mv 截屏 screenshot</span><br><span class="line">bash-3.2$ vi hello.cpp</span><br><span class="line">bash-3.2$ rm hello.cpp</span><br><span class="line">bash-3.2$ vi hello.cpp</span><br><span class="line">bash-3.2$ cp hello.cpp ./code</span><br><span class="line">bash-3.2$ cd code</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">OJaaahello.cppmy-treevsProjects</span><br><span class="line">bash-3.2$ vi hello.cpp</span><br><span class="line">bash-3.2$ rm hello.cpp</span><br><span class="line">bash-3.2$ cd ..</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/Users/lujingxiang/desktop</span><br><span class="line">bash-3.2$ mkdir aaa</span><br><span class="line">bash-3.2$ rmdir</span><br><span class="line">usage: rmdir [-pv] directory ...</span><br><span class="line">bash-3.2$ rmdir aaa</span><br><span class="line">bash-3.2$ mkdir aaa</span><br><span class="line">bash-3.2$ cd aaa</span><br><span class="line">bash-3.2$ vi hello.txt</span><br><span class="line">bash-3.2$ rmdir aaa</span><br><span class="line">rmdir: aaa: No such file or directory</span><br><span class="line">bash-3.2$ cd ..</span><br><span class="line">bash-3.2$ rmdir aaa</span><br><span class="line">rmdir: aaa: Directory not empty</span><br><span class="line">bash-3.2$ rm -r aaa</span><br><span class="line">bash-3.2$ mkdir my photos</span><br><span class="line">bash-3.2$ rmdir my</span><br><span class="line">bash-3.2$ rmdir photos</span><br><span class="line">bash-3.2$ mkdir &quot;my photos&quot;</span><br><span class="line">bash-3.2$ man ls</span><br><span class="line">bash-3.2$ </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">课程第一段shell命令</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br></pre></td><td class="code"><pre><span class="line">Last login: Sat Jan 13 11:14:39 on console</span><br><span class="line">lujingxiang@MacBook-Pro-4 ~ % date</span><br><span class="line">2024年 1月15日 星期一 14时52分38秒 CST</span><br><span class="line">lujingxiang@MacBook-Pro-4 ~ % echo hello</span><br><span class="line">hello</span><br><span class="line">lujingxiang@MacBook-Pro-4 ~ % bash</span><br><span class="line"></span><br><span class="line">The default interactive shell is now zsh.</span><br><span class="line">To update your account to use zsh, please run `chsh -s /bin/zsh`.</span><br><span class="line">For more details, please visit https://support.apple.com/kb/HT208050.</span><br><span class="line">bash-3.2$ echo &quot;hello world&quot;</span><br><span class="line">hello world</span><br><span class="line">bash-3.2$ echo Hello\ World</span><br><span class="line">Hello World</span><br><span class="line">bash-3.2$ echo $PATH</span><br><span class="line">/Users/lujingxiang/.pnpm-global/2/bin:/Library/Java/JavaVirtualMachines/jdk-20.jdk/Contents/Home/bin:/Users/lujingxiang/IdeaProjects/apache-maven-3.6.1/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Library/Frameworks/Python.framework/Versions/3.11/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/Applications/VMware Fusion.app/Contents/Public:/usr/local/go/bin:.:/usr/local/go/bin:/Users/lujingxiang/go/bin:/usr/local/go/bin:/Users/lujingxiang/go/bin:/usr/local/go/bin:/Users/lujingxiang/go/bin:/usr/local/mysql/bin</span><br><span class="line">bash-3.2$ which echo</span><br><span class="line">/bin/echo</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/Users/lujingxiang</span><br><span class="line">bash-3.2$ cd /home</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/home</span><br><span class="line">bash-3.2$ cd ..</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/</span><br><span class="line">bash-3.2$ cd ./home</span><br><span class="line">bash-3.2$ [wd</span><br><span class="line">bash: [wd: command not found</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/home</span><br><span class="line">bash-3.2$ echo h</span><br><span class="line">h</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">bash-3.2$ cd ..</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">ApplicationsUserscoreshomesbinvar</span><br><span class="line">LibraryVolumesdevopttmp</span><br><span class="line">Systembinetcprivateusr</span><br><span class="line">bash-3.2$ ls dev</span><br><span class="line">aes_0ptysbttyq2</span><br><span class="line">afsc_type5ptyscttyq3</span><br><span class="line">apfs-raw-device.2.0ptysdttyq4</span><br><span class="line">auditpipeptysettyq5</span><br><span class="line">auditsessionsptysfttyq6</span><br><span class="line">autofsptyt0ttyq7</span><br><span class="line">autofs_controlptyt1ttyq8</span><br><span class="line">autofs_homedirmounterptyt2ttyq9</span><br><span class="line">autofs_notriggerptyt3ttyqa</span><br><span class="line">autofs_nowaitptyt4ttyqb</span><br><span class="line">bpf0ptyt5ttyqc</span><br><span class="line">bpf1ptyt6ttyqd</span><br><span class="line">bpf2ptyt7ttyqe</span><br><span class="line">bpf3ptyt8ttyqf</span><br><span class="line">consoleptyt9ttyr0</span><br><span class="line">cu.Bluetooth-Incoming-Portptytattyr1</span><br><span class="line">disk0ptytbttyr2</span><br><span class="line">disk0s1ptytcttyr3</span><br><span class="line">disk0s2ptytdttyr4</span><br><span class="line">disk0s3ptytettyr5</span><br><span class="line">disk1ptytfttyr6</span><br><span class="line">disk1s1ptyu0ttyr7</span><br><span class="line">disk1s2ptyu1ttyr8</span><br><span class="line">disk1s3ptyu2ttyr9</span><br><span class="line">disk1s4ptyu3ttyra</span><br><span class="line">disk2ptyu4ttyrb</span><br><span class="line">disk2s1ptyu5ttyrc</span><br><span class="line">disk2s2ptyu6ttyrd</span><br><span class="line">disk3ptyu7ttyre</span><br><span class="line">disk3s1ptyu8ttyrf</span><br><span class="line">disk3s1s1ptyu9ttys0</span><br><span class="line">disk3s2ptyuattys000</span><br><span class="line">disk3s3ptyubttys1</span><br><span class="line">disk3s4ptyucttys2</span><br><span class="line">disk3s5ptyudttys3</span><br><span class="line">disk3s6ptyuettys4</span><br><span class="line">dtraceptyufttys5</span><br><span class="line">dtracehelperptyv0ttys6</span><br><span class="line">fbtptyv1ttys7</span><br><span class="line">fdptyv2ttys8</span><br><span class="line">fseventsptyv3ttys9</span><br><span class="line">klogptyv4ttysa</span><br><span class="line">lockstatptyv5ttysb</span><br><span class="line">monotonicptyv6ttysc</span><br><span class="line">nfsclntptyv7ttysd</span><br><span class="line">nullptyv8ttyse</span><br><span class="line">oslogptyv9ttysf</span><br><span class="line">oslog_streamptyvattyt0</span><br><span class="line">perfmon_coreptyvbttyt1</span><br><span class="line">perfmon_uncoreptyvcttyt2</span><br><span class="line">pfptyvdttyt3</span><br><span class="line">pfmptyvettyt4</span><br><span class="line">profileptyvfttyt5</span><br><span class="line">ptmxptyw0ttyt6</span><br><span class="line">ptyp0ptyw1ttyt7</span><br><span class="line">ptyp1ptyw2ttyt8</span><br><span class="line">ptyp2ptyw3ttyt9</span><br><span class="line">ptyp3ptyw4ttyta</span><br><span class="line">ptyp4ptyw5ttytb</span><br><span class="line">ptyp5ptyw6ttytc</span><br><span class="line">ptyp6ptyw7ttytd</span><br><span class="line">ptyp7ptyw8ttyte</span><br><span class="line">ptyp8ptyw9ttytf</span><br><span class="line">ptyp9ptywattyu0</span><br><span class="line">ptypaptywbttyu1</span><br><span class="line">ptypbptywcttyu2</span><br><span class="line">ptypcptywdttyu3</span><br><span class="line">ptypdptywettyu4</span><br><span class="line">ptypeptywfttyu5</span><br><span class="line">ptypfrandomttyu6</span><br><span class="line">ptyq0rdisk0ttyu7</span><br><span class="line">ptyq1rdisk0s1ttyu8</span><br><span class="line">ptyq2rdisk0s2ttyu9</span><br><span class="line">ptyq3rdisk0s3ttyua</span><br><span class="line">ptyq4rdisk1ttyub</span><br><span class="line">ptyq5rdisk1s1ttyuc</span><br><span class="line">ptyq6rdisk1s2ttyud</span><br><span class="line">ptyq7rdisk1s3ttyue</span><br><span class="line">ptyq8rdisk1s4ttyuf</span><br><span class="line">ptyq9rdisk2ttyv0</span><br><span class="line">ptyqardisk2s1ttyv1</span><br><span class="line">ptyqbrdisk2s2ttyv2</span><br><span class="line">ptyqcrdisk3ttyv3</span><br><span class="line">ptyqdrdisk3s1ttyv4</span><br><span class="line">ptyqerdisk3s1s1ttyv5</span><br><span class="line">ptyqfrdisk3s2ttyv6</span><br><span class="line">ptyr0rdisk3s3ttyv7</span><br><span class="line">ptyr1rdisk3s4ttyv8</span><br><span class="line">ptyr2rdisk3s5ttyv9</span><br><span class="line">ptyr3rdisk3s6ttyva</span><br><span class="line">ptyr4stderrttyvb</span><br><span class="line">ptyr5stdinttyvc</span><br><span class="line">ptyr6stdoutttyvd</span><br><span class="line">ptyr7ttyttyve</span><br><span class="line">ptyr8tty.Bluetooth-Incoming-Portttyvf</span><br><span class="line">ptyr9ttyp0ttyw0</span><br><span class="line">ptyrattyp1ttyw1</span><br><span class="line">ptyrbttyp2ttyw2</span><br><span class="line">ptyrcttyp3ttyw3</span><br><span class="line">ptyrdttyp4ttyw4</span><br><span class="line">ptyrettyp5ttyw5</span><br><span class="line">ptyrfttyp6ttyw6</span><br><span class="line">ptys0ttyp7ttyw7</span><br><span class="line">ptys1ttyp8ttyw8</span><br><span class="line">ptys2ttyp9ttyw9</span><br><span class="line">ptys3ttypattywa</span><br><span class="line">ptys4ttypbttywb</span><br><span class="line">ptys5ttypcttywc</span><br><span class="line">ptys6ttypdttywd</span><br><span class="line">ptys7ttypettywe</span><br><span class="line">ptys8ttypfttywf</span><br><span class="line">ptys9ttyq0urandom</span><br><span class="line">ptysattyq1zero</span><br><span class="line">bash-3.2$ cd ~</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">ApplicationsMinecraftWorldWeChatProjects</span><br><span class="line">Applications (Parallels)Moviesgo</span><br><span class="line">ClionProjectsMusicnginx-1.22.0-tlias</span><br><span class="line">DesktopParallelsnginx-conf</span><br><span class="line">DocumentsPicturesnginx-sky-takeout</span><br><span class="line">DownloadsPostmanphotos</span><br><span class="line">IdeaProjectsPublictree-test</span><br><span class="line">LibraryPycharmProjects</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/Users/lujingxiang</span><br><span class="line">bash-3.2$ cd -</span><br><span class="line">/</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/</span><br><span class="line">bash-3.2$ cd ~</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/Users/lujingxiang</span><br><span class="line">bash-3.2$ ls --help</span><br><span class="line">ls: unrecognized option `--help&#x27;</span><br><span class="line">usage: ls [-@ABCFGHILOPRSTUWabcdefghiklmnopqrstuvwxy1%,] [--color=when] [-D format] [file ...]</span><br><span class="line">bash-3.2$ ls --helo</span><br><span class="line">ls: unrecognized option `--helo&#x27;</span><br><span class="line">usage: ls [-@ABCFGHILOPRSTUWabcdefghiklmnopqrstuvwxy1%,] [--color=when] [-D format] [file ...]</span><br><span class="line">bash-3.2$ ls --help</span><br><span class="line">ls: unrecognized option `--help&#x27;</span><br><span class="line">usage: ls [-@ABCFGHILOPRSTUWabcdefghiklmnopqrstuvwxy1%,] [--color=when] [-D format] [file ...]</span><br><span class="line">bash-3.2$ ls -l</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x@   5 lujingxiang  staff   160 12 10 12:24 Applications</span><br><span class="line">drwxr-xr-x@   5 lujingxiang  staff   160  1 13 11:28 Applications (Parallels)</span><br><span class="line">drwxr-xr-x@  10 lujingxiang  staff   320 12 25 23:10 ClionProjects</span><br><span class="line">drwx------@  19 lujingxiang  staff   608  1 15 14:45 Desktop</span><br><span class="line">drwx------@  18 lujingxiang  staff   576  1 13 11:17 Documents</span><br><span class="line">drwx------@  38 lujingxiang  staff  1216  1 14 10:11 Downloads</span><br><span class="line">drwxr-xr-x@  25 lujingxiang  staff   800  1 14 17:46 IdeaProjects</span><br><span class="line">drwx------+ 117 lujingxiang  staff  3744 12 20 09:01 Library</span><br><span class="line">drwxr-xr-x@   4 lujingxiang  staff   128  8 13 10:07 MinecraftWorld</span><br><span class="line">drwx------@  13 lujingxiang  staff   416 12 28 10:45 Movies</span><br><span class="line">drwx------@   8 lujingxiang  staff   256  7  7  2023 Music</span><br><span class="line">drwx------@   4 lujingxiang  staff   128  9  5 23:52 Parallels</span><br><span class="line">drwx------@   8 lujingxiang  staff   256  3 21  2023 Pictures</span><br><span class="line">drwxr-xr-x@   3 lujingxiang  staff    96  9 21 22:03 Postman</span><br><span class="line">drwxr-xr-x+   5 lujingxiang  staff   160  7 21 13:14 Public</span><br><span class="line">drwxr-xr-x    6 lujingxiang  staff   192 12 29 18:52 PycharmProjects</span><br><span class="line">drwxr-xr-x@   4 lujingxiang  staff   128 12  5 23:47 WeChatProjects</span><br><span class="line">drwxr-xr-x@   5 lujingxiang  staff   160  7 28 18:40 go</span><br><span class="line">drwxr-xr-x@  10 lujingxiang  staff   320 11 18 23:19 nginx-1.22.0-tlias</span><br><span class="line">-rw-r--r--@   1 lujingxiang  admin   720 12  5 23:14 nginx-conf</span><br><span class="line">-rw-r--r--@   1 lujingxiang  admin   768 12  5 23:14 nginx-sky-takeout</span><br><span class="line">drwxr-xr-x    2 lujingxiang  staff    64  4  3  2023 photos</span><br><span class="line">drwxr-xr-x   13 lujingxiang  staff   416 10 25 09:26 tree-test</span><br><span class="line">bash-3.2$ cd /</span><br><span class="line">bash-3.2$ ls -l</span><br><span class="line">total 10</span><br><span class="line">drwxrwxr-x  66 root  admin  2112  1 15 11:01 Applications</span><br><span class="line">drwxr-xr-x  70 root  wheel  2240 12 25 14:49 Library</span><br><span class="line">drwxr-xr-x@ 10 root  wheel   320 12 15 22:43 System</span><br><span class="line">drwxr-xr-x   5 root  admin   160 12 20 11:21 Users</span><br><span class="line">drwxr-xr-x   3 root  wheel    96  1 13 11:28 Volumes</span><br><span class="line">drwxr-xr-x@ 39 root  wheel  1248 12 15 22:43 bin</span><br><span class="line">drwxr-xr-x   2 root  wheel    64  2  9  2023 cores</span><br><span class="line">dr-xr-xr-x   4 root  wheel  4648  1 13 11:14 dev</span><br><span class="line">lrwxr-xr-x@  1 root  wheel    11 12 15 22:43 etc -&gt; private/etc</span><br><span class="line">lrwxr-xr-x   1 root  wheel    25  1 13 11:14 home -&gt; /System/Volumes/Data/home</span><br><span class="line">drwxr-xr-x   4 root  wheel   128 12  5 23:04 opt</span><br><span class="line">drwxr-xr-x   6 root  wheel   192  1 13 11:14 private</span><br><span class="line">drwxr-xr-x@ 64 root  wheel  2048 12 15 22:43 sbin</span><br><span class="line">lrwxr-xr-x@  1 root  wheel    11 12 15 22:43 tmp -&gt; private/tmp</span><br><span class="line">drwxr-xr-x@ 11 root  wheel   352 12 15 22:43 usr</span><br><span class="line">lrwxr-xr-x@  1 root  wheel    11 12 15 22:43 var -&gt; private/var</span><br><span class="line">bash-3.2$ cd ~</span><br><span class="line">bash-3.2$ cd desktop</span><br><span class="line">bash-3.2$ ls</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">RECYCLE.BINHMCL-3.5.5.jarcodeto solve.md</span></span><br><span class="line">DataStructrueMSDN.lnkeBooks截屏</span><br><span class="line">Everything.lnkVisual Studio 2022.lnkjava-109-master顺序表.md</span><br><span class="line">Files bitclasspdfnotesJava</span><br><span class="line">bash-3.2$ mv 截屏 screenshot</span><br><span class="line">bash-3.2$ vi hello.cpp</span><br><span class="line">bash-3.2$ rm hello.cpp</span><br><span class="line">bash-3.2$ vi hello.cpp</span><br><span class="line">bash-3.2$ cp hello.cpp ./code</span><br><span class="line">bash-3.2$ cd code</span><br><span class="line">bash-3.2$ ls</span><br><span class="line">OJaaahello.cppmy-treevsProjects</span><br><span class="line">bash-3.2$ vi hello.cpp</span><br><span class="line">bash-3.2$ rm hello.cpp</span><br><span class="line">bash-3.2$ cd ..</span><br><span class="line">bash-3.2$ pwd</span><br><span class="line">/Users/lujingxiang/desktop</span><br><span class="line">bash-3.2$ mkdir aaa</span><br><span class="line">bash-3.2$ rmdir</span><br><span class="line">usage: rmdir [-pv] directory ...</span><br><span class="line">bash-3.2$ rmdir aaa</span><br><span class="line">bash-3.2$ mkdir aaa</span><br><span class="line">bash-3.2$ cd aaa</span><br><span class="line">bash-3.2$ vi hello.txt</span><br><span class="line">bash-3.2$ rmdir aaa</span><br><span class="line">rmdir: aaa: No such file or directory</span><br><span class="line">bash-3.2$ cd ..</span><br><span class="line">bash-3.2$ rmdir aaa</span><br><span class="line">rmdir: aaa: Directory not empty</span><br><span class="line">bash-3.2$ rm -r aaa</span><br><span class="line">bash-3.2$ mkdir my photos</span><br><span class="line">bash-3.2$ rmdir my</span><br><span class="line">bash-3.2$ rmdir photos</span><br><span class="line">bash-3.2$ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bash-3.2$ echo hello &gt; hello.txt</span><br><span class="line">bash-3.2$ cat hello.txt</span><br><span class="line">hello</span><br><span class="line">bash-3.2$ cat &lt; hello.txt</span><br><span class="line">hello</span><br><span class="line">bash-3.2$ cat &lt; hello.txt &gt; hello2.txt</span><br><span class="line">bash-3.2$ cat hello.txt</span><br><span class="line">hello</span><br><span class="line">bash-3.2$ cat hello2.txt</span><br><span class="line">hello</span><br><span class="line">bash-3.2$ cat &lt; hello.txt &gt; hello2.txt</span><br><span class="line">bash-3.2$ cat hello2.txt</span><br><span class="line">hello</span><br><span class="line">bash-3.2$ </span><br><span class="line">bash-3.2$ cat &lt; hello.txt &gt;&gt; hello2.txt</span><br><span class="line">bash-3.2$ cat hello2.txt</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">bash-3.2$ ls -l /</span><br><span class="line">total 10</span><br><span class="line">drwxrwxr-x  66 root  admin  2112  1 15 11:01 Applications</span><br><span class="line">drwxr-xr-x  70 root  wheel  2240 12 25 14:49 Library</span><br><span class="line">drwxr-xr-x@ 10 root  wheel   320 12 15 22:43 System</span><br><span class="line">drwxr-xr-x   5 root  admin   160 12 20 11:21 Users</span><br><span class="line">drwxr-xr-x   3 root  wheel    96  1 13 11:28 Volumes</span><br><span class="line">drwxr-xr-x@ 39 root  wheel  1248 12 15 22:43 bin</span><br><span class="line">drwxr-xr-x   2 root  wheel    64  2  9  2023 cores</span><br><span class="line">dr-xr-xr-x   4 root  wheel  4648  1 13 11:14 dev</span><br><span class="line">lrwxr-xr-x@  1 root  wheel    11 12 15 22:43 etc -&gt; private/etc</span><br><span class="line">lrwxr-xr-x   1 root  wheel    25  1 13 11:14 home -&gt; /System/Volumes/Data/home</span><br><span class="line">drwxr-xr-x   4 root  wheel   128 12  5 23:04 opt</span><br><span class="line">drwxr-xr-x   6 root  wheel   192  1 13 11:14 private</span><br><span class="line">drwxr-xr-x@ 64 root  wheel  2048 12 15 22:43 sbin</span><br><span class="line">lrwxr-xr-x@  1 root  wheel    11 12 15 22:43 tmp -&gt; private/tmp</span><br><span class="line">drwxr-xr-x@ 11 root  wheel   352 12 15 22:43 usr</span><br><span class="line">lrwxr-xr-x@  1 root  wheel    11 12 15 22:43 var -&gt; private/var</span><br><span class="line">bash-3.2$ ls -l / | tail -nl</span><br><span class="line">tail: illegal offset -- l: Invalid argument</span><br><span class="line">bash-3.2$ ls -l / | tail -n1</span><br><span class="line">lrwxr-xr-x@  1 root  wheel    11 12 15 22:43 var -&gt; private/var</span><br><span class="line">bash-3.2$ ls -l / | tail -n1 &gt; ls.txt</span><br><span class="line">bash-3.2$ cat ls.txt</span><br><span class="line">lrwxr-xr-x@  1 root  wheel    11 12 15 22:43 var -&gt; private/var</span><br><span class="line">bash-3.2$ curl --head --slient google.com</span><br><span class="line">curl: option --slient: is unknown</span><br><span class="line">curl: try &#x27;curl --help&#x27; or &#x27;curl --manual&#x27; for more information</span><br><span class="line">bash-3.2$ curl --head --silent google.com</span><br><span class="line">^[[A^[[B^[[A^C</span><br><span class="line">bash-3.2$ curl --head --silent google.com</span><br><span class="line">^C</span><br><span class="line">bash-3.2$ curl --head --silent google.com</span><br><span class="line">^C</span><br><span class="line">bash-3.2$ curl --head --silent baidu.com</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 15 Jan 2024 08:32:35 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT</span><br><span class="line">ETag: &quot;51-47cf7e6ee8400&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 81</span><br><span class="line">Cache-Control: max-age=86400</span><br><span class="line">Expires: Tue, 16 Jan 2024 08:32:35 GMT</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">bash-3.2$ curl --head --silent baidu.com | grep -i content-length</span><br><span class="line">bash-3.2$ curl --head --silent baidu.com | grep -i Content-Length</span><br><span class="line">Content-Length: 81</span><br><span class="line">bash-3.2$ curl --head --silent baidu.com | grep -i Content-Length | cut --delimeter=&#x27; &#x27; -f2 </span><br><span class="line">cut: illegal option -- -</span><br><span class="line">usage: cut -b list [-n] [file ...]</span><br><span class="line">       cut -c list [file ...]</span><br><span class="line">       cut -f list [-s] [-w | -d delim] [file ...]</span><br><span class="line">bash-3.2$ curl --head --silent baidu.com | grep -i Content-Length | cut --delimiter=&#x27; &#x27; -f2 </span><br><span class="line">cut: illegal option -- -</span><br><span class="line">usage: cut -b list [-n] [file ...]</span><br><span class="line">       cut -c list [file ...]</span><br><span class="line">       cut -f list [-s] [-w | -d delim] [file ...]</span><br><span class="line">bash-3.2$ curl --head --silent baidu.com | grep -i Content-Length | cut --delimiter=&#x27;:&#x27; -f2 </span><br><span class="line">cut: illegal option -- -</span><br><span class="line">usage: cut -b list [-n] [file ...]</span><br><span class="line">       cut -c list [file ...]</span><br><span class="line">       cut -f list [-s] [-w | -d delim] [file ...]</span><br><span class="line">bash-3.2$ curl --head --silent baidu.com | grep -i Content-Length | cut --delimiter=&#x27; &#x27; -f2 </span><br><span class="line">cut: illegal option -- -</span><br><span class="line">usage: cut -b list [-n] [file ...]</span><br><span class="line">       cut -c list [file ...]</span><br><span class="line">       cut -f list [-s] [-w | -d delim] [file ...]</span><br><span class="line">bash-3.2$ curl --head --silent baidu.com | grep -i Content-Length | cut --d &#x27; &#x27; -f2 </span><br><span class="line">cut: illegal option -- -</span><br><span class="line">usage: cut -b list [-n] [file ...]</span><br><span class="line">       cut -c list [file ...]</span><br><span class="line">       cut -f list [-s] [-w | -d delim] [file ...]</span><br><span class="line">bash-3.2$ curl --head --silent baidu.com | grep -i Content-Length | cut -d &#x27; &#x27; -f2 </span><br><span class="line">bash-3.2$ curl --head --silent baidu.com | grep -i Content-Length | cut -d &#x27; &#x27; </span><br><span class="line">usage: cut -b list [-n] [file ...]</span><br><span class="line">       cut -c list [file ...]</span><br><span class="line">       cut -f list [-s] [-w | -d delim] [file ...]</span><br><span class="line">bash-3.2$ curl --head --silent baidu.com | grep -i Content-Length | cut -d &#x27; &#x27; -f2</span><br><span class="line">81</span><br><span class="line">bash-3.2$ </span><br></pre></td></tr></table></figure><p>‘#’ 标识超级用户root</p><p>‘$’标识普通用户</p><p>open命令，直接打开一个文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Missing-semester&quot;&gt;&lt;a href=&quot;#Missing-semester&quot; class=&quot;headerlink&quot; title=&quot;Missing semester&quot;&gt;&lt;/a&gt;Missing semester&lt;/h2&gt;&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="skills" scheme="http://example.com/categories/skills/"/>
    
    
    <category term="missing-semester" scheme="http://example.com/tags/missing-semester/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://example.com/2024/02/04/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://example.com/2024/02/04/%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2024-02-04T15:29:22.000Z</published>
    <updated>2024-02-22T08:53:47.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><hr><p>二叉树性质：叶子节点个数为度为2节点个数+1 的证明过程</p><ol><li><p>树的性质</p></li><li><p>度与边的关系</p></li></ol><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240129094730.png" alt="CT-20240129094730" style="zoom:67%;" /><p>二叉树性质：</p><ol><li>若规定根结点的层数为1，则一棵非空二叉树的第i层上最多有 (i&gt;0)个结点</li><li>若规定只有根结点的二叉树的深度为1，则深度为K的二叉树的最大结点数是 (k&gt;&#x3D;0)</li><li>对任何一棵二叉树, 如果其叶结点个数为 n0, 度为2的非叶结点个数为 n2,则有n0＝n2＋1</li><li>具有n个结点的完全二叉树的深度k为 上取整</li><li>对于具有n个结点的完全二叉树，如果按照从上至下从左至右的顺序对所有节点从0开始编号，则对于序号为i<br>的结点有：<br>若i&gt;0，双亲序号：(i-1)&#x2F;2；i&#x3D;0，i为根结点编号，无双亲结点<br>若2i+1&lt;n，左孩子序号：2i+1，否则无左孩子<br>若2i+2&lt;n，右孩子序号：2i+2，否则无右孩子</li></ol><p>题目：</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240129100005.png" style="zoom:67%;" /><p>思路： 完全二叉树 节点为偶数个 根据计算二叉树的节点个数性质来算 度为1的个数应该为1 因为有一个根节点和一个节点组成偶数</p><p>2n &#x3D; n0 +1 +n2 &amp;&amp; n0 &#x3D; n2+1 那所以叶子节点的个数n0 &#x3D; n 选A</p><p>总结：有偶数个节点的完全二叉树 一定会有一个度为1的节点</p><p>题目：</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240129100702.png" alt="CT-20240129100702 " style="zoom:67%;" /><p>奇数个节点 那么不存在度为1的节点</p><p>那所以 n0 &#x3D; n2+1 那么叶子节点的个数就为384 选B</p><p>题目：</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240129101030.png" alt="CT-20240129101030 " style="zoom:67%;" /><p>[log(532) ] (向上取整) 为10 选B</p><p>注意：要拿二叉树的性质来做题！！！</p><hr><p>前序遍历</p><p>中序遍历</p><p>后序遍历</p><p>层序遍历（需要借助队列 – 广度遍历）</p><p>题目：根据前序遍历和中序遍历求二叉树</p><p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240129122124.png" alt="CT-20240129122124"></p><p>重建二叉树：</p><p>​1</p><p>​    &#x2F; \</p><p>​23</p><p>​   &#x2F;         &#x2F;\</p><p>​4  5   6</p><p>​   \    &#x2F;</p><p>​      7       8</p><p>后序遍历： 7 4 2 5 8 6 3 1</p><p>根据前序和后序遍历结果不能创建一棵二叉树（只能确定根的位置）</p><p>根据前序和中序 后序和中序可以创建一棵二叉树（必须给一个中序才能确定左右）</p><hr><p><strong>树的问题解决思路都可以用递归：也就是把一个大问题拆成小问题解决</strong></p><p>size() 思路 ：前序&#x2F;中序&#x2F;后序遍历 会把每个节点都遍历到 遍历一个节点就计数一次</p><p>​子问题的思路 要算root总共有多少个节点 就是自己 + 左边 +右边</p><p>leavesCount() 思路 ：跟上面类似 有两种思路：遍历&#x2F;子问题</p><p>​遍历：定义一个成员变量 返回值void 每次++</p><p>​子问题： 把问题看成求左树叶子+右树叶子</p><p>levelNodeCnt()思路：root这棵树的第K层 &#x3D; root.left第K-1层 + root.right第k-1层,一直到k为1时停止</p><p>getHeight()思路：拆解成子问题来看：一棵树的高度其实就是它的最大深度，找左和右哪个大就是哪个，还要加上本身1</p><p>注意：leetcode 超时错误有几种情况：</p><pre><code>1. 死循环 2. 递归条件错误 3. 规定1ms内完成 用的时间超过了这个数</code></pre><hr><p>OJ题：</p><ol><li><p>判断两棵树是否相同：（内容相同 结构相同）</p><p>时间复杂度 min（n,m)</p><p>本质 就是遍历二叉树 建议还是采用前序遍历的方式 根 左 右</p></li></ol><p>​不同的情况：一棵树为空 一棵树不为空</p><p>​两棵树对应节点的值不一样</p><ol start="2"><li>一棵树是否是另一棵树的子树<ol><li>根节点和subRoot是不是相同的</li><li>subRoot是不是 root.left 子树,是不是 root.right右树</li><li>就是定位 + 判断是否相同(注意判空)</li><li>时间复杂度为O（r*s）</li></ol></li><li>翻转二叉树：把一棵二叉树除根节点以外所有节点左右翻转</li></ol><p>​思路：修改节点的指向</p><p>​tmp &#x3D; 左子树引用</p><p>​左子树引用 &#x3D; 右子树引用</p><p>​右子树引用 &#x3D; tmp</p><p>​每一颗子树 交换左右孩子的指向</p><p>​遍历这棵二叉树的每一个节点</p><ol start="4"><li>判断一棵二叉树是否是平衡二叉树（&#x3D;&#x3D;字节跳动面试题！！！&#x3D;&#x3D;）</li></ol><p>​平衡二叉树定义：一棵二叉树每个节点的左右两个子树的高度差的绝对值不超过1</p><p>​结论：只有每一棵树都是高度平衡的，才能说这棵树是高度平衡的</p><p>​左右子树高度差不超过1 并且 左树也是平衡的 右树也是平衡的 才能够说明这棵树是平衡的</p><p>​简单思路 ：每当遍历到某个节点的时候就调用getHeight求左右子树的高度，但是这样做是有问题的！！！因    为这样做的话就造成了重复计算高度，次数会变多，&#x3D;&#x3D;复杂度会达到O(n^2)&#x3D;&#x3D;，&#x3D;&#x3D;时间性能大大降低&#x3D;&#x3D;</p><p>​进阶：我们要在求高度的时候 就同步进行平衡的判断,如果不平衡就返回一个标志数（这里取-1，因为逻辑上说高度不可能为-1），而且求左右子树高度的时候要注意如果不平衡了要向上传递，也就是结果为-1时也要返回-1，如此一来时间复杂度会降低为O(n)</p><ol start="5"><li>&#x3D;&#x3D;对称二叉树（这题自己的思路错了 没写出来 注意！！！）&#x3D;&#x3D;</li></ol><p>​对称：这里指轴对称</p><p>​思路：就是每次比较都找到轴对称的对应位置的两个元素进行比较，除了根节点之外都要进行比较，那么这里要重新定义一个具有两个参数的方法，然后还要指定递归的方向，因为二叉树的神奇特性，我们一次定义好递归的方向 也即 左左和右右 左右和右左比较 就可以满足全部节点的比较</p><p>​        具体如果想不明白就用代码和图来对照看看</p><ol start="6"><li><p>二叉树的构建及遍历</p><p>以前序遍历的方式创建二叉树</p><p>这里博哥的处理指向字符串字符的指针的方法是定义一个成员变量在外部，避免出现静态只有一份的问题（多个测试用例会出现问题，因为i值会变）</p><p>并不是一个完美的方法，这里自己在写题时还是用数组的方法为好，思路更加清晰</p></li><li><p>二叉树的分层遍历：（&#x3D;&#x3D;中等难度题&#x3D;&#x3D;）</p></li></ol><p>​层序遍历 用队列 第一次插入root 然后每次弹出一个 把这个节点的两个子树按照左右的顺序放入队列</p><p>​leetcode OJ:返回值为List&lt;List<Integer>&gt;形式 </p><p>​&#x3D;&#x3D;这题很重要！！！早上做了我一个小时，最后怎么想都是错的，原因就在我没有体会到层序遍历思想的精髓！！！脑子里也没有清晰的层序遍历每个时段队列的状态如何！！！&#x3D;&#x3D;</p><p>​重新体会一下分层遍历的思想（也就是层序遍历）</p><p>​首先 是采用循环的形式 循环条件为队列不为空 那么一开始我们要先把根节点放入队列中</p><p>​然后 我们可以惊奇的发现 当上一层结束之后 队列里面是刚刚好都是下一层的节点的 因为在上一层的循环当中 只能够插入上一层节点的左右子节点 孙节点完全不会涉及 那么这里就给我们已经提供好了当前一层的节点个数（也就是上一层结束时队列中元素的个数），&#x3D;&#x3D;这是层序遍历思想的精髓！！！&#x3D;&#x3D;，就是因为没想到这点，浪费了整个上午的时间，人都搞傻了</p><p>​那么我们就可以知道，创建新的一个一维线性表的时机就是在上一层结束下一层开始之时，另外我们还要抽离出该层节点操作的代码，放到一个新的循环当中（因为此时我们已经可以知道该层的非空节点到底有多少个），结束循环也就是已经装配好该层的结果线性表之后，就把这个一维线性表放到大的线性表中</p><p>最终结束的条件仍然是队列为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;TreeNode&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;List&lt;TreeNode&gt;&gt; ret = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//求一下当前队列的大小</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">            List&lt;TreeNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">//出队列4次 相当于把这一层的节点 都出队了</span></span><br><span class="line">            <span class="keyword">while</span> (size-- != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                list.add(node);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    que.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    que.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>好好体会这段代码！！！</p><p>结论：学数据结构还是要多画图多走代码理解啊！！！</p><ol start="8"><li>判断一棵树是否是完全二叉树：</li></ol><p>​从层序遍历结果来看 如果我们把null也插入队列当中 那么可以知道如果队列中出现了一个null 按照完全二叉树的定义来说 它后面就不能再是 非null的元素 了 那么其实就是 我们把第一个null节点弹出之后 如果后面弹出了非null元素 那么就不是完全二叉树 （其实完全二叉树的定义也就是层序的）</p><ol start="9"><li>给出一棵二叉树，找到该树中两个指定节点的最近公共祖先</li></ol><p>​<img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240131110120.png" alt="CT-20240131110120"></p><p>把大问题分解成子问题：要找公共节点，其实就三种情况 ，一个是一个为root，一个不为root，此时返回root即可，一个是一个在左，一个在右，此时返回最近的公共节点也就是这个根本身，最后是两个在同一边，就返回比较高的那个节点，也就是找到其中一个就一路向上返回</p><p>所以其实比较的代码就是深度搜索分解到一个个节点值的比较 然后再找它的左右子树 为null时就返回null</p><p>第二种思路：</p><p>​如果二叉树保存了父亲节点的地址 ， 那么可以认为 这个题就是求链表的相交节点 （最快的方法）</p><p>​实现方式：把从根节点到指定节点的路径上的所有节点都存起来（用栈）</p><p>​最大的拦路虎是：如何找到根节点到指定节点路径上的所有节点</p><p>​大问题化小问题</p><p>​在方法外定义一个栈,如果要找的节点为空节点 或者 树为空 直接返回false 即可 </p><p>​不为空就要入栈当前的根节点</p><p>​如果根就是 要找的节点 就是找到了 向上返回 true</p><p>​当前节点不是 就往左右子树找 找到的话就会返回 true 接收到的变量为true 就要立刻向上返回 不用再走进右树判断了 没找到（也就是到了叶子之后都找不到 就返回false了）</p><p>最后判断左右子树中间一个有无找到 找到的话就返回 没找到就弹出栈之后（也就是回退操作）返回false</p><ol start="10"><li>根据前序&#x2F;后序遍历结果 中序遍历结果（无#）创建二叉树</li></ol><p>​核心思想：两个数组 两个指针</p><p>​前序数组指针从0开始 按照前序遍历递归思想创建树 每次就找到 中序遍历数组中根节点的位置 创建节点 然后创建左右子树 划定范围创建 每一次查找范围缩小 直到出现不正常的情况ie&lt;ib时返回 不再创建</p><p>​后续数组指针从最后一位开始，根据后序遍历的结果形式可以知道，后序指针从后往前移，那么创建子树时也是要先创建右子树 再创建左子树</p><ol start="11"><li>（最难）树的字符串表示</li></ol><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE.png" alt="二叉树字符串题目" style="zoom:50%;" /><p>左边为空 但是 右边不为空 :（）</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE2.png" alt="二叉树字符串题目2" style="zoom:50%;" /><p>思路：大问题拆成小问题考虑</p><p>在大函数当中首先排除掉整棵树都为null的情况</p><p>遍历到每个节点时 有 几种情况 ，首先如果为空 加上右括号并返回（这里我们指定只有左为空右不为空的情况才能够进入） ，若当前节点不为空输出节点的值，递归部分：左有树或者左为空右不为空时进入创建左子树字符串，右有树时才可进入创建右子树字符串，否则不给进入（题目分析出来的要求），最后还要判断当前的节点是否为第二层 因为第二层退回到第一层时不用加“)”</p><p>总思路就是分成左为空 右不为空 左不为空 右为空 左右都不为空 左右都为空情况来考虑</p><ol start="12"><li>非递归实现二叉树的前序遍历</li></ol><p>思路：因为递归也是运用了栈桢，同属栈的思想，那么我们这里可以运用栈来解决</p><p>主要的思想：以向左走为主 如果左边没有了才走右边 每个节点都是如此 左边没有的时候要弹出</p><p>定义一个cur指针 一个top指针 cur指针没有了去找top指针的右边赋值给新的cur 然后要验证 cur不为null时才能加入栈中 同时也加入遍历结果当中</p><ol start="13"><li>非递归实现二叉树的中序遍历</li></ol><p>思路与前序不同的是 只有找到最后null时才输出并弹出 然后换到栈顶的右子树 思路一致</p><p>其实写法大致相同 就是输出结果的时机不一样</p><ol start="14"><li>非递归实现二叉树的后序遍历</li></ol><p>思路又不同的是 左边到null了不能弹出 因为还没有到输出该结果的时机 所以此时只能瞄一眼 而是要向右边去找 不断找到null 为止</p><p>还要创建一个标识prev 表示这个元素已经打印 prev只用记住上一个打印的节点是谁即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.source.tree.Tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.plaf.RootPaneUI;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAMultiPrimePrivateCrtKey;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">char</span> val;</span><br><span class="line">        <span class="keyword">private</span> TreeNode left;</span><br><span class="line">        <span class="keyword">private</span> TreeNode right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">char</span> val)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;(&quot;</span>+val+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把二叉树按照树的形状打印在控制台上</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayInShape</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> getHeight(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> (<span class="type">int</span>) Math.pow(<span class="number">2</span>,depth-<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;depth;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            height+=len;</span><br><span class="line">            len/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        height+=depth;</span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> height*<span class="number">2</span>;</span><br><span class="line">        <span class="type">char</span>[][] board = <span class="keyword">new</span> <span class="title class_">char</span>[height][width];</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> width/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        printOnBoard(root,board,x,y,length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;height;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;width;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.print(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归调用改变数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 当前根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> board 画板二维数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 当前横坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y 当前纵坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 当前连接线的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printOnBoard</span><span class="params">(TreeNode t,<span class="type">char</span>[][] board,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        board[y][x] = t.val;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t.left!=<span class="literal">null</span>)</span><br><span class="line">                board[y+i][x-i] = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(t.right!=<span class="literal">null</span>)</span><br><span class="line">                board[y+i][x+i] = <span class="string">&#x27;\\&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        printOnBoard(t.left,board,x-length-<span class="number">1</span>,y+length+<span class="number">1</span>,length/<span class="number">2</span>);</span><br><span class="line">        printOnBoard(t.right,board,x+length+<span class="number">1</span>,y+length+<span class="number">1</span>,length/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryTree</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryTree</span><span class="params">(String treeStr)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Integer []index = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        root = createTree(treeStr,index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自己手动创建一颗二叉树（样例）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTree</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">C</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">D</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">E</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">F</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">G</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">H</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        A.left = B;</span><br><span class="line">        A.right = C;</span><br><span class="line">        B.left = D;</span><br><span class="line">        B.right = E;</span><br><span class="line">        E.right = H;</span><br><span class="line">        C.left = F;</span><br><span class="line">        C.right = G;</span><br><span class="line"></span><br><span class="line">        root = A;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据前序遍历序列创建二叉树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">createTree</span><span class="params">(String treeStr,Integer[] index)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(treeStr.charAt(index[<span class="number">0</span>]) == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            index[<span class="number">0</span>]++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(treeStr.charAt(index[<span class="number">0</span>]++));</span><br><span class="line">        t.left = createTree(treeStr,index);</span><br><span class="line">        t.right = createTree(treeStr,index);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 每次遍历树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrderTraverse</span><span class="params">(TreeNode t)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(t.val+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        preOrderTraverse(t.left);</span><br><span class="line">        preOrderTraverse(t.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 每次遍历树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">midOrderTraverse</span><span class="params">(TreeNode t)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        midOrderTraverse(t.left);</span><br><span class="line">        System.out.print(t.val+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        midOrderTraverse(t.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 每次遍历树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrderTraverse</span><span class="params">(TreeNode t)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        postOrderTraverse(t.left);</span><br><span class="line">        postOrderTraverse(t.right);</span><br><span class="line">        System.out.print(t.val+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 层序遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">levelTraverse</span><span class="params">(TreeNode t)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//需要借助队列来实现</span></span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">            System.out.print(node.val+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> node.left;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> node.right;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(left!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                que.offer(left);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(right!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                que.offer(right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将前序遍历结果放到一个List集合中返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存储前序遍历结果的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title function_">preOrder</span><span class="params">(TreeNode t)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;TreeNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        list.add(t);</span><br><span class="line">        list.addAll(preOrder(t.left));</span><br><span class="line">        list.addAll(preOrder(t.right));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取树的节点的个数</span></span><br><span class="line"><span class="comment">     * 子问题思路：每棵树的节点个数为 ： 自己（1）+左子树节点个数+右子树节点个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 当前树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回节点个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">(TreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+size(root.left)+size(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回叶子节点的个数 与数节点个数相似</span></span><br><span class="line"><span class="comment">     * 思路：每棵树的叶子节点个数为 左子树叶子节点个数+右子树叶子节点个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 当前树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前树所含叶子节点个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leavesCount</span><span class="params">(TreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leavesCount(root.left)+leavesCount(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取第k层节点的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 当前树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k 指定的层数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 某层节点的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">levelNodeCnt</span><span class="params">(TreeNode root,<span class="type">int</span> k)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> levelNodeCnt(root.left,k-<span class="number">1</span>)+levelNodeCnt(root.right,k-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用子问题拆解的思路求树的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 当前树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前树的深度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(TreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+(Math.max(getHeight(root.left), getHeight(root.right)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测值为value的元素是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 当前树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存在true 不存在false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(TreeNode root,<span class="type">char</span> val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val == val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(find(root.left,val))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> find(root.right,val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断该树是不是完全二叉树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 该树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 是完全二叉树 false 不是完全二叉树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCompleteTree</span><span class="params">(TreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//特殊的层序遍历 把null也收入结果当中</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(node != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                que.offer(node.left);</span><br><span class="line">                que.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!que.isEmpty() &amp;&amp; que.peek() != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;TreeNode&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;List&lt;TreeNode&gt;&gt; ret = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//求一下当前队列的大小</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">            List&lt;TreeNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">//出队列size次 相当于把这一层的节点 都出队了</span></span><br><span class="line">            <span class="keyword">while</span> (size-- != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                list.add(node);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    que.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    que.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到root到node之间路径上的所有节点 存储到stack中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 指定节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否存在路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getPath</span><span class="params">(TreeNode root, TreeNode node,Stack&lt;TreeNode&gt; stack)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span> ||node == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stack.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == node)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">leftVal</span> <span class="operator">=</span> getPath(root.left,node,stack);</span><br><span class="line">        <span class="keyword">if</span>(leftVal)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rightVal</span> <span class="operator">=</span> getPath(root.right,node,stack);</span><br><span class="line">        <span class="keyword">if</span>(rightVal)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        stack.pop();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">commonAncestor</span><span class="params">(TreeNode root,TreeNode p,TreeNode q)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//思路2:除了本身递归的方法来判断，还可以找到路径,两个栈的交点，就是要找的最近共同祖先</span></span><br><span class="line">        <span class="comment">//这种思路更加直接，难点就在于题目往往定义的节点的类型是无父亲节点的，那么此时我们就要通过栈来实现这一功能</span></span><br><span class="line">        Stack&lt;TreeNode&gt; pathA = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(!getPath(root,p,pathA))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; pathB = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(!getPath(root,q,pathB))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sizeA</span> <span class="operator">=</span> pathA.size();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sizeB</span> <span class="operator">=</span> pathB.size();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">dis</span> <span class="operator">=</span> sizeA - sizeB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(dis&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pathA.pop();</span><br><span class="line">            dis--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(dis&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pathB.pop();</span><br><span class="line">            dis++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!pathA.empty() &amp;&amp; !pathB.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">nodeA</span> <span class="operator">=</span> pathA.pop();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">nodeB</span> <span class="operator">=</span> pathB.pop();</span><br><span class="line">            <span class="keyword">if</span>(nodeA == nodeB)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> nodeA;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//index 这里 定义为成员变量 或者用数组的形式进行传参</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">createTree</span><span class="params">(<span class="type">int</span> ib,<span class="type">int</span> ie,String preOrder,String midOrder,<span class="type">int</span> []index)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//1. 没有左树 或者 没有右树</span></span><br><span class="line">        <span class="keyword">if</span>(ib&gt;ie)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//等于的时候 还可能是单独一个节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到根节点 创建</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ri</span> <span class="operator">=</span> getRi(preOrder, midOrder, index);</span><br><span class="line">        <span class="keyword">if</span>(ri == -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preOrder.charAt(index[<span class="number">0</span>]++));</span><br><span class="line">        <span class="comment">//创建左子树 右子树</span></span><br><span class="line">        root.left = createTree(ib,ri-<span class="number">1</span>,preOrder,midOrder,index);</span><br><span class="line">        root.right = createTree(ri+<span class="number">1</span>,ie,preOrder,midOrder,index);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getRi</span><span class="params">(String preOrder, String midOrder, <span class="type">int</span>[] index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> ri;</span><br><span class="line">        <span class="keyword">for</span> (ri = <span class="number">0</span>; ri &lt; midOrder.length(); ri++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preOrder.charAt(index[<span class="number">0</span>]) == midOrder.charAt(ri))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ri;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据中序遍历和后序遍历结果创建树</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">createTreeBy</span><span class="params">(<span class="type">int</span> ib,<span class="type">int</span> ie,String postOrder,String midOrder,<span class="type">int</span> []index)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//1. 没有左树 或者 没有右树</span></span><br><span class="line">        <span class="keyword">if</span>(ib&gt;ie)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//等于的时候 还可能是单独一个节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到根节点 创建</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ri</span> <span class="operator">=</span> getRiBy(postOrder, midOrder, index);</span><br><span class="line">        <span class="keyword">if</span>(ri == -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(postOrder.charAt(index[<span class="number">0</span>]--));</span><br><span class="line">        <span class="comment">//创建左子树 右子树</span></span><br><span class="line">        root.right = createTreeBy(ri+<span class="number">1</span>,ie,postOrder,midOrder,index);</span><br><span class="line">        root.left = createTreeBy(ib,ri-<span class="number">1</span>,postOrder,midOrder,index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getRiBy</span><span class="params">(String postOrder, String midOrder, <span class="type">int</span>[] index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> ri;</span><br><span class="line">        <span class="keyword">for</span> (ri = <span class="number">0</span>; ri &lt; midOrder.length(); ri++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(postOrder.charAt(index[<span class="number">0</span>]) == midOrder.charAt(ri))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ri;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">tree2str</span><span class="params">(TreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        getRes(root,sb,root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getRes</span><span class="params">(TreeNode root,StringBuilder sb,TreeNode t)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.append(root.val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            getRes(root.left,sb,t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            getRes(root.right,sb,t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t!=root)</span><br><span class="line">            sb.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Character&gt; <span class="title function_">preNoRecursive</span><span class="params">(TreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//利用栈模拟栈桢的处理递归过程</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line">        TreeNode top;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() || cur!= <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//优先向左走 一直走到没有再向右走</span></span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                list.add(cur.val);</span><br><span class="line"></span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            top = stack.pop();</span><br><span class="line">            cur = top.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Character&gt; <span class="title function_">midNoRecursive</span><span class="params">(TreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//打印时机与前序遍历不同，到为null才打印</span></span><br><span class="line">        List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//利用栈模拟栈桢的处理递归过程</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line">        TreeNode top;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() || cur!= <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//优先向左走 一直走到没有再向右走</span></span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line"></span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            top = stack.pop();</span><br><span class="line">            list.add(top.val);</span><br><span class="line">            cur = top.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Character&gt; <span class="title function_">postNoRecursive</span><span class="params">(TreeNode root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//打印时机与前序中序不同，要左右都结束之后才能打印 还要用一个变量记住上一个打印的节点 不然可能会造成死循环重复打印</span></span><br><span class="line">        List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//利用栈模拟栈桢的处理递归过程</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line">        TreeNode top,prev = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty() || cur!= <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//优先向左走 一直走到没有再向右走</span></span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不能pop，这里要peek</span></span><br><span class="line">            top = stack.peek();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到右边都没有了才是全部都看完了</span></span><br><span class="line">            <span class="keyword">if</span>(top.right == <span class="literal">null</span> || top.right == prev)</span><br><span class="line">            &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="comment">//此时打印,要记次节点为下一个待打印的节点的上一个节点 不然会一直死循环 因为该节点为上一节点的右节点</span></span><br><span class="line">                <span class="comment">//所以上一个节点的右节点是始终都不会为空的 所以此时要标记 避免还是进入else的部分</span></span><br><span class="line">                list.add(top.val);</span><br><span class="line">                prev = top;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur = top.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//前序遍历结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">treeStr</span> <span class="operator">=</span> <span class="string">&quot;ABDH###EJ###CF##G##&quot;</span>;</span><br><span class="line">        <span class="comment">//根据前序遍历结果创建树</span></span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>(treeStr);</span><br><span class="line">        <span class="comment">//前序遍历，无返回值版</span></span><br><span class="line">        tree.preOrderTraverse(tree.root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//将树可视化打印到控制台上</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===========将树可视化打印到控制台上==========&quot;</span>);</span><br><span class="line">        tree.displayInShape();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============分割线==============&quot;</span>);</span><br><span class="line">        <span class="comment">//前序遍历，返回值为前序遍历顺序的集合List</span></span><br><span class="line">        System.out.println(<span class="string">&quot;根据前序遍历结果字符串创建树：&quot;</span>+treeStr);</span><br><span class="line">        System.out.println(<span class="string">&quot;前序遍历结果为：&quot;</span>+tree.preOrder(tree.root));</span><br><span class="line">        System.out.println(<span class="string">&quot;树中节点的个数为：&quot;</span>+tree.size(tree.root));</span><br><span class="line">        System.out.println(<span class="string">&quot;树中所含叶子节点个数为：&quot;</span>+tree.leavesCount(tree.root));</span><br><span class="line">        System.out.println(<span class="string">&quot;树中第3层所含节点个数为：&quot;</span>+tree.levelNodeCnt(tree.root, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;树的高度为：&quot;</span>+tree.getHeight(tree.root));</span><br><span class="line">        System.out.println(<span class="string">&quot;树中是否包含元素E：&quot;</span>+tree.find(tree.root, <span class="string">&#x27;E&#x27;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是完全二叉树：&quot;</span>+tree.isCompleteTree(tree.root));</span><br><span class="line">        System.out.println(<span class="string">&quot;===============分割线==============&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;树的层序遍历结果为：&quot;</span>+tree.levelOrder(tree.root));</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        tree.getPath(tree.root,tree.root.left.left.left,stack);</span><br><span class="line">        System.out.println(<span class="string">&quot;从根节点到H的路径为：&quot;</span>+stack);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">D</span> <span class="operator">=</span> tree.root.left.left;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">F</span> <span class="operator">=</span> tree.root.right.left;</span><br><span class="line">        System.out.println(<span class="string">&quot;D与F的公共节点为：&quot;</span>+tree.commonAncestor(tree.root,D,F));</span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">tree1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">preOrder</span> <span class="operator">=</span> <span class="string">&quot;EFHIGJK&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">midOrder</span> <span class="operator">=</span> <span class="string">&quot;HFIEJKG&quot;</span>;</span><br><span class="line">        <span class="type">int</span> []index = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        tree1.root = tree1.createTree(<span class="number">0</span>,preOrder.length()-<span class="number">1</span>,preOrder,midOrder,index);</span><br><span class="line">        System.out.println(tree1.preOrder(tree1.root));</span><br><span class="line">        tree1.displayInShape();</span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">tree2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">postOrder</span> <span class="operator">=</span> <span class="string">&quot;BDECA&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="string">&quot;BADCE&quot;</span>;</span><br><span class="line">        <span class="type">int</span> []index1 = &#123;mid.length()-<span class="number">1</span>&#125;;</span><br><span class="line">        tree2.root = tree2.createTreeBy(<span class="number">0</span>,index1[<span class="number">0</span>],postOrder,mid,index1);</span><br><span class="line">        tree2.displayInShape();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============分割线==============&quot;</span>);</span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">tree3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>(<span class="string">&quot;124###3##&quot;</span>);</span><br><span class="line">        System.out.println(tree3.tree2str(tree3.root));</span><br><span class="line">        System.out.println(<span class="string">&quot;===============分割线==============&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;前序遍历非递归检验：&quot;</span>);</span><br><span class="line">        System.out.println(tree.preOrder(tree.root));</span><br><span class="line">        System.out.println(tree.preNoRecursive(tree.root));</span><br><span class="line">        System.out.println(<span class="string">&quot;中序遍历非递归检验：&quot;</span>);</span><br><span class="line">        tree.midOrderTraverse(tree.root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(tree.midNoRecursive(tree.root));</span><br><span class="line">        System.out.println(<span class="string">&quot;后序遍历非递归检验：&quot;</span>);</span><br><span class="line">        tree.postOrderTraverse(tree.root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(tree.postNoRecursive(tree.root));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        tree.createTree();</span><br><span class="line">        tree.preOrderTraverse(tree.root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        tree.midOrderTraverse(tree.root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        tree.postOrderTraverse(tree.root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        tree.levelTraverse(tree.root);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;二叉树性质：叶子节点个数为度为2节点个数+1 的证明过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;树的性质&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;度与</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>优先级队列</title>
    <link href="http://example.com/2024/02/04/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/"/>
    <id>http://example.com/2024/02/04/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/</id>
    <published>2024-02-04T15:28:13.000Z</published>
    <updated>2024-02-22T08:54:31.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><p>底层使用了堆 堆就是完全二叉树的基础上进行了一些调整</p><p>按完全二叉树的顺序存储方式存储 在一个一维数组中</p><p>堆的性质：<br>堆中某个节点的值总是不大于或不小于其父节点的值；<br>堆总是一棵完全二叉树。</p><p>根节点小于左右孩子 并且是一个完全二叉树 小根堆</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240201142813.png" alt="CT-20240201142813" style="zoom:50%;" /><p>根节点比左右孩子大 大根堆</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/CT-20240201142917.png" alt="CT-20240201142917" style="zoom:50%;" /><p>数组中存储的是层序遍历的值</p><p>已知孩子节点下标 父节点下标为(i-1)&#x2F;2</p><p>如果2 * i + 1 小于节点个数，则节点i的左孩子下标为2 * i + 1，否则没有左孩子<br>如果2 * i + 2 小于节点个数，则节点i的右孩子下标为2 * i + 2，否则没有右孩子</p><p>由一个初始数组创建大根堆：</p><p>从最后一棵树开始（这种树只有两层），向前面的节点进行遍历方法，先找到这棵树的根节点，再调用找到值更大的节点，与根节点的值进行比较，如果比根节点的值大，那么就调换位置，如此下去将p置于c的位置，再次迭代，直到找不到子节点（子节点的下标值大于数组的最大下标）</p><p>方法的参数（一个父节点用来定义一棵树，树的节点个数）</p><p>假设树的高度为h</p><p>​T(n) &#x3D; 2^0 <em>(h-1) + 2^1</em>(h-2) +….+2^(h-2)*1 结合思想来算时间复杂度</p><p>错位相减法最后得到 T(n) &#x3D; 2^h-1- h</p><p>n &#x3D; 2^h -1 </p><p>h &#x3D; log (n+1)</p><p>T(n) &#x3D; n - log(n+1) &#x3D; n –&gt; T(n) &#x3D; O(n)</p><p>当采用向下调整去建堆的时候 时间复杂度为O(n)</p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/%E5%BB%BA%E5%A0%86%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97.png" alt="建堆时间复杂度计算" style="zoom:50%;" /><p>插入操作</p><ol><li>80往哪里放</li><li>放进去怎么放到合适的位置 –&gt; 向上调整</li></ol><p>child &#x3D;&#x3D; 0时结束 找到父节点 p p与c不断变换迭代</p><p>删除操作</p><p>优先级高删除 那么就是大根堆的顶部 也就是数组的第一个元素</p><p>方法思路：先交换头下标和最后一个下标，然后再对根进行调整（向下调整）</p><hr><h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue:"></a>PriorityQueue:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">priorityQueue默认情况下是小根堆</span><br><span class="line">类型必须能比较大小 也就是实现了Comparator接口</span><br><span class="line">不能插入null</span><br><span class="line">没有容量限制 可以插入人意多个元素 内部可以自动扩容</span><br><span class="line">插入 删除 时间复杂度为O(logN)</span><br><span class="line">底层使用了堆数据结构</span><br></pre></td></tr></table></figure><p>多个构造方法：</p><p>不带参数</p><p>指定容量</p><p>指定比较器</p><p>容量+比较器</p><p>queue: Object类型数组</p><p>默认容量：11</p><p>用一个集合创建优先级队列（传入实现collection接口的参数）</p><p>扩容方法：</p><p>​如果在64以下，+2</p><p>​64以上 二倍扩容</p><p>如果超过MAX__ARRAY_SIZE 就按照其他的方法扩容</p><hr><p>Oj:</p><p>topK问题：求数据集合中钱K个最大的元素或者最小的元素，一般情况下数据量都比较大</p><p>采用 PriorityQueue 19ms</p><p>用选择排序 直接超时</p><p>做法1:把数组排序 排序之后取出钱10个最大的 数据里那个非常大的时候 你无法在内存中排序</p><p>做法2:优先级队列 出队k次  效率不高  复杂度为O(n<em>logn + k</em>logn) &#x3D; O((n+k)logn) 因为n比k大，所以logn一定比logk大 这种做法明显复杂度是要高的</p><p>建议的做法：（用复杂度或者思路去分析耗时应该是更小的）</p><p>前K个最大的数据 先建立 小根堆 K个元素（直接数组前K个元素）</p><p>小根堆最上面的元素是最小的元素  拿数组中的元素与堆顶元素比较 如果比堆顶元素小 那么可以知道数组中的这个元素一定不是最大的k个元素之一</p><p>(O(K)+O(N-K))*logK(调整)</p><p>最后的复杂度是O(n*logK)</p><p>时间最小的还是快速排序</p><p>找第K大的元素 小根堆K个元素   找第K小的元素元素 大根堆K个元素 最后都是把堆顶元素取出来就可以了</p><hr><p>堆的应用–利用堆作为底层结构封装优先级队列</p><p>向上调整 时间复杂度O(nlogn)</p><p>向下调整 时间复杂度O(logn)</p><p>堆排序：从小到大进行排序</p><p>所有的排序都指的是对原来的数据进行排序</p><p>建立一个大根堆，每次把堆顶 和 堆的最后一个元素进行交换 这样最大根就是有序的（也就是到了它应在的位置）</p><p>每次换位之后要进行调整</p><p>相当于是从数组的最后一个元素开始进行排序</p><p>降序排序也差不多 只不过换成了小根堆</p><p>一组记录排序码：排序时的一个快照</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestHeap</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> [] elem;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> usedSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestHeap</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.elem = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestHeap</span><span class="params">(<span class="type">int</span> []array)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.elem = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            elem[i] = array[i];</span><br><span class="line">            usedSize++;</span><br><span class="line">            <span class="keyword">if</span>(usedSize == elem.length)</span><br><span class="line">            &#123;</span><br><span class="line">                elem = Arrays.copyOf(elem, elem.length * <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        createHeap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createHeap</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> (usedSize-<span class="number">1</span>-<span class="number">1</span>)/<span class="number">2</span>;parent&gt;=<span class="number">0</span>;parent--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//每一次调整都是从根节点往下调 向下调整</span></span><br><span class="line">            shiftDown(parent,usedSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shiftDown</span><span class="params">(<span class="type">int</span> parent,<span class="type">int</span> usedSize)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> findChild(parent,usedSize);</span><br><span class="line">        <span class="keyword">if</span>(child == -<span class="number">1</span> || elem[child] &lt; elem[parent])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//不存在左右子树 或者 已经是大根堆不用调整的情况</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行交换操作</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> elem[child];</span><br><span class="line">        elem[child] = elem[parent];</span><br><span class="line">        elem[parent] = tmp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向下再次递归，因为child指向的节点发生了改变，所以向child进行递归</span></span><br><span class="line">        shiftDown(child,usedSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findChild</span><span class="params">(<span class="type">int</span> parent,<span class="type">int</span> usedSize)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> parent*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> parent*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left &gt; usedSize-<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//无子树</span></span><br><span class="line">            <span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(right &gt; usedSize-<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//有左子树 无右子树</span></span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左右子树都有</span></span><br><span class="line">        <span class="keyword">return</span> (elem[left]&gt;elem[right])?left:right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 元素值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先插到最后一棵树的最后一个子节点 也就是 数组中的最后一位</span></span><br><span class="line">        <span class="keyword">if</span>(usedSize == elem.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//扩容</span></span><br><span class="line">            elem = Arrays.copyOf(elem, elem.length * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插到最后一位</span></span><br><span class="line">        elem[usedSize++] = val;</span><br><span class="line"></span><br><span class="line">        shiftUp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向上调整</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">shiftUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//首先 找到父节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> usedSize-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> (child-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//大根堆 如果没找到底并且根比该节点小 就要交换 child等于0就要结束</span></span><br><span class="line">        <span class="keyword">while</span>(child &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(elem[parent] &lt; elem[child]) &#123;</span><br><span class="line">                <span class="comment">//交换</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> elem[child];</span><br><span class="line">                elem[child] = elem[parent];</span><br><span class="line">                elem[parent] = tmp;</span><br><span class="line">                <span class="comment">//迭代</span></span><br><span class="line">                child = parent;</span><br><span class="line">                parent = (child-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除 也就是优先级队列的出队操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先调换头尾位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> elem[<span class="number">0</span>];</span><br><span class="line">        elem[<span class="number">0</span>] = elem[usedSize-<span class="number">1</span>];</span><br><span class="line">        elem[usedSize-<span class="number">1</span>] = tmp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//出队列 usedSize--</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> elem[usedSize-<span class="number">1</span>];</span><br><span class="line">        usedSize--;</span><br><span class="line">        shiftDown(<span class="number">0</span>,usedSize);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//堆排序要是大根堆（升序排序）</span></span><br><span class="line">        <span class="comment">//如果是降序排序就是小根堆：</span></span><br><span class="line">        <span class="comment">//还是把根节点和最后一位互换</span></span><br><span class="line">        <span class="comment">// 思想还是从最后一位开始排序 然后又从根节点向下调整</span></span><br><span class="line">        <span class="comment">// 要注意每次调整的范围 最后一位就相当于是删除出去了</span></span><br><span class="line">        <span class="keyword">if</span>(usedSize == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> usedSize-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(end&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//先把根节点和最后一个节点进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> elem[end];</span><br><span class="line">            elem [end] = elem[<span class="number">0</span>];</span><br><span class="line">            elem[<span class="number">0</span>] = tmp;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//交换之后 要调整 从根节点向下调整</span></span><br><span class="line">            shiftDown(<span class="number">0</span>,end);</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; usedSize; i++) &#123;</span><br><span class="line">            sj.add(elem[i]+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> []array = &#123;<span class="number">27</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">28</span>,<span class="number">34</span>,<span class="number">65</span>,<span class="number">49</span>,<span class="number">25</span>,<span class="number">37</span>&#125;;</span><br><span class="line">        <span class="type">TestHeap</span> <span class="variable">testHeap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestHeap</span>(array);</span><br><span class="line">        testHeap.heapSort();</span><br><span class="line">        System.out.println(testHeap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        priorityQueue.offer(<span class="number">10</span>);</span><br><span class="line">        priorityQueue.offer(<span class="number">5</span>);</span><br><span class="line">        priorityQueue.offer(<span class="number">9</span>);</span><br><span class="line">        priorityQueue.offer(<span class="number">7</span>);</span><br><span class="line">        priorityQueue.offer(<span class="number">77</span>);</span><br><span class="line">        System.out.println(priorityQueue.poll());</span><br><span class="line">        System.out.println(priorityQueue.poll());</span><br><span class="line">        System.out.println(priorityQueue.poll());</span><br><span class="line">        System.out.println(priorityQueue.poll());</span><br><span class="line">        System.out.println(priorityQueue.poll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * topK问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 输入的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k 要拿出前多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数组的形式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] smallestK(<span class="type">int</span> []arr,<span class="type">int</span> k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> []res = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">if</span>(arr.length == <span class="number">0</span> || k == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//找最小的话 就用大根堆 在建堆的时候就得到结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;k)&#123;</span><br><span class="line">                priorityQueue.offer(arr[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!priorityQueue.isEmpty()&amp;&amp;priorityQueue.peek()&gt;arr[i]) &#123;</span><br><span class="line">                    priorityQueue.poll();</span><br><span class="line">                    priorityQueue.offer(arr[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!priorityQueue.isEmpty())</span><br><span class="line">                res[i] = priorityQueue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====根据数组创建一个大根堆=====&quot;</span>);</span><br><span class="line">        <span class="type">int</span> []array = &#123;<span class="number">27</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">28</span>,<span class="number">34</span>,<span class="number">65</span>,<span class="number">49</span>,<span class="number">25</span>,<span class="number">37</span>&#125;;</span><br><span class="line">        <span class="type">TestHeap</span> <span class="variable">testHeap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestHeap</span>(array);</span><br><span class="line">        System.out.println(<span class="string">&quot;大根堆:&quot;</span>+testHeap);</span><br><span class="line">        testHeap.offer(<span class="number">80</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=====插入元素：80=====&quot;</span>);</span><br><span class="line">        System.out.println(testHeap);</span><br><span class="line">        System.out.println(<span class="string">&quot;=====出队=====&quot;</span>);</span><br><span class="line">        System.out.println(testHeap.poll());</span><br><span class="line">        System.out.println(testHeap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;优先级队列&quot;&gt;&lt;a href=&quot;#优先级队列&quot; class=&quot;headerlink&quot; title=&quot;优先级队列&quot;&gt;&lt;/a&gt;优先级队列&lt;/h2&gt;&lt;p&gt;底层使用了堆 堆就是完全二叉树的基础上进行了一些调整&lt;/p&gt;
&lt;p&gt;按完全二叉树的顺序存储方式存储 在一个一维数组中</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>栈和队列</title>
    <link href="http://example.com/2024/02/04/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>http://example.com/2024/02/04/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</id>
    <published>2024-02-04T15:25:03.000Z</published>
    <updated>2024-02-22T08:54:34.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h3><hr><ol><li><p>入栈顺序给出，选出不可能的出栈顺序</p></li><li><p>利用栈逆序打印线性表结构，先遍历一次，依次将各个元素压入，再依次弹出</p><ol start="3"><li><p>括号匹配：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">思想：字符串有一个右括号，就必然有一个最后一个左括号与其匹配</span><br><span class="line"> 失败的情况：</span><br><span class="line">      1. 不匹配的情况</span><br><span class="line">      2. 有右括号但是此时发现栈已空的情况</span><br><span class="line">      3. 遍历字符串结束但是栈还是不为空的情况</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//当前字符</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="comment">//是左括号的情况</span></span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;&#123;&#x27;</span> || ch == <span class="string">&#x27;[&#x27;</span> || ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//压入栈中</span></span><br><span class="line">                stack.push(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//是右括号的情况</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//检查此时栈是否为空</span></span><br><span class="line">                <span class="keyword">if</span>(!stack.empty())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//栈不为空，检查栈顶元素是否匹配</span></span><br><span class="line">                    <span class="keyword">if</span>(ch == <span class="string">&#x27;)&#x27;</span> &amp;&amp; stack.peek() == <span class="string">&#x27;(&#x27;</span> ||</span><br><span class="line">                            ch == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; stack.peek() == <span class="string">&#x27;&#123;&#x27;</span> ||</span><br><span class="line">                            ch == <span class="string">&#x27;]&#x27;</span> &amp;&amp; stack.peek() == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//元素匹配，出栈</span></span><br><span class="line">                        stack.pop();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//元素不匹配，退出</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//栈已空 ，说明不匹配，直接退出</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历结束，检查此时栈是否为空</span></span><br><span class="line">        <span class="keyword">return</span> stack.empty();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>4.逆波兰表达式求值：</p><p>​中缀表达式 (1+2)*5</p><p>​后缀表达式 1 2 + 5 *</p><p>中缀表达式转化为后缀表达式 先按乘除，再按加减 加括号 然后再把每个括号内的运算符移到括号的后面 最后去掉所有的括号就是后缀表达式（选择题适用的解法）</p><p>计算后缀表达式：</p><p>​如果是数字，放到栈里面，接着遍历</p><p>​如果是运算符，弹出栈顶的两个元素，第一个作为右操作数，第二个作为左操作数（切记！！！），再把运算结果压入栈中</p><p>​最后栈中的值就是表达式的结果</p><p>任何的运算符都是结合两个操作数的（四则运算）</p><hr><ol start="5"><li>出栈入栈次序匹配</li></ol><p>思路：按照给出的出栈次序 来对数据进行入栈操作</p><p>pushA数组 popA数组</p><pre><code>1. 变量pushA 每次拿到一个数据就放到栈当中，i++，j不动1. 两个数组的遍历指针指向的值一致时，就出栈，j++1. i遍历完了而栈中仍有元素，说明匹配失败，错误的出栈序列</code></pre><hr><ol start="6"><li><p>最小栈：</p><ol><li>入栈操作  stack正常入栈 minStack每次入栈的元素要和栈顶元素比较，如果比minStack栈顶元素小或者等于栈顶元素，就要入栈</li><li>第一次入栈的时候 两个栈都要放元素</li><li>出栈操作</li></ol><p>stack 这个栈正常出栈 但是每次出栈的时候都要和最小栈的栈顶元素比较 如果一样 此时两个栈都要出元素</p></li></ol><hr><p>使用双向链表实现栈是最好的 不管从哪边入栈出栈都是O(1) 时间复杂度</p><p>也可以把LinkedLIst当作是一个队列，队尾进 队头出</p><p>Deque 双端队列</p><p>LinkedList 实现了Deque Deque 继承了 Queue接口</p><p>Offer(E e) 和 add(E e) 方法的区别：达到容量上限时，offer会扩容插入不抛出异常 add会抛出异常</p><p>remove() 和 poll() 的区别：为空时 poll返回空指针 remove()则会抛出异常</p><p>模拟实现Java里面的Queue：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyQueue</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ListNode</span>&lt;E&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> E val;</span><br><span class="line">        <span class="keyword">public</span> ListNode&lt;E&gt; prev;</span><br><span class="line">        <span class="keyword">public</span> ListNode&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        ListNode()&#123;&#125;</span><br><span class="line"></span><br><span class="line">        ListNode(E val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            prev = <span class="literal">null</span>;</span><br><span class="line">            next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队头</span></span><br><span class="line">    <span class="keyword">private</span> ListNode&lt;E&gt; front;</span><br><span class="line">    <span class="comment">//队尾</span></span><br><span class="line">    <span class="keyword">private</span> ListNode&lt;E&gt; rear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录大小</span></span><br><span class="line">    <span class="keyword">private</span> Integer usedSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        front = rear = <span class="literal">null</span>;</span><br><span class="line">        usedSize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 队列为空 true 队列不为空 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> usedSize == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾插法入队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(E x)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ListNode&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">ListNode</span>&lt;E&gt;(x);</span><br><span class="line">        <span class="keyword">if</span>(front == <span class="literal">null</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//此时队列中无节点</span></span><br><span class="line">            front = rear = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//尾插法入队列</span></span><br><span class="line">            node.prev = rear;</span><br><span class="line">            rear.next = node;</span><br><span class="line">            rear = node;</span><br><span class="line">        &#125;</span><br><span class="line">        usedSize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从头部出队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 队头元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(front == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">E</span> <span class="variable">ret</span> <span class="operator">=</span> front.val;</span><br><span class="line">        <span class="keyword">if</span>(front == rear)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//此时有一个节点,从头部删除节点</span></span><br><span class="line">            front = rear = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//正常情况</span></span><br><span class="line">            front = front.next;</span><br><span class="line">            front.prev = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        usedSize--;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回队列大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 队列大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> usedSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看队头元素（不删除）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 队头元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(front == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> front.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印字符串方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 队列的字符串形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;&lt;=&gt;&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ListNode&lt;E&gt; cur = front;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sj.add(cur.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyQueue&lt;String&gt; myQueue = <span class="keyword">new</span> <span class="title class_">MyQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        myQueue.offer(<span class="string">&quot;fuck&quot;</span>);</span><br><span class="line">        myQueue.offer(<span class="string">&quot;you&quot;</span>);</span><br><span class="line">        myQueue.offer(<span class="string">&quot;bitch&quot;</span>);</span><br><span class="line">        myQueue.offer(<span class="string">&quot;asshole&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(myQueue);</span><br><span class="line"></span><br><span class="line">        System.out.println(myQueue.poll());</span><br><span class="line">        System.out.println(myQueue.poll());</span><br><span class="line">        System.out.println(myQueue.poll());</span><br><span class="line"></span><br><span class="line">        System.out.println(myQueue.size());</span><br><span class="line">        System.out.println(myQueue.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(myQueue.peek());</span><br><span class="line"></span><br><span class="line">        System.out.println(myQueue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>队列的数组实现：</p><p>循环队列 rear下标 是当前可以存放数据元素的下标</p><p>rear 7 –》 0 与front再次相遇</p><ol><li>定义usedSize &#x3D;&#x3D; len</li><li>标记</li><li>浪费一个空间 来区分</li></ol><p>如何把数组看做是一个循环的</p><p>更新front和rear</p><p>rear &#x3D; (rear+1)%len </p><p>Front &#x3D; (front+1)%len</p><hr><p>双端队列 deque：double ended queue</p><p>可以作为栈使用  </p><hr><p>用普通的两个队列实现栈 ： 一个普通队列无法实现栈</p><ol><li>当两个队列都为空 说明模拟实现的栈是空的</li><li>出栈的时候 一个队列不为空 出size-1个 最后那一个元素 就是 出栈的元素</li><li>入栈的时候 入到不为空的队列</li><li>都为空的时候指定放入que1</li></ol><hr><p>用两个普通的栈实现队列：</p><ol><li>入队的时候 把所有的元素 全部放在第一个栈当中</li><li>出队的时候 把第一个栈当中的元素 全部倒回第二个栈当中 出第二个栈的栈顶元素</li></ol><p>出队的时候要判断空不空</p><p>入统一s1 出统一s2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MinStack</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Stack&lt;Integer&gt; stack;</span><br><span class="line">        <span class="keyword">public</span> Stack&lt;Integer&gt; min;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">            stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            min = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(min.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                stack.push(val);</span><br><span class="line">                min.push(val);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!min.empty() &amp;&amp; val&lt;=min.peek())</span><br><span class="line">            &#123;</span><br><span class="line">                min.push(val);</span><br><span class="line">                stack.push(val);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stack.push(val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(!min.empty() &amp;&amp; pop.equals(min.peek()))</span><br><span class="line">            &#123;</span><br><span class="line">                min.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> stack.peek();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> min.peek();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object[] elem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> top;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    MyStack()</span><br><span class="line">    &#123;</span><br><span class="line">        elem  = <span class="keyword">new</span> <span class="title class_">Object</span>[DEFAULT_CAPACITY];</span><br><span class="line">        top = -<span class="number">1</span>;</span><br><span class="line">        capacity = DEFAULT_CAPACITY;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Object data)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(top+<span class="number">1</span> == capacity)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//需要扩容</span></span><br><span class="line">            capacity*=<span class="number">2</span>;</span><br><span class="line">            elem = Arrays.copyOf(elem, capacity);</span><br><span class="line">            System.out.println(<span class="string">&quot;栈扩容&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        elem[++top] = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">pop</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(top &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈已空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elem[top--];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">peek</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(top &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈已空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elem[top];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;, &quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            sj.add(elem[i]+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 括号匹配</span></span><br><span class="line"><span class="comment">     * 思想：字符串有一个右括号，就必然有一个最后一个左括号与其匹配</span></span><br><span class="line"><span class="comment">     * 失败的情况：</span></span><br><span class="line"><span class="comment">     *      1. 不匹配的情况</span></span><br><span class="line"><span class="comment">     *      2. 有右括号但是此时发现栈已空的情况</span></span><br><span class="line"><span class="comment">     *      3. 遍历字符串结束但是栈还是不为空的情况</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 待检查的括号字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否匹配</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//当前字符</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="comment">//是左括号的情况</span></span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;&#123;&#x27;</span> || ch == <span class="string">&#x27;[&#x27;</span> || ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//压入栈中</span></span><br><span class="line">                stack.push(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//是右括号的情况</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//检查此时栈是否为空</span></span><br><span class="line">                <span class="keyword">if</span>(!stack.empty())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//栈不为空，检查栈顶元素是否匹配</span></span><br><span class="line">                    <span class="keyword">if</span>(ch == <span class="string">&#x27;)&#x27;</span> &amp;&amp; stack.peek() == <span class="string">&#x27;(&#x27;</span> ||</span><br><span class="line">                            ch == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; stack.peek() == <span class="string">&#x27;&#123;&#x27;</span> ||</span><br><span class="line">                            ch == <span class="string">&#x27;]&#x27;</span> &amp;&amp; stack.peek() == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//元素匹配，出栈</span></span><br><span class="line">                        stack.pop();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//元素不匹配，退出</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//栈已空 ，说明不匹配，直接退出</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历结束，检查此时栈是否为空</span></span><br><span class="line">        <span class="keyword">return</span> stack.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过后缀表达式进行四则运算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Double <span class="title function_">calculate</span><span class="params">(String []tokens)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Stack&lt;Double&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;+&quot;</span>.equals(token) || <span class="string">&quot;-&quot;</span>.equals(token)</span><br><span class="line">                    || <span class="string">&quot;*&quot;</span>.equals(token) || <span class="string">&quot;/&quot;</span>.equals(token)) &#123;</span><br><span class="line">                <span class="comment">//是运算符，取出操作数进行运算</span></span><br><span class="line">                <span class="type">Double</span> <span class="variable">right</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">Double</span> <span class="variable">left</span> <span class="operator">=</span> stack.pop();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//压入栈中</span></span><br><span class="line">                <span class="keyword">switch</span> (token) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                        stack.push(left + right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                        stack.push(left - right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                        stack.push(left * right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                        stack.push(left / right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//不是运算符，转化为数压入栈中</span></span><br><span class="line">                stack.push(Double.parseDouble(token));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运算符优先级对照表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[][] relation= &#123;</span><br><span class="line">            &#123;<span class="string">&quot; &quot;</span>,<span class="string">&quot; &quot;</span>,<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&lt;&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot; &quot;</span>,<span class="string">&quot; &quot;</span>,<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&lt;&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot; &quot;</span>,<span class="string">&quot; &quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot; &quot;</span>,<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运算符数组，对照位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String []operators = &#123;<span class="string">&quot;+&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中缀表达式转为后缀表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 中缀表达式 用字符串数组的形式呈现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 后缀表达式 String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">transfer</span><span class="params">(String []str)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Stack&lt;String&gt; ops = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//转为后缀表达式——《大话数据结构》</span></span><br><span class="line">        <span class="keyword">for</span> (String s: str) &#123;</span><br><span class="line">            <span class="comment">//分三种情况 ，运算符 ，数字， 括号</span></span><br><span class="line">            <span class="keyword">if</span>(isOperator(s))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ops.empty())</span><br><span class="line">                &#123;</span><br><span class="line">                    ops.push(s);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(ops.peek().equals(<span class="string">&quot;(&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    ops.push(s);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//是运算符</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> findPos(s);</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> findPos(ops.peek());</span><br><span class="line">                <span class="comment">//如果栈顶元素的优先级大于当前元素，就依次出栈</span></span><br><span class="line">                <span class="keyword">if</span>(relation[left][right].equals(<span class="string">&quot;&gt;&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">while</span>(!ops.empty())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">op</span> <span class="operator">=</span> ops.pop();</span><br><span class="line">                        <span class="keyword">if</span>(!op.equals(<span class="string">&quot;(&quot;</span>)&amp;&amp;!op.equals(<span class="string">&quot;)&quot;</span>))</span><br><span class="line">                            sb.append(op+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ops.push(s);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//入栈</span></span><br><span class="line">                    ops.push(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(isBrace(s))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//是括号</span></span><br><span class="line">                <span class="comment">//左括号入栈，右括号出栈直到左括号出栈</span></span><br><span class="line">                <span class="keyword">if</span>(s.equals(<span class="string">&quot;(&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    ops.push(s);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">&quot;)&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">op</span> <span class="operator">=</span> ops.pop();</span><br><span class="line">                        <span class="keyword">if</span>(op.equals(<span class="string">&quot;(&quot;</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        sb.append(op+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//是数字 直接输出</span></span><br><span class="line">                sb.append(s+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!ops.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">op</span> <span class="operator">=</span> ops.pop();</span><br><span class="line">            sb.append(op+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到运算符在运算符数组中的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 运算符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 位置 int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findPos</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; operators.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.equals(operators[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isOperator</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> s.equals(<span class="string">&quot;+&quot;</span>) || s.equals(<span class="string">&quot;-&quot;</span>) ||</span><br><span class="line">                s.equals(<span class="string">&quot;*&quot;</span>) || s.equals(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isBrace</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> s.equals(<span class="string">&quot;(&quot;</span>) || s.equals(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入两个数组，一个是入栈顺序，另一个是可能的出栈顺序，匹配是不是出栈顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pushV 入栈顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> popV 可能的出栈顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 是可能的顺序 false 不是可能的顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPopOrder</span><span class="params">(Integer []pushV,Integer []popV)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pushV.length; i++) &#123;</span><br><span class="line">            stack.push(pushV[i]);</span><br><span class="line">            <span class="keyword">while</span>(!stack.empty() &amp;&amp; j&lt; popV.length &amp;&amp; stack.peek().equals(popV[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Integer []pushV = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        Integer []popV = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(isPopOrder(pushV, popV));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testForCalculation</span><span class="params">()</span> &#123;</span><br><span class="line">        String [] str = &#123;<span class="string">&quot;9&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">        String [] str1 = &#123;<span class="string">&quot;(&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        String [] str2 = &#123;<span class="string">&quot;4&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;13&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;)&quot;</span>&#125;;</span><br><span class="line">        String [] str3 = &#123;<span class="string">&quot;(&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;-11&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;17&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入待计算的表达式：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        String[] exps = exp.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">transfer</span> <span class="operator">=</span> transfer(exps);</span><br><span class="line">        String[] tokens = transfer.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println(calculate(tokens));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> test1215.Info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyQueue</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ListNode</span>&lt;E&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> E val;</span><br><span class="line">        <span class="keyword">public</span> ListNode&lt;E&gt; prev;</span><br><span class="line">        <span class="keyword">public</span> ListNode&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        ListNode()&#123;&#125;</span><br><span class="line"></span><br><span class="line">        ListNode(E val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            prev = <span class="literal">null</span>;</span><br><span class="line">            next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队头</span></span><br><span class="line">    <span class="keyword">private</span> ListNode&lt;E&gt; front;</span><br><span class="line">    <span class="comment">//队尾</span></span><br><span class="line">    <span class="keyword">private</span> ListNode&lt;E&gt; rear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录大小</span></span><br><span class="line">    <span class="keyword">private</span> Integer usedSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        front = rear = <span class="literal">null</span>;</span><br><span class="line">        usedSize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 队列为空 true 队列不为空 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> usedSize == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾插法入队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(E x)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ListNode&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">ListNode</span>&lt;E&gt;(x);</span><br><span class="line">        <span class="keyword">if</span>(front == <span class="literal">null</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//此时队列中无节点</span></span><br><span class="line">            front = rear = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//尾插法入队列</span></span><br><span class="line">            node.prev = rear;</span><br><span class="line">            rear.next = node;</span><br><span class="line">            rear = node;</span><br><span class="line">        &#125;</span><br><span class="line">        usedSize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从头部出队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 队头元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(front == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">E</span> <span class="variable">ret</span> <span class="operator">=</span> front.val;</span><br><span class="line">        <span class="keyword">if</span>(front == rear)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//此时有一个节点,从头部删除节点</span></span><br><span class="line">            front = rear = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//正常情况</span></span><br><span class="line">            front = front.next;</span><br><span class="line">            front.prev = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        usedSize--;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回队列大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 队列大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> usedSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看队头元素（不删除）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 队头元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(front == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> front.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印字符串方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 队列的字符串形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;&lt;=&gt;&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ListNode&lt;E&gt; cur = front;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sj.add(cur.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyQueue&lt;String&gt; myQueue = <span class="keyword">new</span> <span class="title class_">MyQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        myQueue.offer(<span class="string">&quot;fuck&quot;</span>);</span><br><span class="line">        myQueue.offer(<span class="string">&quot;you&quot;</span>);</span><br><span class="line">        myQueue.offer(<span class="string">&quot;bitch&quot;</span>);</span><br><span class="line">        myQueue.offer(<span class="string">&quot;asshole&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(myQueue);</span><br><span class="line"></span><br><span class="line">        System.out.println(myQueue.poll());</span><br><span class="line">        System.out.println(myQueue.poll());</span><br><span class="line">        System.out.println(myQueue.poll());</span><br><span class="line"></span><br><span class="line">        System.out.println(myQueue.size());</span><br><span class="line">        System.out.println(myQueue.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(myQueue.peek());</span><br><span class="line"></span><br><span class="line">        System.out.println(myQueue);</span><br><span class="line"></span><br><span class="line">        Queue&lt;Integer&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackInQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; que1;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; que2;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StackInQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//制造两个空队列</span></span><br><span class="line">        que1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//两个都为空默认为que1</span></span><br><span class="line">        <span class="keyword">if</span>(!que2.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            que2.offer(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            que1.offer(x);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//找到不为空的队列，将size-1个元素放到另一个空队列中</span></span><br><span class="line">        <span class="keyword">if</span>(empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Queue&lt;Integer&gt; que = (que1.isEmpty())?que2:que1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(que == que1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size-<span class="number">1</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                que2.offer(que1.poll());</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> que1.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(que == que2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size-<span class="number">1</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                que1.offer(que2.poll());</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> que2.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Integer&gt; que = (que1.isEmpty())?que2:que1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(que == que1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size-<span class="number">1</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                que2.offer(que1.poll());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span>  que1.peek();</span><br><span class="line">            que2.offer(que1.poll());</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(que == que2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size-<span class="number">1</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                que1.offer(que2.poll());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> que2.peek();</span><br><span class="line">            que1.offer(que2.poll());</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//两个队列都为空</span></span><br><span class="line">        <span class="keyword">return</span> que1.isEmpty() &amp;&amp; que2.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StackInQueue</span> <span class="variable">siq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StackInQueue</span>();</span><br><span class="line"></span><br><span class="line">        siq.push(<span class="number">1</span>);</span><br><span class="line">        siq.push(<span class="number">2</span>);</span><br><span class="line">        siq.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(siq.pop());</span><br><span class="line">        System.out.println(siq.pop());</span><br><span class="line">        System.out.println(siq.pop());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;栈和队列&quot;&gt;&lt;a href=&quot;#栈和队列&quot; class=&quot;headerlink&quot; title=&quot;栈和队列&quot;&gt;&lt;/a&gt;栈和队列&lt;/h3&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;入栈顺序给出，选出不可能的出栈顺序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用栈逆序打印线性表结构，</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://example.com/2024/02/04/%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2024/02/04/%E9%93%BE%E8%A1%A8/</id>
    <published>2024-02-04T15:23:02.000Z</published>
    <updated>2024-02-22T08:53:15.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>重点学习无头单向非循环 双向无头非循环链表，这两种才是工作笔试面试当中的重点</p><p>插入的时候要先绑定后面的节点信息</p><p>当cur.next等于null时，就是尾巴节点</p><p>Cur &#x3D;&#x3D; null 代表把链表的每个节点都遍历完了</p><p>写头插法尾插法都要注意在链表为空时的鲁棒性</p><p>数据结构学习时要多画图 思考 调试</p><p>指定位置插入：</p><p>1.检查位置合法性</p><p>2.头插尾插情况单独直接调用方法</p><p>3.中间情况：</p><p>​1.定义cur走index-1步，找到插入位置的前一个</p><p>​2.进行插入</p><p>删除元素</p><p>1.找到要删除节点的前一个节点</p><p>2.此时要删除的节点del &#x3D; cur.next</p><p>3.进行删除</p><p>​cur.next &#x3D; del.next</p><p>if(cur.next.val &#x3D;&#x3D; key) 找到前一个节点，有一个前提cur不为空</p><p>有一个bug：在头节点无法判断的到，所以在全部循环之后可以检查头节点，这样检查次数最少且有效 </p><hr><p>OJ题：</p><p>找到链表的中间节点，奇数个就返回中间那个，偶数个返回中间两个的后面一个，要求只能遍历一遍实现</p><p>思路：双指针，一个fast一个slow，fast每次走两步，slow每次走一步，走到最后slow就是到了中间节点，（对于奇偶都适用）</p><p>原理：速度*时间 &#x3D; 距离（速度两倍，距离自然也两倍）</p><p>Fast &#x3D; fast.next.next</p><p>slow &#x3D; slow.next</p><p>循环条件：fast!&#x3D;null &amp;&amp; fast.next!&#x3D;null 需注意条件的顺序不可变化（利用短路规避空指针问题）</p><hr><p>找倒数第k个节点：5-2 &#x3D; 3</p><p>可以直接减k得步数，也可以像上面一样利用它fast和slow指针</p><p>fast要领先slow k-1步，然后同时走，fast到末尾时slow就到目标节点</p><p>原理：速度一致，两个指针之间的距离不变（路程差确定）</p><hr><p>合并两个有序链表变成一个链表</p><p>首先定义一个newHead指针和一个tmpHead指针，一个表示合成后链表的头节点，一个表示当前合成链表的尾节点</p><p>然后遍历两个链表，比较两个链表当前指针指向元素的大小，小的一个使tmpHead指针的next域指向它，然后更新tmpHead和这个链表的当前指针</p><p>最后其中一个链表到尾之后结束循环</p><p>因为两个链表的长度不一定相等，所以要检查是哪个链表到尾巴了，没有到尾巴的那一个使tmpHead的next域指向它</p><p>最后返回头节点的next即可（因为头节点无意义）</p><hr><p>将链表按标识大小分成两块</p><p>分成两块区域，并且还需要把这两块区域连接起来重新组成一个链表</p><p>所以我们要维护两块区域，before和after区域，用四个指针bs,be,as,ae维护</p><p>首先bs,be,as,ae都是空指针，用于标识是否插入了，因为两块区域第一次插入的情况和后面插入的情况都是不同的（无头节点链表的特性）</p><p>循环，定义cur指针遍历原链表</p><p>比较cur数据域与标识大小，小就插入before区域，大就插入after区域</p><p>第一次插入时，bs,be指针都指向cur，此时be无需移动</p><p>后面的插入，be指针的next指向cur，尾插法连接，然后be指向下一个节点</p><p>结束循环之后，因为无法确保before和after的情况，需要判断空指针的问题</p><p>即要检查before为空时就没有连接这一步，直接返回as</p><p>检查as不为空时，这是要把ae的next指针置为空，不然变成循环链表，遍历时会产生死循环的问题</p><p>然后才可连接be，as，连接之后返回bs即可</p><hr><p>链表的回文结构：</p><ol><li>找到链表的中间节点</li><li>反转中间节点之后的链表</li><li>从前 从后 开始比较</li></ol><p>其实是前面的题目的综合：</p><p>fast，slow指针找到中间节点</p><p>然后将中间节点之后的节点通过头插法倒置（先删出来，再进行头插）</p><p>比较，1.没有相遇（循环条件）</p><p>​    2.val值一样 值不一样 直接返回false</p><p>奇数和偶数的情况有点不同</p><p>偶数条件 if (head.next &#x3D;&#x3D; slow) return true;</p><hr><p>链表的公共点：</p><p>首先，两个链表的相交情况一定是Y字形，不可能是X字形，因为链表的节点只有一个next域，不会有两个next域</p><p>不一样长的地方一定是相遇前的两段，后面一定是一样的（Y字形）</p><p>可以先让 最长的链表的引用 先走他们的差值步 再以同样的速度往后走使其相遇</p><hr><p>判断一个链表是否有环</p><p>还是一样的思想，一个快指针，一个慢指针，如果这两个指针同时出发，会再次相遇，则这说明这个链表有环</p><p>原理：速度不一样起点相同还能相遇，只能说明是在一个环内运动</p><p>规则：快的速度是慢的速度两倍，最快相遇，3倍4倍可能会出现不会相遇的情况（节点个数不同时）</p><p>一个走一步。一个走两步，追及问题</p><hr><p>给定一个链表，返回链表入环的第一个节点</p><p><img src="https://markdownphotos.oss-cn-shenzhen.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2024-01-24%2010.57.28.png" alt="截屏2024-01-24 10.57.28"></p><hr><p>删除一个链表里面的所有重复项：</p><p>Cur.next!&#x3D;null &amp;&amp; cur.data &#x3D;&#x3D; cur.next.data</p><p>注意遇到重复元素时要一直走到不重复的元素为止</p><p>把不重复的元素插入到一个新的链表中，不额外分配空间，但是是一个新的头节点引用</p><hr><p>模拟实现LinkedList双向链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.PrimitiveIterator;</span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无头双向链表实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MockLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表的节点类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ListNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> val;</span><br><span class="line">        <span class="keyword">private</span> ListNode prev;</span><br><span class="line">        <span class="keyword">private</span> ListNode next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            prev = <span class="literal">null</span>;</span><br><span class="line">            next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;(&quot;</span>+val+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表的头节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表的尾节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表的头插法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 要插入的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> data)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先准备好一个结点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分情况讨论</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head = last = newNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            newNode.next = head;</span><br><span class="line">            head.prev = newNode;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> data)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head = last = newNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            newNode.prev = last;</span><br><span class="line">            last.next = newNode;</span><br><span class="line">            last = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查位置是否合法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true合法 false不合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkIndex</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> size();</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任意位置插入,第一个数据节点为0号下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 指定下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 待插入的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addIndex</span><span class="params">(<span class="type">int</span> index,<span class="type">int</span> data)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!checkIndex(index))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(index+<span class="string">&quot; 位置不合法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            addFirst(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index == size())</span><br><span class="line">        &#123;</span><br><span class="line">            addLast(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中间插入</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;index;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curNext</span> <span class="operator">=</span> cur.next;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(data);</span><br><span class="line"></span><br><span class="line">        newNode.next = curNext;</span><br><span class="line">        newNode.prev = cur;</span><br><span class="line"></span><br><span class="line">        cur.next = newNode;</span><br><span class="line">        curNext.prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找是否包含关键字key是否在单链表当中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 要查找的关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含true 不包含false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.val == key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除第一次出现的与目标值相同的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 目标值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;链表为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要分为头节点 尾节点考虑</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.val == key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//头节点情况 cur.prev为空</span></span><br><span class="line">        <span class="keyword">if</span>(cur == head)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//删除头节点</span></span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="keyword">if</span>(head == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                last = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head.prev = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除尾节点情况 cur.next为空</span></span><br><span class="line">        <span class="keyword">if</span>(cur == last)</span><br><span class="line">        &#123;</span><br><span class="line">            last = last.prev;</span><br><span class="line">            <span class="keyword">if</span>(last == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                head = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            last.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正常中间情况,找到了元素</span></span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            cur.prev.next = cur.next;</span><br><span class="line">            cur.next.prev = cur.prev;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有找到元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;链表中没有找到该元素！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除所有值为key的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 要匹配的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAllKey</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.val == key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(cur == head)</span><br><span class="line">                &#123;</span><br><span class="line">                    head = head.next;</span><br><span class="line">                    <span class="keyword">if</span>(head!=<span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        head.prev = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        last = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cur == last)</span><br><span class="line">                &#123;</span><br><span class="line">                    last = last.prev;</span><br><span class="line">                    <span class="keyword">if</span>(last != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        last.next = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        head = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cur.prev.next = cur.next;</span><br><span class="line">                    cur.next.prev = cur.prev;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到双向链表的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 长度值 size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印双向链表的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 需要打印的字符串形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;&lt;=&gt;&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sj.add(cur.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空链表里面所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//要真正释放所有内存空间，需要遍历置空</span></span><br><span class="line">         <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="comment">//需要先保留下一个节点的信息再把自己的域置空</span></span><br><span class="line">             <span class="type">ListNode</span> <span class="variable">curNext</span> <span class="operator">=</span> cur.next;</span><br><span class="line"></span><br><span class="line">             cur.prev = <span class="literal">null</span>;</span><br><span class="line">             cur.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">             cur = curNext;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        head = last = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归逆序打印链表(利用栈的特点逆序，先入后出)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head 头节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(ListNode head)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        display(head.next);</span><br><span class="line">        System.out.print(head.val+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MockLinkedList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockLinkedList</span>();</span><br><span class="line"></span><br><span class="line">        list.addFirst(<span class="number">12</span>);</span><br><span class="line">        list.addFirst(<span class="number">23</span>);</span><br><span class="line">        list.addFirst(<span class="number">34</span>);</span><br><span class="line">        list.addFirst(<span class="number">45</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        display(list.head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>LinkedList：</p><p>Iterator.hasPrevious() Iterator.previous() 结合使用可以实现反向遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test0118;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createIntersect</span><span class="params">(LinkedNode headA,LinkedNode headB)</span></span><br><span class="line">    &#123;</span><br><span class="line">        headA.next.next = headB.next.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把节点作为成员内部类进行使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LinkedNode</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Integer data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> LinkedNode next;</span><br><span class="line"></span><br><span class="line">        LinkedNode(<span class="type">int</span> data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">            next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;(&quot;</span>+data+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LinkedNode()&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LinkedNode head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用已经生成的链表初始化一个链表对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">(LinkedNode head)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.head = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表的整表创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 原始数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createList</span><span class="params">(<span class="type">int</span>[] arr)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre == <span class="literal">null</span>) &#123;</span><br><span class="line">                head = <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(i);</span><br><span class="line">                pre = head;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">LinkedNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(i);</span><br><span class="line">            pre.next = cur;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string 字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;-&gt;&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>) &#123;</span><br><span class="line">            sj.add(cur.data+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回链表的大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> size 大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含某个数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 包含 false 不包含</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Integer key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.data.equals(key))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头插法，在初始情况head为空时依然成立</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFront</span><span class="params">(<span class="type">int</span> data)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(data);</span><br><span class="line"></span><br><span class="line">        node.next = head;</span><br><span class="line"></span><br><span class="line">        head = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾插法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEnd</span><span class="params">(<span class="type">int</span> data)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//注意尾插法的鲁棒性</span></span><br><span class="line">            head = <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur.next = <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部类：自定义位置错误异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PosOutOfBoundsException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">PosOutOfBoundsException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为插入元素检查位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos 位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean 是否合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkPosForAdd</span><span class="params">(<span class="type">int</span> pos)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定位置下插入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos 位置（现实位置从1开始）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addIndex</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> data)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先判断位置是否是正确的</span></span><br><span class="line">        pos--;</span><br><span class="line">        <span class="keyword">if</span>(!checkPosForAdd(pos)&amp;&amp;pos != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PosOutOfBoundsException</span>(<span class="string">&quot;位置错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pos == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            addFront(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pos == getSize())</span><br><span class="line">        &#123;</span><br><span class="line">            addEnd(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里走了pos-1步</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; pos; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(data);</span><br><span class="line"></span><br><span class="line">        node.next = pre.next;</span><br><span class="line">        pre.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定元素找到其位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 指定元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> pos 位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findPos</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.data.equals(key))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 指定元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> findPos(key);</span><br><span class="line">        <span class="keyword">if</span>(pos == -<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;链表中没有这个元素！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pos == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里走了pos-1步</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; pos; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">q</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        pre.next = q.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        head = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除所有符合该值的元素</span></span><br><span class="line"><span class="comment">     * (遍历链表一遍就要删除完)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAllKey</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//循环加递归，效率低</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pre == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pre.data == key)</span><br><span class="line">        &#123;</span><br><span class="line">            head = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pre!=<span class="literal">null</span> &amp;&amp; pre.next != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pre.next.data == key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">LinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> pre.next;</span><br><span class="line">                pre.next = node.next;</span><br><span class="line">                removeAllKey(key);</span><br><span class="line">            &#125;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 博哥的方法，删除全部节点效率高且思路清晰</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAll</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//用两个指针指向前一个和后一个元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//要注意判空，避免出现空指针异常</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;链表已空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.data == key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//删除元素,但不能都迭代，之前的cur元素已经被删除，所以cur要移向下一个元素，</span></span><br><span class="line">                <span class="comment">// 因为不确定下一个处于此位置的元素是不是也是目标</span></span><br><span class="line">                pre.next = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//一直到不是目标元素才能够进行迭代</span></span><br><span class="line">                pre = pre.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后判断漏掉的头节点</span></span><br><span class="line">        <span class="keyword">if</span>(head.data == key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果头节点也是目标</span></span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="comment">//因为能够确保后面的目标都已经删除，所以这里只用判断一次就好</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LinkedNode <span class="title function_">getIntersect</span><span class="params">(LinkedNode headA,LinkedNode headB)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//思路：1.先求出两个链表的长度，假设一长一短</span></span><br><span class="line">        <span class="comment">//2.让长链表先走完路程差</span></span><br><span class="line">        <span class="comment">//3，两个指针同时前进，指向同一节点的话就返回</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">pL</span> <span class="operator">=</span> headA;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">pS</span> <span class="operator">=</span> headB;<span class="comment">//先假设A长，B短</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//求长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lenA</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lenB</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pL!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            lenA++;</span><br><span class="line">            pL = pL.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pS!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            lenB++;</span><br><span class="line">            pS = pS.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pL = headA;</span><br><span class="line">        pS = headB;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> lenA - lenB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(len&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//假设不成立，此时需要修正</span></span><br><span class="line">            pL = headB;</span><br><span class="line">            pS = headA;</span><br><span class="line">            len = lenB - lenA;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此时进行走步</span></span><br><span class="line">        <span class="keyword">while</span>(len&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pL = pL.next;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pL!=pS&amp;&amp;pL!=<span class="literal">null</span>&amp;&amp;pS!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pL = pL.next;</span><br><span class="line">            pS = pS.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表就地反转(用头插法解决即可,有点类似于栈的思想)</span></span><br><span class="line"><span class="comment">     * 主要思路：将最开始的头节点的下一个节点删出来用头插法再插进去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//要判空，不然初始化cur时会出现空指针异常</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在此处,pre始终指向最开始的头节点</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//先把cur节点删除，弄出来再塞到头部</span></span><br><span class="line">            pre.next = cur.next;</span><br><span class="line"></span><br><span class="line">            <span class="type">LinkedNode</span> <span class="variable">tmp</span> <span class="operator">=</span> cur.next;</span><br><span class="line"></span><br><span class="line">            cur.next = head;</span><br><span class="line"></span><br><span class="line">            head = cur;</span><br><span class="line"></span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到链表的中间节点，且只遍历一次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> middleNode 中间节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LinkedNode <span class="title function_">middleNode</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//定义两个指针fast和slow指针，一个一次走2步，一个一次走1步</span></span><br><span class="line">        <span class="comment">//走到最后slow指向的自然就是中间节点</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span> &amp;&amp; fast.next!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未知链表长度，且只能遍历一遍，找倒数第last个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> last 倒数第几个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> LinkedNode 找到的倒数第last个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LinkedNode <span class="title function_">LastIndexNode</span><span class="params">(<span class="type">int</span> last)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(last &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;提供的位置有误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(last!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">                last--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(fast!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;提供的位置有误，超过了链表长度！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并两个有序链表返回一个新的有序链表的头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> B 另一个有序链表的头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 合并后有序链表的头节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> MyLinkedList <span class="title function_">mergeList</span><span class="params">(LinkedNode B)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//定义一个虚的头节点</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">newHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedNode</span>();</span><br><span class="line">        <span class="comment">//定义一个指针用于指向生成过程中当前的节点</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">tmpHead</span> <span class="operator">=</span> newHead;</span><br><span class="line">        <span class="comment">//定义一个指针指向当前链表的头节点</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">A</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(A!=<span class="literal">null</span> &amp;&amp; B!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(A.data&gt;B.data)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//此时B的值小，下一个节点就是此时B指向的节点</span></span><br><span class="line">                tmpHead.next = B;</span><br><span class="line">                <span class="comment">//更新当前指针</span></span><br><span class="line">                tmpHead = tmpHead.next;</span><br><span class="line">                <span class="comment">//B也要指向原本链表的下一个节点</span></span><br><span class="line">                B = B.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//此时A的值小或者A与B的值相等，下一个节点是此时A指向的节点</span></span><br><span class="line">                tmpHead.next = A;</span><br><span class="line">                tmpHead = tmpHead.next;</span><br><span class="line">                A = A.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//链表长度并不相等，会出现一个链表已经结束而另一个链表还未结束的情况,直接串起来即可</span></span><br><span class="line">        <span class="keyword">if</span>(A!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//A还未结束</span></span><br><span class="line">            tmpHead.next = A;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(B!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//B还未结束t</span></span><br><span class="line">            tmpHead.next = B;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>(newHead.next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个链表按照标识分成大小两部分再合并成一个新链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 新链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> MyLinkedList <span class="title function_">partition</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//首先要创建四个指针，分别维护两段区域的头部和尾部</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">bs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">be</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">as</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">ae</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个指针用于遍历原链表</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.data&lt;x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(bs == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    bs = be = cur;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    be.next = cur;</span><br><span class="line">                    be = be.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(as == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    as = ae = cur;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ae.next = cur;</span><br><span class="line">                    ae = ae.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为是在原有链表上改变连接，所以可能会存在最后一个元素next域不为null的问题</span></span><br><span class="line">        <span class="keyword">if</span>(as!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ae.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(be == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>(as);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        be.next = as;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>(bs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先找到链表的中间节点</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时slow就是中间节点</span></span><br><span class="line">        <span class="comment">//将中间节点之后的链表反转</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">nh</span> <span class="operator">=</span> slow;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">pre</span> <span class="operator">=</span> nh;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">cur</span> <span class="operator">=</span> nh.next;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">LinkedNode</span> <span class="variable">curNext</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            pre.next = cur.next;</span><br><span class="line">            cur.next = nh;</span><br><span class="line">            nh = cur;</span><br><span class="line">            cur = curNext;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//两边遍历，如果不一样就失败</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">left</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">right</span> <span class="operator">=</span> nh;</span><br><span class="line">        <span class="keyword">while</span>(left!=right &amp;&amp; left!=<span class="literal">null</span> &amp;&amp; right!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(left.data != right.data)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left = left.next;</span><br><span class="line">            right = right.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断一个链表是否有环</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 有环 false 无环</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span> &amp;&amp; fast.next!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow &amp;&amp; flag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个有环的链表，尾节点指向第二个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head 链表的头节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createLoop</span><span class="params">(LinkedNode head)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur.next!= <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur.next = head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到链表环的入口点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 入口点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LinkedNode <span class="title function_">detectLoopEntry</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//起点到入口点的距离为X = (N-1)*C+Y n-1倍的环长度不用理，</span></span><br><span class="line">        <span class="comment">// 因为心里推断一下就可以发现两个引用还是会同时走到入口点，只不过slow在环中多绕了n-1圈</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span> &amp;&amp; fast.next!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//到达相遇点退出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果链表没有环需要退出</span></span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fast = head;<span class="comment">//重新回到头节点，此时fast和slow同步前进，找到相同点就是入口点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast!=slow)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除有序链表中的所有重复元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeDuplicate</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">cur</span>  <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//定义一个新的头和新的临时指针</span></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">newHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">tmpHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next!=<span class="literal">null</span> &amp;&amp; cur.data == cur.next.data)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//一直让cur走到不重复的节点</span></span><br><span class="line">                <span class="keyword">while</span>(cur.next!=<span class="literal">null</span> &amp;&amp; cur.data == cur.next.data)</span><br><span class="line">                &#123;</span><br><span class="line">                    cur = cur.next;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(newHead == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    newHead = tmpHead = cur;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    tmpHead.next = cur;</span><br><span class="line">                    tmpHead = tmpHead.next;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmpHead!=<span class="literal">null</span>) &#123;</span><br><span class="line">            tmpHead.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head = newHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyLinkedList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        <span class="type">int</span> []arr = &#123;<span class="number">12</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">34</span>&#125;;</span><br><span class="line">        list.createList(arr);</span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line"><span class="comment">//        System.out.println(list.getSize());</span></span><br><span class="line"><span class="comment">//        System.out.println(list.contains(12));</span></span><br><span class="line"><span class="comment">//        System.out.println(list.contains(13));</span></span><br><span class="line">        <span class="comment">//list.addFront(10);</span></span><br><span class="line">        <span class="comment">//list.addEnd(99);</span></span><br><span class="line">        <span class="comment">//list.addIndex(4,34);</span></span><br><span class="line">        <span class="comment">//list.addIndex(4,56);</span></span><br><span class="line">       <span class="comment">// System.out.println(list);</span></span><br><span class="line">        <span class="comment">//list.remove(12);</span></span><br><span class="line">        <span class="comment">//System.out.println(list);</span></span><br><span class="line">        <span class="comment">//list.removeAll(34);</span></span><br><span class="line">        <span class="comment">//System.out.println(list);</span></span><br><span class="line">        <span class="comment">//list.reverse();</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(list.middleNode());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(list.LastIndexNode(1));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        int []Brr = &#123;8,15,30&#125;;</span></span><br><span class="line"><span class="comment">//        MyLinkedList list1 = new MyLinkedList();</span></span><br><span class="line"><span class="comment">//        list1.createList(Brr);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(list.mergeList(list1.head));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line"><span class="comment">//        System.out.println(list.partition(60));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(list.isPalindrome());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        createIntersect(list.head,list1.head);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line"><span class="comment">//        System.out.println(list1);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(getIntersect(list.head, list1.head));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        createLoop(list.head);</span></span><br><span class="line"><span class="comment">//        System.out.println(list.hasCycle());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(list.detectLoopEntry());</span></span><br><span class="line"></span><br><span class="line">        list.removeDuplicate();</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list.clear();</span></span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;p&gt;重点学习无头单向非循环 双向无头非循环链表，这两种才是工作笔试面试当中的重点&lt;/p&gt;
&lt;p&gt;插入的时候要先绑定后面的节点信息&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
